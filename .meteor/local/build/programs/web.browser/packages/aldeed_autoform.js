//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;
var MongoObject = Package['aldeed:simple-schema'].MongoObject;
var check = Package.check.check;
var Match = Package.check.Match;
var DDP = Package.ddp.DDP;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Template = Package.templating.Template;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var EJSON = Package.ejson.EJSON;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var Random = Package.random.Random;
var moment = Package['momentjs:moment'].moment;
var HTML = Package.htmljs.HTML;

/* Package-scope variables */
var AutoForm, Utility, FormPreserve, res, Hooks, FormData, ArrayTracker, arrayTracker, globalDefaultTemplate, defaultTypeTemplates, deps, validateField, getFlatDocOfFieldValues, getInputValue, getInputData, updateTrackedFieldValue, updateAllTrackedFieldValues, getAllFieldsInForm, setDefaults;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-common.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This is the only file that is run on the server, too                                                                // 1
                                                                                                                       // 2
// Extend the schema options allowed by SimpleSchema                                                                   // 3
SimpleSchema.extendOptions({                                                                                           // 4
  autoform: Match.Optional(Object)                                                                                     // 5
});                                                                                                                    // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/utility.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global Utility:true, MongoObject, AutoForm, moment, SimpleSchema */                                                 // 1
                                                                                                                       // 2
Utility = {                                                                                                            // 3
  componentTypeList: ['afArrayField', 'afEachArrayItem', 'afFieldInput', 'afFormGroup', 'afObjectField', 'afQuickField', 'afQuickFields', 'autoForm', 'quickForm'],
  /**                                                                                                                  // 5
   * @method Utility.cleanNulls                                                                                        // 6
   * @private                                                                                                          // 7
   * @param {Object} doc - Source object                                                                               // 8
   * @returns {Object}                                                                                                 // 9
   *                                                                                                                   // 10
   * Returns an object in which all properties with null, undefined, or empty                                          // 11
   * string values have been removed, recursively.                                                                     // 12
   */                                                                                                                  // 13
  cleanNulls: function cleanNulls(doc, isArray, keepEmptyStrings) {                                                    // 14
    var newDoc = isArray ? [] : {};                                                                                    // 15
    _.each(doc, function(val, key) {                                                                                   // 16
      if (!_.isArray(val) && isBasicObject(val)) {                                                                     // 17
        val = cleanNulls(val, false, keepEmptyStrings); //recurse into plain objects                                   // 18
        if (!_.isEmpty(val)) {                                                                                         // 19
          newDoc[key] = val;                                                                                           // 20
        }                                                                                                              // 21
      } else if (_.isArray(val)) {                                                                                     // 22
        val = cleanNulls(val, true, keepEmptyStrings); //recurse into non-typed arrays                                 // 23
        if (!_.isEmpty(val)) {                                                                                         // 24
          newDoc[key] = val;                                                                                           // 25
        }                                                                                                              // 26
      } else if (!Utility.isNullUndefinedOrEmptyString(val)) {                                                         // 27
        newDoc[key] = val;                                                                                             // 28
      } else if (keepEmptyStrings && typeof val === "string" && val.length === 0) {                                    // 29
        newDoc[key] = val;                                                                                             // 30
      }                                                                                                                // 31
    });                                                                                                                // 32
    return newDoc;                                                                                                     // 33
  },                                                                                                                   // 34
  /**                                                                                                                  // 35
   * @method Utility.reportNulls                                                                                       // 36
   * @private                                                                                                          // 37
   * @param {Object} flatDoc - An object with no properties that are also objects.                                     // 38
   * @returns {Object} An object in which the keys represent the keys in the                                           // 39
   * original object that were null, undefined, or empty strings, and the value                                        // 40
   * of each key is "".                                                                                                // 41
   */                                                                                                                  // 42
  reportNulls: function reportNulls(flatDoc, keepEmptyStrings) {                                                       // 43
    var nulls = {};                                                                                                    // 44
    // Loop through the flat doc                                                                                       // 45
    _.each(flatDoc, function(val, key) {                                                                               // 46
      // If value is undefined, null, or an empty string, report this as null so it will be unset                      // 47
      if (val === null) {                                                                                              // 48
        nulls[key] = "";                                                                                               // 49
      } else if (val === void 0) {                                                                                     // 50
        nulls[key] = "";                                                                                               // 51
      } else if (!keepEmptyStrings && typeof val === "string" && val.length === 0) {                                   // 52
        nulls[key] = "";                                                                                               // 53
      }                                                                                                                // 54
      // If value is an array in which all the values recursively are undefined, null, or an empty string, report this as null so it will be unset
      else if (_.isArray(val) && Utility.cleanNulls(val, true, keepEmptyStrings).length === 0) {                       // 56
        nulls[key] = "";                                                                                               // 57
      }                                                                                                                // 58
    });                                                                                                                // 59
    return nulls;                                                                                                      // 60
  },                                                                                                                   // 61
  /**                                                                                                                  // 62
   * @method Utility.docToModifier                                                                                     // 63
   * @private                                                                                                          // 64
   * @param {Object} doc - An object to be converted into a MongoDB modifier                                           // 65
   * @param {Object} [options] - Options                                                                               // 66
   * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.
   * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.
   * @returns {Object} A MongoDB modifier.                                                                             // 69
   *                                                                                                                   // 70
   * Converts an object into a modifier by flattening it, putting keys with                                            // 71
   * null, undefined, and empty string values into `modifier.$unset`, and                                              // 72
   * putting the rest of the keys into `modifier.$set`.                                                                // 73
   */                                                                                                                  // 74
  docToModifier: function docToModifier(doc, options) {                                                                // 75
    var modifier = {}, mDoc, flatDoc, nulls;                                                                           // 76
    options = options || {};                                                                                           // 77
                                                                                                                       // 78
    // Flatten doc                                                                                                     // 79
    mDoc = new MongoObject(doc);                                                                                       // 80
    flatDoc = mDoc.getFlatObject({keepArrays: !!options.keepArrays});                                                  // 81
    // Get a list of null, undefined, and empty string values so we can unset them instead                             // 82
    nulls = Utility.reportNulls(flatDoc, !!options.keepEmptyStrings);                                                  // 83
    flatDoc = Utility.cleanNulls(flatDoc, false, !!options.keepEmptyStrings);                                          // 84
                                                                                                                       // 85
    if (!_.isEmpty(flatDoc)) {                                                                                         // 86
      modifier.$set = flatDoc;                                                                                         // 87
    }                                                                                                                  // 88
    if (!_.isEmpty(nulls)) {                                                                                           // 89
      modifier.$unset = nulls;                                                                                         // 90
    }                                                                                                                  // 91
    return modifier;                                                                                                   // 92
  },                                                                                                                   // 93
  /**                                                                                                                  // 94
   * @method Utility.getSelectValues                                                                                   // 95
   * @private                                                                                                          // 96
   * @param {Element} select - DOM Element from which to get current values                                            // 97
   * @returns {string[]}                                                                                               // 98
   *                                                                                                                   // 99
   * Gets a string array of all the selected values in a given `select` DOM element.                                   // 100
   */                                                                                                                  // 101
  getSelectValues: function getSelectValues(select) {                                                                  // 102
    var result = [];                                                                                                   // 103
    var options = select && select.options || [];                                                                      // 104
    var opt;                                                                                                           // 105
                                                                                                                       // 106
    for (var i = 0, ln = options.length; i < ln; i++) {                                                                // 107
      opt = options[i];                                                                                                // 108
                                                                                                                       // 109
      if (opt.selected) {                                                                                              // 110
        result.push(opt.value || opt.text);                                                                            // 111
      }                                                                                                                // 112
    }                                                                                                                  // 113
    return result;                                                                                                     // 114
  },                                                                                                                   // 115
  /*                                                                                                                   // 116
   * Get select options                                                                                                // 117
   */                                                                                                                  // 118
  getSelectOptions: function getSelectOptions(defs, hash) {                                                            // 119
    var schemaType = defs.type;                                                                                        // 120
    var selectOptions = hash.options;                                                                                  // 121
                                                                                                                       // 122
    // Handle options="allowed"                                                                                        // 123
    if (selectOptions === "allowed") {                                                                                 // 124
      selectOptions = _.map(defs.allowedValues, function(v) {                                                          // 125
        var label = v;                                                                                                 // 126
        if (hash.capitalize && v.length > 0 && schemaType === String) {                                                // 127
          label = v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();                                                // 128
        }                                                                                                              // 129
                                                                                                                       // 130
        return {label: label, value: v};                                                                               // 131
      });                                                                                                              // 132
    }                                                                                                                  // 133
                                                                                                                       // 134
    // Hashtable                                                                                                       // 135
    else if (_.isObject(selectOptions) && !_.isArray(selectOptions)) {                                                 // 136
      selectOptions = _.map(selectOptions, function(v, k) {                                                            // 137
        return {label: v, value: schemaType(k)};                                                                       // 138
      });                                                                                                              // 139
    }                                                                                                                  // 140
                                                                                                                       // 141
    return selectOptions;                                                                                              // 142
  },                                                                                                                   // 143
  /**                                                                                                                  // 144
   * @method Utility.lookup                                                                                            // 145
   * @private                                                                                                          // 146
   * @param {Any} obj                                                                                                  // 147
   * @returns {Any}                                                                                                    // 148
   *                                                                                                                   // 149
   * If `obj` is a string, returns the value of the property with that                                                 // 150
   * name on the `window` object. Otherwise returns `obj`.                                                             // 151
   */                                                                                                                  // 152
  lookup: function lookup(obj) {                                                                                       // 153
    var ref = window, arr;                                                                                             // 154
    if (typeof obj === "string") {                                                                                     // 155
      arr = obj.split(".");                                                                                            // 156
      while(arr.length && (ref = ref[arr.shift()]));                                                                   // 157
      if (!ref) {                                                                                                      // 158
        throw new Error(obj + " is not in the window scope");                                                          // 159
      }                                                                                                                // 160
      return ref;                                                                                                      // 161
    }                                                                                                                  // 162
    return obj;                                                                                                        // 163
  },                                                                                                                   // 164
  /**                                                                                                                  // 165
   * @method Utility.getDefs                                                                                           // 166
   * @private                                                                                                          // 167
   * @param {SimpleSchema} ss                                                                                          // 168
   * @param {String} name                                                                                              // 169
   * @return {Object} Schema definitions object                                                                        // 170
   *                                                                                                                   // 171
   * Returns the schema definitions object from a SimpleSchema instance. Equivalent to calling                         // 172
   * `ss.schema(name)` but handles throwing errors if `name` is not a string or is not a valid                         // 173
   * field name for this SimpleSchema instance.                                                                        // 174
   */                                                                                                                  // 175
  getDefs: function getDefs(ss, name) {                                                                                // 176
    if (typeof name !== "string") {                                                                                    // 177
      throw new Error("Invalid field name: (not a string)");                                                           // 178
    }                                                                                                                  // 179
                                                                                                                       // 180
    var defs = ss.schema(name);                                                                                        // 181
    if (!defs) {                                                                                                       // 182
      throw new Error("Invalid field name: " + name);                                                                  // 183
    }                                                                                                                  // 184
    return defs;                                                                                                       // 185
  },                                                                                                                   // 186
  /**                                                                                                                  // 187
   * @method Utility.objAffectsKey                                                                                     // 188
   * @private                                                                                                          // 189
   * @param  {Object} obj                                                                                              // 190
   * @param  {String} key                                                                                              // 191
   * @return {Boolean}                                                                                                 // 192
   * @todo should make this a static method in MongoObject                                                             // 193
   */                                                                                                                  // 194
  objAffectsKey: function objAffectsKey(obj, key) {                                                                    // 195
    var mDoc = new MongoObject(obj);                                                                                   // 196
    return mDoc.affectsKey(key);                                                                                       // 197
  },                                                                                                                   // 198
  /**                                                                                                                  // 199
   * @method Utility.expandObj                                                                                         // 200
   * @private                                                                                                          // 201
   * @param  {Object} doc                                                                                              // 202
   * @return {Object}                                                                                                  // 203
   *                                                                                                                   // 204
   * Takes a flat object and returns an expanded version of it.                                                        // 205
   */                                                                                                                  // 206
  expandObj: function expandObj(doc) {                                                                                 // 207
    var newDoc = {}, subkeys, subkey, subkeylen, nextPiece, current;                                                   // 208
    _.each(doc, function(val, key) {                                                                                   // 209
      subkeys = key.split(".");                                                                                        // 210
      subkeylen = subkeys.length;                                                                                      // 211
      current = newDoc;                                                                                                // 212
      for (var i = 0; i < subkeylen; i++) {                                                                            // 213
        subkey = subkeys[i];                                                                                           // 214
        if (typeof current[subkey] !== "undefined" && !_.isObject(current[subkey])) {                                  // 215
          break; //already set for some reason; leave it alone                                                         // 216
        }                                                                                                              // 217
        if (i === subkeylen - 1) {                                                                                     // 218
          //last iteration; time to set the value                                                                      // 219
          current[subkey] = val;                                                                                       // 220
        } else {                                                                                                       // 221
          //see if the next piece is a number                                                                          // 222
          nextPiece = subkeys[i + 1];                                                                                  // 223
          nextPiece = parseInt(nextPiece, 10);                                                                         // 224
          if (isNaN(nextPiece) && !_.isObject(current[subkey])) {                                                      // 225
            current[subkey] = {};                                                                                      // 226
          } else if (!isNaN(nextPiece) && !_.isArray(current[subkey])) {                                               // 227
            current[subkey] = [];                                                                                      // 228
          }                                                                                                            // 229
        }                                                                                                              // 230
        current = current[subkey];                                                                                     // 231
      }                                                                                                                // 232
    });                                                                                                                // 233
    return newDoc;                                                                                                     // 234
  },                                                                                                                   // 235
  /**                                                                                                                  // 236
   * @method Utility.compactArrays                                                                                     // 237
   * @private                                                                                                          // 238
   * @param  {Object} obj                                                                                              // 239
   * @return {undefined}                                                                                               // 240
   *                                                                                                                   // 241
   * Edits the object by reference, compacting any arrays at any level recursively.                                    // 242
   */                                                                                                                  // 243
  compactArrays: function compactArrays(obj) {                                                                         // 244
    if (_.isObject(obj)) {                                                                                             // 245
      _.each(obj, function (val, key) {                                                                                // 246
        if (_.isArray(val)) {                                                                                          // 247
          obj[key] = _.without(val, void 0, null);                                                                     // 248
          _.each(obj[key], function (arrayItem) {                                                                      // 249
            compactArrays(arrayItem);                                                                                  // 250
          });                                                                                                          // 251
        } else if (!(val instanceof Date) && _.isObject(val)) {                                                        // 252
          //recurse into objects                                                                                       // 253
          compactArrays(val);                                                                                          // 254
        }                                                                                                              // 255
      });                                                                                                              // 256
    }                                                                                                                  // 257
  },                                                                                                                   // 258
  /**                                                                                                                  // 259
   * @method Utility.bubbleEmpty                                                                                       // 260
   * @private                                                                                                          // 261
   * @param  {Object} obj                                                                                              // 262
   * @return {undefined}                                                                                               // 263
   *                                                                                                                   // 264
   * Edits the object by reference.                                                                                    // 265
   */                                                                                                                  // 266
  bubbleEmpty: function bubbleEmpty(obj, keepEmptyStrings) {                                                           // 267
    if (_.isObject(obj)) {                                                                                             // 268
      _.each(obj, function (val, key) {                                                                                // 269
        if (_.isArray(val)) {                                                                                          // 270
          _.each(val, function (arrayItem) {                                                                           // 271
            bubbleEmpty(arrayItem);                                                                                    // 272
          });                                                                                                          // 273
        } else if (isBasicObject(val)) {                                                                               // 274
          var allEmpty = _.all(val, function (prop) {                                                                  // 275
            return (prop === void 0 || prop === null || (!keepEmptyStrings && typeof prop === "string" && prop.length === 0));
          });                                                                                                          // 277
          if (_.isEmpty(val) || allEmpty) {                                                                            // 278
            obj[key] = null;                                                                                           // 279
          } else {                                                                                                     // 280
            //recurse into objects                                                                                     // 281
            bubbleEmpty(val);                                                                                          // 282
          }                                                                                                            // 283
        }                                                                                                              // 284
      });                                                                                                              // 285
    }                                                                                                                  // 286
  },                                                                                                                   // 287
  /**                                                                                                                  // 288
   * @method Utility.isNullUndefinedOrEmptyString                                                                      // 289
   * @private                                                                                                          // 290
   * @param  {Any} val                                                                                                 // 291
   * @return {Boolean}                                                                                                 // 292
   *                                                                                                                   // 293
   * Returns `true` if the value is null, undefined, or an empty string                                                // 294
   */                                                                                                                  // 295
  isNullUndefinedOrEmptyString: function isNullUndefinedOrEmptyString(val) {                                           // 296
    return (val === void 0 || val === null || (typeof val === "string" && val.length === 0));                          // 297
  },                                                                                                                   // 298
  /**                                                                                                                  // 299
   * @method Utility.isValidDateString                                                                                 // 300
   * @private                                                                                                          // 301
   * @param  {String}  dateString                                                                                      // 302
   * @return {Boolean}                                                                                                 // 303
   *                                                                                                                   // 304
   * Returns `true` if dateString is a "valid date string"                                                             // 305
   */                                                                                                                  // 306
  isValidDateString: function isValidDateString(dateString) {                                                          // 307
    var m = moment(dateString, 'YYYY-MM-DD', true);                                                                    // 308
    return m && m.isValid();                                                                                           // 309
  },                                                                                                                   // 310
  /**                                                                                                                  // 311
   * @method Utility.isValidTimeString                                                                                 // 312
   * @private                                                                                                          // 313
   * @param  {String}  timeString                                                                                      // 314
   * @return {Boolean}                                                                                                 // 315
   *                                                                                                                   // 316
   * Returns `true` if timeString is a "valid time string"                                                             // 317
   */                                                                                                                  // 318
  isValidTimeString: function isValidTimeString(timeString) {                                                          // 319
    if (typeof timeString !== "string") {                                                                              // 320
      return false;                                                                                                    // 321
    }                                                                                                                  // 322
                                                                                                                       // 323
    //this reg ex actually allows a few invalid hours/minutes/seconds, but                                             // 324
    //we can catch that when parsing                                                                                   // 325
    var regEx = /^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](\.[0-9]{1,3})?)?$/;                                                // 326
    return regEx.test(timeString);                                                                                     // 327
  },                                                                                                                   // 328
  /**                                                                                                                  // 329
   * @method  Utility.dateToDateString                                                                                 // 330
   * @private                                                                                                          // 331
   * @param  {Date} date                                                                                               // 332
   * @return {String}                                                                                                  // 333
   *                                                                                                                   // 334
   * Returns a "valid date string" representing the local date.                                                        // 335
   */                                                                                                                  // 336
  dateToDateString: function dateToDateString(date) {                                                                  // 337
    return moment(date).format("YYYY-MM-DD");                                                                          // 338
  },                                                                                                                   // 339
  /**                                                                                                                  // 340
   * @method  Utility.dateToDateStringUTC                                                                              // 341
   * @private                                                                                                          // 342
   * @param  {Date} date                                                                                               // 343
   * @return {String}                                                                                                  // 344
   *                                                                                                                   // 345
   * Returns a "valid date string" representing the date converted to the UTC time zone.                               // 346
   */                                                                                                                  // 347
  dateToDateStringUTC: function dateToDateStringUTC(date) {                                                            // 348
    return moment.utc(date).format("YYYY-MM-DD");                                                                      // 349
  },                                                                                                                   // 350
  /**                                                                                                                  // 351
   * @method  Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString                                                 // 352
   * @private                                                                                                          // 353
   * @param  {Date} date                                                                                               // 354
   * @return {String}                                                                                                  // 355
   *                                                                                                                   // 356
   * Returns a "valid normalized forced-UTC global date and time string" representing the time                         // 357
   * converted to the UTC time zone and expressed as the shortest possible string for the given                        // 358
   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).            // 359
   *                                                                                                                   // 360
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string
   */                                                                                                                  // 363
  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(date) {  // 364
    return moment(date).utc().format("YYYY-MM-DD[T]HH:mm:ss.SSS[Z]");                                                  // 365
  },                                                                                                                   // 366
  /**                                                                                                                  // 367
   * @method  Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString                                                // 368
   * @private                                                                                                          // 369
   * @param  {String} dateString                                                                                       // 370
   * @return {Boolean}                                                                                                 // 371
   *                                                                                                                   // 372
   * Returns true if dateString is a "valid normalized forced-UTC global date and time string"                         // 373
   */                                                                                                                  // 374
  isValidNormalizedForcedUtcGlobalDateAndTimeString: function isValidNormalizedForcedUtcGlobalDateAndTimeString(dateString) {
    if (typeof dateString !== "string") {                                                                              // 376
      return false;                                                                                                    // 377
    }                                                                                                                  // 378
                                                                                                                       // 379
    var datePart = dateString.substring(0, 10);                                                                        // 380
    var tPart = dateString.substring(10, 11);                                                                          // 381
    var timePart = dateString.substring(11, dateString.length - 1);                                                    // 382
    var zPart = dateString.substring(dateString.length - 1);                                                           // 383
    return Utility.isValidDateString(datePart) && tPart === "T" && Utility.isValidTimeString(timePart) && zPart === "Z";
  },                                                                                                                   // 385
  /**                                                                                                                  // 386
   * @method Utility.dateToNormalizedLocalDateAndTimeString                                                            // 387
   * @private                                                                                                          // 388
   * @param {Date} date The Date object                                                                                // 389
   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., "America/Los_Angeles"     // 390
   * @return {String}                                                                                                  // 391
   *                                                                                                                   // 392
   * Returns a "valid normalized local date and time string".                                                          // 393
   */                                                                                                                  // 394
  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {          // 395
    var m = moment(date);                                                                                              // 396
    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId                            // 397
    // to use a different timezone                                                                                     // 398
    if (typeof timezoneId === "string") {                                                                              // 399
      if (typeof m.tz !== "function") {                                                                                // 400
        throw new Error("If you specify a timezoneId, make sure that you've added a moment-timezone package to your app");
      }                                                                                                                // 402
      m.tz(timezoneId);                                                                                                // 403
    }                                                                                                                  // 404
    return m.format("YYYY-MM-DD[T]HH:mm:ss.SSS");                                                                      // 405
  },                                                                                                                   // 406
  /**                                                                                                                  // 407
   * @method  Utility.isValidNormalizedLocalDateAndTimeString                                                          // 408
   * @private                                                                                                          // 409
   * @param  {String} dtString                                                                                         // 410
   * @return {Boolean}                                                                                                 // 411
   *                                                                                                                   // 412
   * Returns true if dtString is a "valid normalized local date and time string"                                       // 413
   */                                                                                                                  // 414
  isValidNormalizedLocalDateAndTimeString: function isValidNormalizedLocalDateAndTimeString(dtString) {                // 415
    if (typeof dtString !== "string") {                                                                                // 416
      return false;                                                                                                    // 417
    }                                                                                                                  // 418
                                                                                                                       // 419
    var datePart = dtString.substring(0, 10);                                                                          // 420
    var tPart = dtString.substring(10, 11);                                                                            // 421
    var timePart = dtString.substring(11, dtString.length);                                                            // 422
    return Utility.isValidDateString(datePart) && tPart === "T" && Utility.isValidTimeString(timePart);                // 423
  },                                                                                                                   // 424
  /**                                                                                                                  // 425
   * @method Utility.getComponentContext                                                                               // 426
   * @private                                                                                                          // 427
   * @param  {Object} context A context (`this`) object                                                                // 428
   * @param {String} name The name of the helper or component we're calling from.                                      // 429
   * @return {Object} Normalized context object                                                                        // 430
   *                                                                                                                   // 431
   * Returns an object with `atts` and `defs` properties, normalized from whatever object is passed in.                // 432
   * This helps deal with the fact that we have to pass the ancestor autoform's context to different                   // 433
   * helpers and components in different ways, but in all cases we want to get access to it and throw                  // 434
   * an error if we can't find an autoform context.                                                                    // 435
   */                                                                                                                  // 436
  getComponentContext: function autoFormGetComponentContext(context, name) {                                           // 437
    var atts, defs, formComponentAttributes, fieldAttributes, fieldAttributesForComponentType, ss;                     // 438
                                                                                                                       // 439
    atts = _.clone(context || {});                                                                                     // 440
    ss = AutoForm.getFormSchema();                                                                                     // 441
    defs = Utility.getDefs(ss, atts.name); //defs will not be undefined                                                // 442
                                                                                                                       // 443
    // Look up the tree if we're in a helper, checking to see if any ancestor components                               // 444
    // had a <componentType>-attribute specified.                                                                      // 445
    formComponentAttributes = AutoForm.findAttributesWithPrefix(name + "-");                                           // 446
                                                                                                                       // 447
    // Get any field-specific attributes defined in the schema.                                                        // 448
    // They can be in autoform.attrName or autoform.componentType.attrName, with                                       // 449
    // the latter overriding the former.                                                                               // 450
    fieldAttributes = _.clone(defs.autoform) || {};                                                                    // 451
    fieldAttributesForComponentType = fieldAttributes[name] || {};                                                     // 452
    fieldAttributes = _.omit(fieldAttributes, Utility.componentTypeList);                                              // 453
    fieldAttributes = _.extend({}, fieldAttributes, fieldAttributesForComponentType);                                  // 454
                                                                                                                       // 455
    // "autoform" option in the schema provides default atts                                                           // 456
    atts = _.extend({}, formComponentAttributes, fieldAttributes, atts);                                               // 457
                                                                                                                       // 458
    // eval any attribute that is provided as a function                                                               // 459
    var evaluatedAtts = {};                                                                                            // 460
    _.each(atts, function (v, k) {                                                                                     // 461
      if (typeof v === 'function') {                                                                                   // 462
        evaluatedAtts[k] = v.call({                                                                                    // 463
          name: atts.name                                                                                              // 464
        });                                                                                                            // 465
      } else {                                                                                                         // 466
        evaluatedAtts[k] = v;                                                                                          // 467
      }                                                                                                                // 468
    });                                                                                                                // 469
                                                                                                                       // 470
    return {                                                                                                           // 471
      atts: evaluatedAtts,                                                                                             // 472
      defs: defs                                                                                                       // 473
    };                                                                                                                 // 474
  },                                                                                                                   // 475
  /**                                                                                                                  // 476
   * @method Utility.stringToArray                                                                                     // 477
   * @private                                                                                                          // 478
   * @param {String|Array} s A variable that might be a string or an array.                                            // 479
   * @param {String} errorMessage Error message to use if it's not a string or an array.                               // 480
   * @return {Array} The array, building it from a comma-delimited string if necessary.                                // 481
   */                                                                                                                  // 482
  stringToArray: function stringToArray(s, errorMessage) {                                                             // 483
    if (typeof s === "string") {                                                                                       // 484
      return s.replace(/ /g, '').split(',');                                                                           // 485
    } else if (!_.isArray(s)) {                                                                                        // 486
      throw new Error(errorMessage);                                                                                   // 487
    } else {                                                                                                           // 488
      return s;                                                                                                        // 489
    }                                                                                                                  // 490
  },                                                                                                                   // 491
  /**                                                                                                                  // 492
   * @method Utility.stringToBool                                                                                      // 493
   * @private                                                                                                          // 494
   * @param {String} val A string or null or undefined.                                                                // 495
   * @return {Boolean|String} The string converted to a Boolean.                                                       // 496
   *                                                                                                                   // 497
   * If the string is "true" or "1", returns `true`. If the string is "false" or "0", returns `false`. Otherwise returns the original string.
   */                                                                                                                  // 499
  stringToBool: function stringToBool(val) {                                                                           // 500
    if (typeof val === "string" && val.length > 0) {                                                                   // 501
      var lval = val.toLowerCase();                                                                                    // 502
      if (lval === "true" || lval === "1") {                                                                           // 503
        return true;                                                                                                   // 504
      } else if (lval === "false" || lval === "0") {                                                                   // 505
        return false;                                                                                                  // 506
      }                                                                                                                // 507
    }                                                                                                                  // 508
    return val;                                                                                                        // 509
  },                                                                                                                   // 510
  /**                                                                                                                  // 511
   * @method Utility.stringToNumber                                                                                    // 512
   * @private                                                                                                          // 513
   * @param {String} val A string or null or undefined.                                                                // 514
   * @return {Number|String} The string converted to a Number or the original value.                                   // 515
   *                                                                                                                   // 516
   * Returns Number(val) unless the result is NaN.                                                                     // 517
   */                                                                                                                  // 518
  stringToNumber: function stringToNumber(val) {                                                                       // 519
    if (typeof val === "string" && val.length > 0) {                                                                   // 520
      var numVal = Number(val);                                                                                        // 521
      if (!isNaN(numVal)) {                                                                                            // 522
        return numVal;                                                                                                 // 523
      }                                                                                                                // 524
    }                                                                                                                  // 525
    return val;                                                                                                        // 526
  },                                                                                                                   // 527
  /**                                                                                                                  // 528
   * @method Utility.stringToDate                                                                                      // 529
   * @private                                                                                                          // 530
   * @param {String} val A string or null or undefined.                                                                // 531
   * @return {Date|String} The string converted to a Date instance.                                                    // 532
   *                                                                                                                   // 533
   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.
   */                                                                                                                  // 535
  stringToDate: function stringToDate(val) {                                                                           // 536
    if (typeof val === "string" && val.length > 0) {                                                                   // 537
      return new Date(val);                                                                                            // 538
    }                                                                                                                  // 539
    return val;                                                                                                        // 540
  },                                                                                                                   // 541
  /**                                                                                                                  // 542
   * @method Utility.addClass                                                                                          // 543
   * @private                                                                                                          // 544
   * @param {Object} atts An object that might have a "class" property                                                 // 545
   * @param {String} klass The class string to add                                                                     // 546
   * @return {Object} The object with klass added to the "class" property, creating the property if necessary          // 547
   */                                                                                                                  // 548
  addClass: function addClass(atts, klass) {                                                                           // 549
    if (typeof atts["class"] === "string") {                                                                           // 550
      atts["class"] += " " + klass;                                                                                    // 551
    } else {                                                                                                           // 552
      atts["class"] = klass;                                                                                           // 553
    }                                                                                                                  // 554
    return atts;                                                                                                       // 555
  },                                                                                                                   // 556
  /**                                                                                                                  // 557
   * @method Utility.getFormTypeDef                                                                                    // 558
   * @private                                                                                                          // 559
   * @param {String} formType The form type                                                                            // 560
   * @return {Object} The definition. Throws an error if type hasn't been defined.                                     // 561
   */                                                                                                                  // 562
  getFormTypeDef: function getFormTypeDef(formType) {                                                                  // 563
    var ftd = AutoForm._formTypeDefinitions[formType];                                                                 // 564
    if (!ftd) {                                                                                                        // 565
      throw new Error('AutoForm: Form type "' + formType + '" has not been defined');                                  // 566
    }                                                                                                                  // 567
    return ftd;                                                                                                        // 568
  }                                                                                                                    // 569
};                                                                                                                     // 570
                                                                                                                       // 571
                                                                                                                       // 572
// getPrototypeOf polyfill                                                                                             // 573
if (typeof Object.getPrototypeOf !== "function") {                                                                     // 574
  if (typeof "".__proto__ === "object") {                                                                              // 575
    Object.getPrototypeOf = function(object) {                                                                         // 576
      return object.__proto__;                                                                                         // 577
    };                                                                                                                 // 578
  } else {                                                                                                             // 579
    Object.getPrototypeOf = function(object) {                                                                         // 580
      // May break if the constructor has been tampered with                                                           // 581
      return object.constructor.prototype;                                                                             // 582
    };                                                                                                                 // 583
  }                                                                                                                    // 584
}                                                                                                                      // 585
                                                                                                                       // 586
/* Tests whether "obj" is an Object as opposed to                                                                      // 587
 * something that inherits from Object                                                                                 // 588
 *                                                                                                                     // 589
 * @param {any} obj                                                                                                    // 590
 * @returns {Boolean}                                                                                                  // 591
 */                                                                                                                    // 592
var isBasicObject = function(obj) {                                                                                    // 593
  return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                           // 594
};                                                                                                                     // 595
                                                                                                                       // 596
/*                                                                                                                     // 597
 * Extend SS for now; TODO put this in SS package                                                                      // 598
 */                                                                                                                    // 599
if (typeof SimpleSchema.prototype.getAllowedValuesForKey !== 'function') {                                             // 600
  SimpleSchema.prototype.getAllowedValuesForKey = function (key) {                                                     // 601
    var defs = this.getDefinition(key, ['type', 'allowedValues']);                                                     // 602
                                                                                                                       // 603
    // For array fields, `allowedValues` is on the array item definition                                               // 604
    if (defs.type === Array) {                                                                                         // 605
      defs = this.getDefinition(key+".$", ['allowedValues']);                                                          // 606
    }                                                                                                                  // 607
                                                                                                                       // 608
    return defs.allowedValues;                                                                                         // 609
  };                                                                                                                   // 610
}                                                                                                                      // 611
                                                                                                                       // 612
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/form-preserve.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @constructor                                                                                                        // 2
 * @private                                                                                                            // 3
 * @param {String} migrationName                                                                                       // 4
 *                                                                                                                     // 5
 * Internal helper object to preserve form inputs across Hot Code Push                                                 // 6
 * and across "pages" navigation if the option is enabled.                                                             // 7
 */                                                                                                                    // 8
FormPreserve = function formPreserveConstructor(migrationName) {                                                       // 9
  var self = this;                                                                                                     // 10
  if (! _.isString(migrationName))                                                                                     // 11
    throw Error("You must define an unique migration name of type String");                                            // 12
  self.registeredForms = {};                                                                                           // 13
  self.retrievedDocuments = {};                                                                                        // 14
  if (Package.reload) {                                                                                                // 15
    var Reload = Package.reload.Reload;                                                                                // 16
    self.retrievedDocuments = Reload._migrationData(migrationName) || '{}';                                            // 17
                                                                                                                       // 18
    // Currently migration does not seem to support proper storage                                                     // 19
    // of Date type. It comes back as a string, so we need to store                                                    // 20
    // EJSON instead.                                                                                                  // 21
    if (typeof self.retrievedDocuments === 'string') {                                                                 // 22
      self.retrievedDocuments = EJSON.parse(self.retrievedDocuments);                                                  // 23
    }                                                                                                                  // 24
                                                                                                                       // 25
    Reload._onMigrate(migrationName, function () {                                                                     // 26
      var doc = self._retrieveRegisteredDocuments();                                                                   // 27
      return [true, EJSON.stringify(doc)];                                                                             // 28
    });                                                                                                                // 29
  }                                                                                                                    // 30
};                                                                                                                     // 31
                                                                                                                       // 32
FormPreserve.prototype.getDocument = function (formId) {                                                               // 33
  var self = this, doc;                                                                                                // 34
  if (! _.has(self.retrievedDocuments, formId)) {                                                                      // 35
    return false;                                                                                                      // 36
  }                                                                                                                    // 37
                                                                                                                       // 38
  return self.retrievedDocuments[formId];                                                                              // 39
};                                                                                                                     // 40
                                                                                                                       // 41
FormPreserve.prototype.clearDocument = function (formId) {                                                             // 42
  delete this.retrievedDocuments[formId];                                                                              // 43
};                                                                                                                     // 44
                                                                                                                       // 45
FormPreserve.prototype.registerForm = function (formId, retrieveFunc) {                                                // 46
  this.registeredForms[formId] = retrieveFunc;                                                                         // 47
};                                                                                                                     // 48
                                                                                                                       // 49
FormPreserve.prototype.formIsRegistered = function (formId) {                                                          // 50
  return !!this.registeredForms[formId];                                                                               // 51
};                                                                                                                     // 52
                                                                                                                       // 53
FormPreserve.prototype.unregisterForm = function (formId) {                                                            // 54
  delete this.registeredForms[formId];                                                                                 // 55
  delete this.retrievedDocuments[formId];                                                                              // 56
};                                                                                                                     // 57
                                                                                                                       // 58
FormPreserve.prototype.unregisterAllForms = function () {                                                              // 59
  var self = this;                                                                                                     // 60
  self.registeredForms = {};                                                                                           // 61
  self.retrievedDocuments = {};                                                                                        // 62
};                                                                                                                     // 63
                                                                                                                       // 64
FormPreserve.prototype._retrieveRegisteredDocuments = function () {                                                    // 65
  var self = this;                                                                                                     // 66
  res = {};                                                                                                            // 67
  _.each(self.registeredForms, function (retrieveFunc, formId) {                                                       // 68
    res[formId] = retrieveFunc();                                                                                      // 69
  });                                                                                                                  // 70
  return res;                                                                                                          // 71
};                                                                                                                     // 72
                                                                                                                       // 73
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-hooks.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Manages all hooks, supporting append/replace, get                                                                   // 1
                                                                                                                       // 2
Hooks = {                                                                                                              // 3
  form: {},                                                                                                            // 4
  global: {                                                                                                            // 5
    before: {},                                                                                                        // 6
    after: {},                                                                                                         // 7
    formToDoc: [],                                                                                                     // 8
    formToModifier: [],                                                                                                // 9
    docToForm: [],                                                                                                     // 10
    onSubmit: [],                                                                                                      // 11
    onSuccess: [],                                                                                                     // 12
    onError: [],                                                                                                       // 13
    beginSubmit: [],                                                                                                   // 14
    endSubmit: []                                                                                                      // 15
  }                                                                                                                    // 16
};                                                                                                                     // 17
                                                                                                                       // 18
Hooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {                                            // 19
  // Add before hooks                                                                                                  // 20
  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {                                  // 21
    if (typeof func !== "function") {                                                                                  // 22
      throw new Error("AutoForm before hook must be a function, not " + typeof func);                                  // 23
    }                                                                                                                  // 24
    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];                       // 25
    hooksList.before[type].push(func);                                                                                 // 26
  });                                                                                                                  // 27
                                                                                                                       // 28
  // Add after hooks                                                                                                   // 29
  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {                                     // 30
    if (typeof func !== "function") {                                                                                  // 31
      throw new Error("AutoForm after hook must be a function, not " + typeof func);                                   // 32
    }                                                                                                                  // 33
    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];                          // 34
    hooksList.after[type].push(func);                                                                                  // 35
  });                                                                                                                  // 36
                                                                                                                       // 37
  // Add all other hooks                                                                                               // 38
  _.each(['formToDoc', 'docToForm', 'onSubmit', 'onSuccess', 'onError', 'beginSubmit', 'endSubmit'], function autoFormHooksEach(name) {
    if (hooks[name]) {                                                                                                 // 40
      if (typeof hooks[name] !== "function") {                                                                         // 41
        throw new Error("AutoForm " + name + " hook must be a function, not " + typeof hooks[name]);                   // 42
      }                                                                                                                // 43
                                                                                                                       // 44
      if(replace) {                                                                                                    // 45
          hooksList[name] = [];                                                                                        // 46
      }                                                                                                                // 47
                                                                                                                       // 48
      hooksList[name].push(hooks[name]);                                                                               // 49
    }                                                                                                                  // 50
  });                                                                                                                  // 51
};                                                                                                                     // 52
                                                                                                                       // 53
Hooks.getHooks = function getHooks(formId, type, subtype) {                                                            // 54
  var f, g;                                                                                                            // 55
  if (subtype) {                                                                                                       // 56
    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];                     // 57
    g = Hooks.global[type] && Hooks.global[type][subtype] || [];                                                       // 58
  } else {                                                                                                             // 59
    f = Hooks.form[formId] && Hooks.form[formId][type] || [];                                                          // 60
    g = Hooks.global[type] || [];                                                                                      // 61
  }                                                                                                                    // 62
  return f.concat(g);                                                                                                  // 63
};                                                                                                                     // 64
                                                                                                                       // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-formdata.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global FormData:true */                                                                                             // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
 * Tracks form data with reactivity. This is similar to                                                                // 4
 * ReactiveDict, but we need to store typed objects and                                                                // 5
 * keep their type upon retrieval.                                                                                     // 6
 */                                                                                                                    // 7
                                                                                                                       // 8
FormData = function () {                                                                                               // 9
  var self = this;                                                                                                     // 10
  self.forms = {};                                                                                                     // 11
};                                                                                                                     // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Initializes tracking for a given form, if not already done.                                                         // 15
 * @param {String} formId The form's `id` attribute                                                                    // 16
 */                                                                                                                    // 17
FormData.prototype.initForm = function (formId) {                                                                      // 18
  var self = this;                                                                                                     // 19
                                                                                                                       // 20
  if (self.forms[formId]) {                                                                                            // 21
    return;                                                                                                            // 22
  }                                                                                                                    // 23
                                                                                                                       // 24
  self.forms[formId] = {                                                                                               // 25
    sourceDoc: null,                                                                                                   // 26
    deps: {                                                                                                            // 27
      sourceDoc: new Tracker.Dependency()                                                                              // 28
    }                                                                                                                  // 29
  };                                                                                                                   // 30
};                                                                                                                     // 31
                                                                                                                       // 32
/**                                                                                                                    // 33
 * Initializes tracking for a given form, if not already done.                                                         // 34
 * @param {String} formId The form's `id` attribute                                                                    // 35
 */                                                                                                                    // 36
                                                                                                                       // 37
/**                                                                                                                    // 38
 * Gets or sets a source doc for the given form. Reactive.                                                             // 39
 * @param   {String}                formId    The form's `id` attribute                                                // 40
 * @param   {MongoObject|null}      sourceDoc The mDoc for the form or `null` if no doc.                               // 41
 * @returns {MongoObject|undefined} Returns the form's MongoObject if getting.                                         // 42
 */                                                                                                                    // 43
FormData.prototype.sourceDoc = function (formId, sourceDoc) {                                                          // 44
  var self = this;                                                                                                     // 45
  self.initForm(formId);                                                                                               // 46
                                                                                                                       // 47
  if (sourceDoc || sourceDoc === null) {                                                                               // 48
    //setter                                                                                                           // 49
    self.forms[formId].sourceDoc = sourceDoc;                                                                          // 50
    self.forms[formId].deps.sourceDoc.changed();                                                                       // 51
  } else {                                                                                                             // 52
    //getter                                                                                                           // 53
    self.forms[formId].deps.sourceDoc.depend();                                                                        // 54
    return self.forms[formId].sourceDoc;                                                                               // 55
  }                                                                                                                    // 56
};                                                                                                                     // 57
                                                                                                                       // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-arrays.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Track arrays; this allows us to add/remove fields or groups of fields for an array                                  // 1
// but still easily respect minCount and maxCount, and properly add/remove the same                                    // 2
// items from the database once the form is submitted.                                                                 // 3
                                                                                                                       // 4
ArrayTracker = function afArrayTracker() {                                                                             // 5
  var self = this;                                                                                                     // 6
  self.info = {};                                                                                                      // 7
};                                                                                                                     // 8
                                                                                                                       // 9
ArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {               // 10
  var defs = AutoForm.Utility.getDefs(ss, field);                                                                      // 11
                                                                                                                       // 12
  // minCount is set by the schema, but can be set higher on the field attribute                                       // 13
  overrideMinCount = overrideMinCount || 0;                                                                            // 14
  var minCount = defs.minCount || 0;                                                                                   // 15
  minCount = Math.max(overrideMinCount, minCount);                                                                     // 16
                                                                                                                       // 17
  // maxCount is set by the schema, but can be set lower on the field attribute                                        // 18
  overrideMaxCount = overrideMaxCount || Infinity;                                                                     // 19
  var maxCount = defs.maxCount || Infinity;                                                                            // 20
  maxCount = Math.min(overrideMaxCount, maxCount);                                                                     // 21
                                                                                                                       // 22
  return {minCount: minCount, maxCount: maxCount};                                                                     // 23
};                                                                                                                     // 24
                                                                                                                       // 25
ArrayTracker.prototype.initForm = function atInitForm(formId) {                                                        // 26
	var self = this;                                                                                                      // 27
                                                                                                                       // 28
	if (self.info[formId])                                                                                                // 29
		return;                                                                                                              // 30
                                                                                                                       // 31
	self.info[formId] = {};                                                                                               // 32
};                                                                                                                     // 33
                                                                                                                       // 34
ArrayTracker.prototype.getForm = function atInitForm(formId) {                                                         // 35
	var self = this;                                                                                                      // 36
	self.initForm(formId);                                                                                                // 37
	return self.info[formId];                                                                                             // 38
};                                                                                                                     // 39
                                                                                                                       // 40
ArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {                                           // 41
	var self = this;                                                                                                      // 42
	self.initForm(formId);                                                                                                // 43
                                                                                                                       // 44
	if (!self.info[formId][field]) {                                                                                      // 45
		self.resetField(formId, field);                                                                                      // 46
	}                                                                                                                     // 47
};                                                                                                                     // 48
                                                                                                                       // 49
ArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {
	var self = this;                                                                                                      // 51
	self.ensureField(formId, field);                                                                                      // 52
                                                                                                                       // 53
	if (self.info[formId][field].array != null)                                                                           // 54
		return;                                                                                                              // 55
                                                                                                                       // 56
	// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.           // 57
	// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.                 // 58
	var range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);                                            // 59
	var arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);                                         // 60
                                                                                                                       // 61
	// If this is an array of objects, collect names of object props                                                      // 62
	var childKeys = [];                                                                                                   // 63
	if (ss.schema(field + '.$').type === Object) {                                                                        // 64
    childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                                // 65
	}                                                                                                                     // 66
                                                                                                                       // 67
	var loopArray = [];                                                                                                   // 68
	for (var i = 0; i < arrayCount; i++) {                                                                                // 69
		var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                        // 70
		loopArray.push(loopCtx);                                                                                             // 71
	};                                                                                                                    // 72
                                                                                                                       // 73
	self.info[formId][field].array = loopArray;                                                                           // 74
	var count = loopArray.length;                                                                                         // 75
	self.info[formId][field].count = count;                                                                               // 76
	self.info[formId][field].visibleCount = count;                                                                        // 77
	self.info[formId][field].deps.changed();                                                                              // 78
};                                                                                                                     // 79
                                                                                                                       // 80
ArrayTracker.prototype.resetField = function atResetField(formId, field) {                                             // 81
	var self = this;                                                                                                      // 82
	self.initForm(formId);                                                                                                // 83
                                                                                                                       // 84
	if (!self.info[formId][field]) {                                                                                      // 85
		self.info[formId][field] = {                                                                                         // 86
			deps: new Tracker.Dependency()                                                                                      // 87
		};                                                                                                                   // 88
	}                                                                                                                     // 89
                                                                                                                       // 90
	self.info[formId][field].array = null;                                                                                // 91
	self.info[formId][field].count = 0;                                                                                   // 92
	self.info[formId][field].visibleCount = 0;                                                                            // 93
	self.info[formId][field].deps.changed();                                                                              // 94
};                                                                                                                     // 95
                                                                                                                       // 96
ArrayTracker.prototype.resetForm = function atResetForm(formId) {                                                      // 97
	var self = this;                                                                                                      // 98
	_.each(self.info[formId], function (info, field) {                                                                    // 99
		self.resetField(formId, field);                                                                                      // 100
	});                                                                                                                   // 101
};                                                                                                                     // 102
                                                                                                                       // 103
ArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {                                                  // 104
	var self = this;                                                                                                      // 105
	self.info[formId] = {};                                                                                               // 106
};                                                                                                                     // 107
                                                                                                                       // 108
ArrayTracker.prototype.tracksField = function atTracksField(formId, field) {                                           // 109
	var self = this;                                                                                                      // 110
	self.ensureField(formId, field);                                                                                      // 111
	self.info[formId][field].deps.depend();                                                                               // 112
	return !!self.info[formId][field].array;                                                                              // 113
};                                                                                                                     // 114
                                                                                                                       // 115
ArrayTracker.prototype.getField = function atGetField(formId, field) {                                                 // 116
	var self = this;                                                                                                      // 117
	self.ensureField(formId, field);                                                                                      // 118
	self.info[formId][field].deps.depend();                                                                               // 119
	return self.info[formId][field].array;                                                                                // 120
};                                                                                                                     // 121
                                                                                                                       // 122
ArrayTracker.prototype.getCount = function atGetCount(formId, field) {                                                 // 123
	var self = this;                                                                                                      // 124
	self.ensureField(formId, field);                                                                                      // 125
	self.info[formId][field].deps.depend();                                                                               // 126
	return self.info[formId][field].count;                                                                                // 127
};                                                                                                                     // 128
                                                                                                                       // 129
ArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {                                   // 130
	var self = this;                                                                                                      // 131
	self.ensureField(formId, field);                                                                                      // 132
	self.info[formId][field].deps.depend();                                                                               // 133
	return self.info[formId][field].visibleCount;                                                                         // 134
};                                                                                                                     // 135
                                                                                                                       // 136
ArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {           // 137
	var self = this;                                                                                                      // 138
	self.ensureField(formId, field);                                                                                      // 139
	self.info[formId][field].deps.depend();                                                                               // 140
	var firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {                               // 141
		return !currentField.removed;                                                                                        // 142
	});                                                                                                                   // 143
	return (firstVisibleField && firstVisibleField.index === currentIndex);                                               // 144
};                                                                                                                     // 145
                                                                                                                       // 146
ArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {             // 147
	var self = this;                                                                                                      // 148
	self.ensureField(formId, field);                                                                                      // 149
	self.info[formId][field].deps.depend();                                                                               // 150
	var lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {                       // 151
		return !currentField.removed;                                                                                        // 152
	}));                                                                                                                  // 153
	return (lastVisibleField && lastVisibleField.index === currentIndex);                                                 // 154
};                                                                                                                     // 155
                                                                                                                       // 156
ArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {
  var self = this;                                                                                                     // 158
  self.ensureField(formId, field);                                                                                     // 159
                                                                                                                       // 160
  if (!self.info[formId][field].array) {                                                                               // 161
  	return;                                                                                                             // 162
  }                                                                                                                    // 163
                                                                                                                       // 164
  var currentCount = self.info[formId][field].visibleCount                                                             // 165
  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;                               // 166
                                                                                                                       // 167
  if (currentCount < maxCount) {                                                                                       // 168
	  var i = self.info[formId][field].array.length;                                                                      // 169
                                                                                                                       // 170
	  // If this is an array of objects, collect names of object props                                                    // 171
	  var childKeys = [];                                                                                                 // 172
	  if (ss.schema(field + '.$').type === Object) {                                                                      // 173
      childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                              // 174
	  }                                                                                                                   // 175
                                                                                                                       // 176
	  var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                       // 177
                                                                                                                       // 178
	  self.info[formId][field].array.push(loopCtx);                                                                       // 179
	  self.info[formId][field].count++;                                                                                   // 180
	  self.info[formId][field].visibleCount++;                                                                            // 181
	  self.info[formId][field].deps.changed();                                                                            // 182
  }                                                                                                                    // 183
};                                                                                                                     // 184
                                                                                                                       // 185
ArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {
  var self = this;                                                                                                     // 187
  self.ensureField(formId, field);                                                                                     // 188
                                                                                                                       // 189
  if (!self.info[formId][field].array) {                                                                               // 190
  	return;                                                                                                             // 191
  }                                                                                                                    // 192
                                                                                                                       // 193
  var currentCount = self.info[formId][field].visibleCount;                                                            // 194
  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;                               // 195
                                                                                                                       // 196
  if (currentCount > minCount) {                                                                                       // 197
    self.info[formId][field].array[index].removed = true;                                                              // 198
    self.info[formId][field].count--;                                                                                  // 199
    self.info[formId][field].visibleCount--;                                                                           // 200
    self.info[formId][field].deps.changed();                                                                           // 201
  }                                                                                                                    // 202
}                                                                                                                      // 203
                                                                                                                       // 204
/*                                                                                                                     // 205
 * PRIVATE                                                                                                             // 206
 */                                                                                                                    // 207
var createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {                    // 208
  var loopCtx = {                                                                                                      // 209
  	formId:         formId,                                                                                             // 210
  	arrayFieldName: field,                                                                                              // 211
  	name:           field + '.' + index,                                                                                // 212
  	index:          index,                                                                                              // 213
  	minCount:       overrideMinCount,                                                                                   // 214
  	maxCount:       overrideMaxCount                                                                                    // 215
  };                                                                                                                   // 216
                                                                                                                       // 217
  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName                // 218
  if (childKeys.length) {                                                                                              // 219
    loopCtx.current = {};                                                                                              // 220
	_.each(childKeys, function (k) {                                                                                      // 221
	  loopCtx.current[k] = field + '.' + index + '.' + k;                                                                 // 222
    });                                                                                                                // 223
  }                                                                                                                    // 224
                                                                                                                       // 225
  return loopCtx;                                                                                                      // 226
}                                                                                                                      // 227
                                                                                                                       // 228
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm:true, FormPreserve */                                                                               // 1
                                                                                                                       // 2
AutoForm = AutoForm || {};                                                                                             // 3
                                                                                                                       // 4
// formPreserve is used to keep current form data across hot code                                                      // 5
// reloads for any forms that are currently rendered                                                                   // 6
AutoForm.formPreserve = new FormPreserve("autoforms");                                                                 // 7
                                                                                                                       // 8
AutoForm.reactiveFormData = new FormData();                                                                            // 9
                                                                                                                       // 10
AutoForm._inputTypeDefinitions = {}; //for storing input type definitions added by AutoForm.addInputType               // 11
AutoForm._formTypeDefinitions = {}; //for storing submit type definitions added by AutoForm.addFormType                // 12
                                                                                                                       // 13
arrayTracker = new ArrayTracker();                                                                                     // 14
                                                                                                                       // 15
// Used by AutoForm._forceResetFormValues; temporary hack                                                              // 16
AutoForm._destroyForm = {};                                                                                            // 17
                                                                                                                       // 18
// reactive templates                                                                                                  // 19
globalDefaultTemplate = "bootstrap3";                                                                                  // 20
defaultTypeTemplates = {};                                                                                             // 21
deps = {                                                                                                               // 22
  defaultTemplate: new Tracker.Dependency(),                                                                           // 23
  defaultTypeTemplates: {}                                                                                             // 24
};                                                                                                                     // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-helpers.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global arrayTracker, SimpleSchema, AutoForm */                                                                      // 1
                                                                                                                       // 2
function parseOptions(options) {                                                                                       // 3
  var hash = (options || {}).hash || {};                                                                               // 4
  // Find the form's schema                                                                                            // 5
  var ss = AutoForm.getFormSchema();                                                                                   // 6
  // Call getDefs for side effect of throwing errors when name is not in schema                                        // 7
  if (hash.name) {                                                                                                     // 8
    AutoForm.Utility.getDefs(ss, hash.name);                                                                           // 9
  }                                                                                                                    // 10
  return _.extend({}, hash, {ss: ss});                                                                                 // 11
}                                                                                                                      // 12
                                                                                                                       // 13
/*                                                                                                                     // 14
 * Global template helpers (exported to app)                                                                           // 15
 */                                                                                                                    // 16
                                                                                                                       // 17
/*                                                                                                                     // 18
 * afFieldMessage                                                                                                      // 19
 */                                                                                                                    // 20
Template.registerHelper('afFieldMessage', function autoFormFieldMessage(options) {                                     // 21
  options = parseOptions(options, 'afFieldMessage');                                                                   // 22
  var formId = AutoForm.getFormId();                                                                                   // 23
                                                                                                                       // 24
  return options.ss.namedContext(formId).keyErrorMessage(options.name);                                                // 25
});                                                                                                                    // 26
                                                                                                                       // 27
/*                                                                                                                     // 28
 * afFieldIsInvalid                                                                                                    // 29
 */                                                                                                                    // 30
Template.registerHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {                                 // 31
  options = parseOptions(options, 'afFieldIsInvalid');                                                                 // 32
  var formId = AutoForm.getFormId();                                                                                   // 33
                                                                                                                       // 34
  return options.ss.namedContext(formId).keyIsInvalid(options.name);                                                   // 35
});                                                                                                                    // 36
                                                                                                                       // 37
/*                                                                                                                     // 38
 * afArrayFieldHasMoreThanMinimum                                                                                      // 39
 */                                                                                                                    // 40
Template.registerHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {     // 41
  options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');                                                   // 42
  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 43
                                                                                                                       // 44
  // Registered form types can disable adding/removing array items                                                     // 45
  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 46
    return false;                                                                                                      // 47
  }                                                                                                                    // 48
                                                                                                                       // 49
  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 50
  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 51
  return (visibleCount > range.minCount);                                                                              // 52
});                                                                                                                    // 53
                                                                                                                       // 54
/*                                                                                                                     // 55
 * afArrayFieldHasLessThanMaximum                                                                                      // 56
 */                                                                                                                    // 57
Template.registerHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {     // 58
  options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');                                                   // 59
  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 60
                                                                                                                       // 61
  // Registered form types can disable adding/removing array items                                                     // 62
  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 63
    return false;                                                                                                      // 64
  }                                                                                                                    // 65
                                                                                                                       // 66
  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 67
  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 68
  return (visibleCount < range.maxCount);                                                                              // 69
});                                                                                                                    // 70
                                                                                                                       // 71
/*                                                                                                                     // 72
 * afFieldValueIs                                                                                                      // 73
 */                                                                                                                    // 74
Template.registerHelper('afFieldValueIs', function autoFormFieldValueIs(options) {                                     // 75
  options = parseOptions(options, 'afFieldValueIs');                                                                   // 76
                                                                                                                       // 77
  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 78
  return currentValue === options.value;                                                                               // 79
});                                                                                                                    // 80
                                                                                                                       // 81
/*                                                                                                                     // 82
 * afArrayFieldIsFirstVisible                                                                                          // 83
 */                                                                                                                    // 84
Template.registerHelper('afArrayFieldIsFirstVisible', function autoFormArrayFieldIsFirstVisible() {                    // 85
  var context = this;                                                                                                  // 86
  return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);                     // 87
});                                                                                                                    // 88
                                                                                                                       // 89
/*                                                                                                                     // 90
 * afArrayFieldIsLastVisible                                                                                           // 91
 */                                                                                                                    // 92
Template.registerHelper('afArrayFieldIsLastVisible', function autoFormArrayFieldIsLastVisible() {                      // 93
  var context = this;                                                                                                  // 94
  return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);                      // 95
});                                                                                                                    // 96
                                                                                                                       // 97
/*                                                                                                                     // 98
 * afFieldValueContains                                                                                                // 99
 */                                                                                                                    // 100
Template.registerHelper('afFieldValueContains', function autoFormFieldValueContains(options) {                         // 101
  options = parseOptions(options, 'afFieldValueContains');                                                             // 102
                                                                                                                       // 103
  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 104
  return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(",")));
});                                                                                                                    // 106
                                                                                                                       // 107
/*                                                                                                                     // 108
 * afFieldLabelText                                                                                                    // 109
 */                                                                                                                    // 110
Template.registerHelper('afFieldLabelText', function autoFormFieldLabelText(options) {                                 // 111
  options = parseOptions(options, 'afFieldLabelText');                                                                 // 112
  return AutoForm.getLabelForField(options.name);                                                                      // 113
});                                                                                                                    // 114
                                                                                                                       // 115
/*                                                                                                                     // 116
 * afFieldNames                                                                                                        // 117
 */                                                                                                                    // 118
Template.registerHelper("afFieldNames", function autoFormFieldNames(options) {                                         // 119
  options = parseOptions(options, 'afFieldNames');                                                                     // 120
  var ss = options.ss, name = options.name, namePlusDot, genericName, genericNamePlusDot;                              // 121
  var form = AutoForm.getCurrentDataForForm();                                                                         // 122
                                                                                                                       // 123
  if (name) {                                                                                                          // 124
    namePlusDot = name + ".";                                                                                          // 125
    genericName = SimpleSchema._makeGeneric(name);                                                                     // 126
    genericNamePlusDot = genericName + ".";                                                                            // 127
  }                                                                                                                    // 128
                                                                                                                       // 129
  // Get the list of fields we want included                                                                           // 130
  var fieldList = options.fields, usedAncestorFieldList = false;                                                       // 131
  if (fieldList) {                                                                                                     // 132
    fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');
  }                                                                                                                    // 134
                                                                                                                       // 135
  var ancestorFieldList = AutoForm.findAttribute("fields");                                                            // 136
  if (ancestorFieldList) {                                                                                             // 137
    ancestorFieldList = AutoForm.Utility.stringToArray(ancestorFieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');
                                                                                                                       // 139
    // Use the ancestor field list as backup, unless there is                                                          // 140
    // a name and that name is listed in the ancestor field list                                                       // 141
    if (!fieldList) {                                                                                                  // 142
      fieldList = ancestorFieldList;                                                                                   // 143
      usedAncestorFieldList = true;                                                                                    // 144
    }                                                                                                                  // 145
  }                                                                                                                    // 146
                                                                                                                       // 147
  if (fieldList) {                                                                                                     // 148
                                                                                                                       // 149
    // Take only those fields in the fieldList that are descendants of the `name` field                                // 150
    if (name) {                                                                                                        // 151
      // Replace generic name with real name. We assume that field names                                               // 152
      // with $ apply to all array items. Field list will now have the                                                 // 153
      // correct array field item number instead of $.                                                                 // 154
      if (genericName !== name) {                                                                                      // 155
        fieldList = _.map(fieldList, function (field) {                                                                // 156
          if (field.indexOf(genericNamePlusDot) === 0) {                                                               // 157
            return namePlusDot + field.slice(genericNamePlusDot.length);                                               // 158
          }                                                                                                            // 159
          return field;                                                                                                // 160
        });                                                                                                            // 161
      }                                                                                                                // 162
                                                                                                                       // 163
      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 164
        return field.indexOf(namePlusDot) === 0;                                                                       // 165
      });                                                                                                              // 166
    }                                                                                                                  // 167
                                                                                                                       // 168
    // If top level fields, be sure to remove any with $ in them                                                       // 169
    else {                                                                                                             // 170
      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 171
        return (field.slice(-2) !== '.$' && field.indexOf('.$.') === -1);                                              // 172
      });                                                                                                              // 173
    }                                                                                                                  // 174
                                                                                                                       // 175
    // First we filter out any fields that are subobjects where the                                                    // 176
    // parent object is also in the fieldList and is NOT the current                                                   // 177
    // field name.                                                                                                     // 178
    // This means that if you do `fields="address,address.city"` we                                                    // 179
    // will use an afObjectField for address and include only the                                                      // 180
    // "city" field within that, but if you instead do `fields="address.city"`                                         // 181
    // we will use a single field for the city, with no afObjectField                                                  // 182
    // template around it.                                                                                             // 183
    fieldList = _.reject(fieldList, function (field) {                                                                 // 184
      var lastDotPos = field.lastIndexOf(".");                                                                         // 185
      if (lastDotPos === -1) {                                                                                         // 186
        return false; //keep                                                                                           // 187
      }                                                                                                                // 188
                                                                                                                       // 189
      var parentField = field.slice(0, lastDotPos);                                                                    // 190
      if (parentField.slice(-2) === ".$") {                                                                            // 191
        parentField = parentField.slice(0, -2);                                                                        // 192
      }                                                                                                                // 193
      return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;                // 194
    });                                                                                                                // 195
  }                                                                                                                    // 196
                                                                                                                       // 197
  if (!fieldList || (fieldList.length === 0 && usedAncestorFieldList)) {                                               // 198
    // Get list of field names that are descendants of this field's name.                                              // 199
    // If name/genericName is undefined, this will return top-level                                                    // 200
    // schema keys.                                                                                                    // 201
    fieldList = ss.objectKeys(genericName);                                                                            // 202
                                                                                                                       // 203
    if (name) {                                                                                                        // 204
      // Tack child field name on to end of parent field name. This                                                    // 205
      // ensures that we keep the desired array index for array items.                                                 // 206
      fieldList = _.map(fieldList, function (field) {                                                                  // 207
        return name + "." + field;                                                                                     // 208
      });                                                                                                              // 209
    }                                                                                                                  // 210
  }                                                                                                                    // 211
                                                                                                                       // 212
  // If user wants to omit some fields, remove those from the array                                                    // 213
  var omitFields = options.omitFields || AutoForm.findAttribute("omitFields");                                         // 214
  if (omitFields) {                                                                                                    // 215
    omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');
    fieldList = _.difference(fieldList, omitFields);                                                                   // 217
    // If omitFields contains generic field names (with $) we omit those too                                           // 218
    fieldList = _.reject(fieldList, function (f) {                                                                     // 219
      return _.contains(omitFields, SimpleSchema._makeGeneric(f));                                                     // 220
    });                                                                                                                // 221
  }                                                                                                                    // 222
                                                                                                                       // 223
  // Filter out fields we never want                                                                                   // 224
  fieldList = _.filter(fieldList, function shouldIncludeField(field) {                                                 // 225
    var fieldDefs = ss.schema(field);                                                                                  // 226
                                                                                                                       // 227
    // Don't include fields with autoform.omit=true                                                                    // 228
    if (fieldDefs.autoform && fieldDefs.autoform.omit === true) {                                                      // 229
      return false;                                                                                                    // 230
    }                                                                                                                  // 231
                                                                                                                       // 232
    // Don't include fields with denyInsert=true when it's an insert form                                              // 233
    if (fieldDefs.denyInsert && form.type === "insert") {                                                              // 234
      return false;                                                                                                    // 235
    }                                                                                                                  // 236
                                                                                                                       // 237
    // Don't include fields with denyUpdate=true when it's an update form                                              // 238
    if (fieldDefs.denyUpdate && form.type === "update") {                                                              // 239
      return false;                                                                                                    // 240
    }                                                                                                                  // 241
                                                                                                                       // 242
    return true;                                                                                                       // 243
  });                                                                                                                  // 244
                                                                                                                       // 245
  // Ensure fields are not added more than once                                                                        // 246
  fieldList = _.unique(fieldList);                                                                                     // 247
                                                                                                                       // 248
  // We return it as an array of objects because that                                                                  // 249
  // works better with Blaze contexts                                                                                  // 250
  fieldList = _.map(fieldList, function (name) {                                                                       // 251
    return {name: name};                                                                                               // 252
  });                                                                                                                  // 253
                                                                                                                       // 254
  return fieldList;                                                                                                    // 255
});                                                                                                                    // 256
                                                                                                                       // 257
                                                                                                                       // 258
/*                                                                                                                     // 259
 * afSelectOptionAtts                                                                                                  // 260
 */                                                                                                                    // 261
Template.registerHelper('afSelectOptionAtts', function afSelectOptionAtts() {                                          // 262
  var atts = _.pick(this, 'value');                                                                                    // 263
  if (this.selected) {                                                                                                 // 264
    atts.selected = "";                                                                                                // 265
  }                                                                                                                    // 266
  if (this.htmlAtts) {                                                                                                 // 267
    _.extend(atts, this.htmlAtts);                                                                                     // 268
  }                                                                                                                    // 269
  return atts;                                                                                                         // 270
});                                                                                                                    // 271
                                                                                                                       // 272
// Expects to be called with this.name available                                                                       // 273
Template.registerHelper('afOptionsFromSchema', function afOptionsFromSchema() {                                        // 274
  return AutoForm._getOptionsForField(this.name);                                                                      // 275
});                                                                                                                    // 276
                                                                                                                       // 277
/*                                                                                                                     // 278
 * afTemplateName                                                                                                      // 279
 * Deprecated. Don't use this. Eventually remove it.                                                                   // 280
 */                                                                                                                    // 281
Template.registerHelper('afTemplateName', function afTemplateNameHelper(templateType, templateName) {                  // 282
  var self = this;                                                                                                     // 283
  console.log('The afTemplateName template helper is deprecated. Use AutoForm.getTemplateName method in your own helper.');
  return AutoForm.getTemplateName(templateType, templateName, self.atts && self.atts.name);                            // 285
});                                                                                                                    // 286
                                                                                                                       // 287
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-validation.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, validateField:true */                                                                              // 1
                                                                                                                       // 2
function _validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid) {                                                // 3
  var docToValidate;                                                                                                   // 4
                                                                                                                       // 5
  // Due to throttling, this can be called after the autoForm template is destroyed.                                   // 6
  // If that happens, we exit without error.                                                                           // 7
  var template = AutoForm.templateInstanceForForm(formId);                                                             // 8
                                                                                                                       // 9
  // If form is not currently rendered, return true                                                                    // 10
  if (!template ||                                                                                                     // 11
      !template.view ||                                                                                                // 12
      !template.view._domrange ||                                                                                      // 13
      template.view.isDestroyed) {                                                                                     // 14
    return true;                                                                                                       // 15
  }                                                                                                                    // 16
                                                                                                                       // 17
  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 18
  var ss = AutoForm.getFormSchema(formId);                                                                             // 19
                                                                                                                       // 20
  if (!ss) {                                                                                                           // 21
    return true;                                                                                                       // 22
  }                                                                                                                    // 23
                                                                                                                       // 24
  // Skip validation if onlyIfAlreadyInvalid is true and the form is                                                   // 25
  // currently valid.                                                                                                  // 26
  if (onlyIfAlreadyInvalid && ss.namedContext(formId).isValid()) {                                                     // 27
    return true; //skip validation                                                                                     // 28
  }                                                                                                                    // 29
                                                                                                                       // 30
  // Create a document based on all the values of all the inputs on the form                                           // 31
  // Get the form type definition                                                                                      // 32
  var ftd = Utility.getFormTypeDef(form.type);                                                                         // 33
                                                                                                                       // 34
  // Clean and validate doc                                                                                            // 35
  docToValidate = AutoForm.getFormValues(formId, template, ss, !!ftd.usesModifier);                                    // 36
                                                                                                                       // 37
  // If form is not currently rendered, return true                                                                    // 38
  if (!docToValidate) {                                                                                                // 39
    return true;                                                                                                       // 40
  }                                                                                                                    // 41
                                                                                                                       // 42
  // Skip validation if skipEmpty is true and the field we're validating                                               // 43
  // has no value.                                                                                                     // 44
  if (skipEmpty && !AutoForm.Utility.objAffectsKey(docToValidate, key)) {                                              // 45
    return true; //skip validation                                                                                     // 46
  }                                                                                                                    // 47
                                                                                                                       // 48
  return AutoForm._validateFormDoc(docToValidate, !!ftd.usesModifier, formId, ss, form, key);                          // 49
}                                                                                                                      // 50
                                                                                                                       // 51
// Throttle field validation to occur at most every 300ms,                                                             // 52
// with leading and trailing calls.                                                                                    // 53
validateField = _.throttle(_validateField, 300);                                                                       // 54
                                                                                                                       // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-inputs.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, getInputValue:true, getAllFieldsInForm:true, getInputData:true, updateTrackedFieldValue:true, updateAllTrackedFieldValues:true, getFlatDocOfFieldValues:true */
                                                                                                                       // 2
getFlatDocOfFieldValues = function getFlatDocOfFieldValues(fields, ss) {                                               // 3
  var doc = {};                                                                                                        // 4
  fields.each(function () {                                                                                            // 5
    var fieldName, val = AutoForm.getInputValue(this, ss);                                                             // 6
    if (val !== void 0) {                                                                                              // 7
      // Get the field/schema key name                                                                                 // 8
      fieldName = $(this).attr("data-schema-key");                                                                     // 9
      doc[fieldName] = val;                                                                                            // 10
    }                                                                                                                  // 11
  });                                                                                                                  // 12
  return doc;                                                                                                          // 13
};                                                                                                                     // 14
                                                                                                                       // 15
/*                                                                                                                     // 16
 * package scope functions                                                                                             // 17
 */                                                                                                                    // 18
                                                                                                                       // 19
/*                                                                                                                     // 20
 * Gets the value that should be shown/selected in the input. Returns                                                  // 21
 * a string, a boolean, or an array of strings. The value used,                                                        // 22
 * in order of preference, is one of:                                                                                  // 23
 * * The `value` attribute provided                                                                                    // 24
 * * The value that is set in the `doc` provided on the containing autoForm                                            // 25
 * * The `defaultValue` from the schema                                                                                // 26
 */                                                                                                                    // 27
getInputValue = function getInputValue(atts, value, mDoc, schemaDefaultValue, fieldDefaultValue, typeDefs) {           // 28
                                                                                                                       // 29
  if (typeof value === "undefined") {                                                                                  // 30
    // Get the value for this key in the current document                                                              // 31
    if (mDoc) {                                                                                                        // 32
      var valueInfo = mDoc.getInfoForKey(atts.name);                                                                   // 33
      if (valueInfo) {                                                                                                 // 34
        value = valueInfo.value;                                                                                       // 35
      } else {                                                                                                         // 36
        value = fieldDefaultValue;                                                                                     // 37
      }                                                                                                                // 38
    }                                                                                                                  // 39
                                                                                                                       // 40
    // Only if there is no current document, use the schema defaultValue                                               // 41
    else {                                                                                                             // 42
      // Use the field default value if provided                                                                       // 43
      if (typeof fieldDefaultValue !== 'undefined') {                                                                  // 44
        value = fieldDefaultValue;                                                                                     // 45
      }                                                                                                                // 46
      // Or use the defaultValue in the schema                                                                         // 47
      else {                                                                                                           // 48
        value = schemaDefaultValue;                                                                                    // 49
      }                                                                                                                // 50
    }                                                                                                                  // 51
  }                                                                                                                    // 52
                                                                                                                       // 53
  // Change null or undefined to an empty string                                                                       // 54
  value = (value === null || value === void 0) ? '' : value;                                                           // 55
                                                                                                                       // 56
  // If the component expects the value to be an array, and it's not, make it one                                      // 57
  if (typeDefs.valueIsArray && !_.isArray(value)) {                                                                    // 58
    if (typeof value === "string") {                                                                                   // 59
      value = value.split(',');                                                                                        // 60
    } else {                                                                                                           // 61
      value = [value];                                                                                                 // 62
    }                                                                                                                  // 63
  }                                                                                                                    // 64
                                                                                                                       // 65
  // At this point we have a value or an array of values.                                                              // 66
  // Run through the components valueIn function if we have one.                                                       // 67
  // It should then be in whatever format the component expects.                                                       // 68
  if (typeof typeDefs.valueIn === "function") {                                                                        // 69
    value = typeDefs.valueIn(value, atts);                                                                             // 70
  }                                                                                                                    // 71
                                                                                                                       // 72
  return value;                                                                                                        // 73
};                                                                                                                     // 74
                                                                                                                       // 75
/*                                                                                                                     // 76
 * Builds the data context that the input component will have.                                                         // 77
 */                                                                                                                    // 78
getInputData = function getInputData(defs, hash, value, label, formType) {                                             // 79
                                                                                                                       // 80
  /*                                                                                                                   // 81
   * Get HTML attributes                                                                                               // 82
   */                                                                                                                  // 83
                                                                                                                       // 84
  // We don't want to alter the original hash, so we clone it and                                                      // 85
  // remove some stuff that should not be HTML attributes.                                                             // 86
  var inputAtts = _.omit(hash,                                                                                         // 87
          "type",                                                                                                      // 88
          "value",                                                                                                     // 89
          "noselect",                                                                                                  // 90
          "options",                                                                                                   // 91
          "template",                                                                                                  // 92
          "defaultValue");                                                                                             // 93
                                                                                                                       // 94
  // Add required if required                                                                                          // 95
  if (typeof inputAtts.required === "undefined" && !defs.optional) {                                                   // 96
    inputAtts.required = "";                                                                                           // 97
  }                                                                                                                    // 98
                                                                                                                       // 99
   // Add data-schema-key to every type of element                                                                     // 100
  inputAtts['data-schema-key'] = inputAtts.name;                                                                       // 101
                                                                                                                       // 102
  // Set placeholder to label from schema if requested.                                                                // 103
  // We check hash.placeholder instead of inputAtts.placeholder because                                                // 104
  // we're setting inputAtts.placeholder, so it wouldn't be the same on                                                // 105
  // subsequent reactive runs of this function.                                                                        // 106
  if (hash.placeholder === "schemaLabel") {                                                                            // 107
    inputAtts.placeholder = label;                                                                                     // 108
  }                                                                                                                    // 109
                                                                                                                       // 110
  // To enable reactively toggling boolean attributes                                                                  // 111
  // in a simple way, we add the attributes to the HTML                                                                // 112
  // only if their value is `true`. That is, unlike in                                                                 // 113
  // HTML, their mere presence does not matter.                                                                        // 114
  _.each(["disabled", "readonly", "checked", "required", "autofocus"], function (booleanProp) {                        // 115
    if (!_.has(hash, booleanProp)) {                                                                                   // 116
      return;                                                                                                          // 117
    }                                                                                                                  // 118
                                                                                                                       // 119
    // For historical reasons, we treat the string "true" and an empty string as `true`, too.                          // 120
    // But an empty string value results in the cleanest rendered output for boolean props,                            // 121
    // so we standardize as that.                                                                                      // 122
    if (hash[booleanProp] === true || hash[booleanProp] === "true" || hash[booleanProp] === "") {                      // 123
      inputAtts[booleanProp] = "";                                                                                     // 124
    } else {                                                                                                           // 125
      // If the value is anything else, we don't render it                                                             // 126
      delete inputAtts[booleanProp];                                                                                   // 127
    }                                                                                                                  // 128
  });                                                                                                                  // 129
                                                                                                                       // 130
  /*                                                                                                                   // 131
   * Set up the context. This is the object that becomes `this` in the                                                 // 132
   * input type template.                                                                                              // 133
   */                                                                                                                  // 134
                                                                                                                       // 135
  var inputTypeContext = {                                                                                             // 136
    name: inputAtts.name,                                                                                              // 137
    schemaType: defs.type,                                                                                             // 138
    min: (typeof defs.min === "function") ? defs.min() : defs.min,                                                     // 139
    max: (typeof defs.max === "function") ? defs.max() : defs.max,                                                     // 140
    decimal: defs.decimal,                                                                                             // 141
    value: value,                                                                                                      // 142
    atts: inputAtts,                                                                                                   // 143
    selectOptions: AutoForm.Utility.getSelectOptions(defs, hash)                                                       // 144
  };                                                                                                                   // 145
                                                                                                                       // 146
  // Before returning the context, we allow the registered form type to                                                // 147
  // adjust it if necessary.                                                                                           // 148
  var ftd = Utility.getFormTypeDef(formType);                                                                          // 149
  if (typeof ftd.adjustInputContext === 'function') {                                                                  // 150
    inputTypeContext = ftd.adjustInputContext(inputTypeContext);                                                       // 151
  }                                                                                                                    // 152
                                                                                                                       // 153
  return inputTypeContext;                                                                                             // 154
};                                                                                                                     // 155
                                                                                                                       // 156
function markChanged(template, fieldName) {                                                                            // 157
  // We always want to be sure to wait for DOM updates to                                                              // 158
  // finish before we indicate that values have changed.                                                               // 159
  // Using a value of 0 here did not work, but 100 seems to                                                            // 160
  // work in testing. We'll need to keep an eye on this.                                                               // 161
  // Not an ideal solution.                                                                                            // 162
  setTimeout(function () {                                                                                             // 163
    // Template or view may have disappeared while                                                                     // 164
    // we waited to run this                                                                                           // 165
    if (template &&                                                                                                    // 166
        template.view &&                                                                                               // 167
        template.view._domrange &&                                                                                     // 168
        !template.view.isDestroyed) {                                                                                  // 169
                                                                                                                       // 170
      template.formValues[fieldName].changed();                                                                        // 171
      template.formValues[fieldName].requestInProgress = false;                                                        // 172
                                                                                                                       // 173
    }                                                                                                                  // 174
  }, 100);                                                                                                             // 175
}                                                                                                                      // 176
                                                                                                                       // 177
updateTrackedFieldValue = function updateTrackedFieldValue(template, fieldName) {                                      // 178
  if (!template) {                                                                                                     // 179
    return;                                                                                                            // 180
  }                                                                                                                    // 181
                                                                                                                       // 182
  template.formValues = template.formValues || {};                                                                     // 183
  if (!template.formValues[fieldName]) {                                                                               // 184
    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 185
  }                                                                                                                    // 186
  // In case we call updateTrackedFieldValue from multiple places at once,                                             // 187
  // call .changed() only once                                                                                         // 188
  if (template.formValues[fieldName].requestInProgress) {                                                              // 189
    return;                                                                                                            // 190
  }                                                                                                                    // 191
  template.formValues[fieldName].requestInProgress = true;                                                             // 192
                                                                                                                       // 193
  markChanged(template, fieldName);                                                                                    // 194
                                                                                                                       // 195
  // To properly handle array fields, we'll mark the ancestors as changed, too                                         // 196
  // XXX Might be a more elegant way to handle this                                                                    // 197
  var dotPos = fieldName.lastIndexOf('.');                                                                             // 198
  while (dotPos !== -1) {                                                                                              // 199
    fieldName = fieldName.slice(0, dotPos);                                                                            // 200
                                                                                                                       // 201
    if (!template.formValues[fieldName]) {                                                                             // 202
      template.formValues[fieldName] = new Tracker.Dependency();                                                       // 203
    }                                                                                                                  // 204
                                                                                                                       // 205
    markChanged(template, fieldName);                                                                                  // 206
                                                                                                                       // 207
    dotPos = fieldName.lastIndexOf('.');                                                                               // 208
  }                                                                                                                    // 209
};                                                                                                                     // 210
                                                                                                                       // 211
updateAllTrackedFieldValues = function updateAllTrackedFieldValues(template) {                                         // 212
  if (template && template.formValues) {                                                                               // 213
    _.each(template.formValues, function (o, fieldName) {                                                              // 214
      updateTrackedFieldValue(template, fieldName);                                                                    // 215
    });                                                                                                                // 216
  }                                                                                                                    // 217
};                                                                                                                     // 218
                                                                                                                       // 219
getAllFieldsInForm = function getAllFieldsInForm(template) {                                                           // 220
  // Get all elements with `data-schema-key` attribute, unless disabled                                                // 221
  return template.$("[data-schema-key]").not("[disabled]");                                                            // 222
  // Exclude fields in sub-forms, since they will belong to a different AutoForm and schema.                           // 223
  // TODO need some selector/filter that actually works correctly for excluding subforms                               // 224
  // return template.$('[data-schema-key]').not("[disabled]").not(template.$('form form [data-schema-key]'));          // 225
};                                                                                                                     // 226
                                                                                                                       // 227
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-api.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm:true, SimpleSchema, Utility, Hooks, deps, globalDefaultTemplate:true, defaultTypeTemplates:true, validateField, arrayTracker, ReactiveVar, getAllFieldsInForm, setDefaults:true, getFlatDocOfFieldValues, MongoObject */
                                                                                                                       // 2
// This file defines the public, exported API                                                                          // 3
                                                                                                                       // 4
AutoForm = AutoForm || {}; //exported                                                                                  // 5
                                                                                                                       // 6
/**                                                                                                                    // 7
 * @property AutoForm.Utility                                                                                          // 8
 * @public                                                                                                             // 9
 */                                                                                                                    // 10
AutoForm.Utility = Utility;                                                                                            // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * @method AutoForm.addHooks                                                                                           // 14
 * @public                                                                                                             // 15
 * @param {String[]|String|null} formIds Form `id` or array of form IDs to which these hooks apply. Specify `null` to add hooks that will run for every form.
 * @param {Object} hooks Hooks to add, where supported names are "before", "after", "formToDoc", "docToForm", "onSubmit", "onSuccess", and "onError".
 * @returns {undefined}                                                                                                // 18
 *                                                                                                                     // 19
 * Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same            // 20
 * form.                                                                                                               // 21
 */                                                                                                                    // 22
AutoForm.addHooks = function autoFormAddHooks(formIds, hooks, replace) {                                               // 23
  if (typeof formIds === "string") {                                                                                   // 24
    formIds = [formIds];                                                                                               // 25
  }                                                                                                                    // 26
                                                                                                                       // 27
  // If formIds is null, add global hooks                                                                              // 28
  if (!formIds) {                                                                                                      // 29
    Hooks.addHooksToList(Hooks.global, hooks, replace);                                                                // 30
  } else {                                                                                                             // 31
    _.each(formIds, function (formId) {                                                                                // 32
                                                                                                                       // 33
      // Init the hooks object if not done yet                                                                         // 34
      Hooks.form[formId] = Hooks.form[formId] || {                                                                     // 35
        before: {},                                                                                                    // 36
        after: {},                                                                                                     // 37
        formToDoc: [],                                                                                                 // 38
        docToForm: [],                                                                                                 // 39
        onSubmit: [],                                                                                                  // 40
        onSuccess: [],                                                                                                 // 41
        onError: [],                                                                                                   // 42
        beginSubmit: [],                                                                                               // 43
        endSubmit: []                                                                                                  // 44
      };                                                                                                               // 45
                                                                                                                       // 46
      Hooks.addHooksToList(Hooks.form[formId], hooks, replace);                                                        // 47
    });                                                                                                                // 48
  }                                                                                                                    // 49
};                                                                                                                     // 50
                                                                                                                       // 51
/**                                                                                                                    // 52
 * @method AutoForm.hooks                                                                                              // 53
 * @public                                                                                                             // 54
 * @param {Object} hooks                                                                                               // 55
 * @returns {undefined}                                                                                                // 56
 *                                                                                                                     // 57
 * Defines hooks by form id. Extends hooks lists if called multiple times for the same                                 // 58
 * form.                                                                                                               // 59
 */                                                                                                                    // 60
AutoForm.hooks = function autoFormHooks(hooks, replace) {                                                              // 61
  _.each(hooks, function(hooksObj, formId) {                                                                           // 62
    AutoForm.addHooks(formId, hooksObj, replace);                                                                      // 63
  });                                                                                                                  // 64
};                                                                                                                     // 65
                                                                                                                       // 66
/**                                                                                                                    // 67
 * @property AutoForm._hooks                                                                                           // 68
 * @public                                                                                                             // 69
 *                                                                                                                     // 70
 * Hooks list to aid automated testing                                                                                 // 71
 */                                                                                                                    // 72
AutoForm._hooks = Hooks.form;                                                                                          // 73
                                                                                                                       // 74
/**                                                                                                                    // 75
 * @property AutoForm._globalHooks                                                                                     // 76
 * @public                                                                                                             // 77
 *                                                                                                                     // 78
 * Global hooks list to aid automated testing                                                                          // 79
 */                                                                                                                    // 80
AutoForm._globalHooks = Hooks.global;                                                                                  // 81
                                                                                                                       // 82
/**                                                                                                                    // 83
 * @method AutoForm._forceResetFormValues                                                                              // 84
 * @public                                                                                                             // 85
 * @param {String} formId                                                                                              // 86
 * @returns {undefined}                                                                                                // 87
 *                                                                                                                     // 88
 * Forces an AutoForm's values to properly update.                                                                     // 89
 * See https://github.com/meteor/meteor/issues/2431                                                                    // 90
 */                                                                                                                    // 91
AutoForm._forceResetFormValues = function autoFormForceResetFormValues(formId) {                                       // 92
  AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                             // 93
                                                                                                                       // 94
  AutoForm._destroyForm[formId].set(true);                                                                             // 95
  setTimeout(function () {                                                                                             // 96
    AutoForm._destroyForm[formId].set(false);                                                                          // 97
  }, 0);                                                                                                               // 98
};                                                                                                                     // 99
                                                                                                                       // 100
/**                                                                                                                    // 101
 * @method AutoForm.resetForm                                                                                          // 102
 * @public                                                                                                             // 103
 * @param {String} formId                                                                                              // 104
 * @param {TemplateInstance} [template] Looked up if not provided. Pass in for efficiency.                             // 105
 * @returns {undefined}                                                                                                // 106
 *                                                                                                                     // 107
 * Resets an autoform, including resetting validation errors. The same as clicking the reset button for an autoform.   // 108
 */                                                                                                                    // 109
AutoForm.resetForm = function autoFormResetForm(formId, template) {                                                    // 110
  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 111
                                                                                                                       // 112
  if (template && template.view._domrange && !template.view.isDestroyed) {                                             // 113
    template.$("form")[0].reset();                                                                                     // 114
  }                                                                                                                    // 115
};                                                                                                                     // 116
                                                                                                                       // 117
/**                                                                                                                    // 118
 * @method AutoForm.setDefaultTemplate                                                                                 // 119
 * @public                                                                                                             // 120
 * @param {String} template                                                                                            // 121
 */                                                                                                                    // 122
AutoForm.setDefaultTemplate = function autoFormSetDefaultTemplate(template) {                                          // 123
  globalDefaultTemplate = template;                                                                                    // 124
  deps.defaultTemplate.changed();                                                                                      // 125
};                                                                                                                     // 126
                                                                                                                       // 127
/**                                                                                                                    // 128
 * @method AutoForm.getDefaultTemplate                                                                                 // 129
 * @public                                                                                                             // 130
 *                                                                                                                     // 131
 * Reactive.                                                                                                           // 132
 */                                                                                                                    // 133
AutoForm.getDefaultTemplate = function autoFormGetDefaultTemplate() {                                                  // 134
  deps.defaultTemplate.depend();                                                                                       // 135
  return globalDefaultTemplate;                                                                                        // 136
};                                                                                                                     // 137
                                                                                                                       // 138
/**                                                                                                                    // 139
 * @method AutoForm.setDefaultTemplateForType                                                                          // 140
 * @public                                                                                                             // 141
 * @param {String} type                                                                                                // 142
 * @param {String} template                                                                                            // 143
 */                                                                                                                    // 144
AutoForm.setDefaultTemplateForType = function autoFormSetDefaultTemplateForType(type, template) {                      // 145
  if (!deps.defaultTypeTemplates[type]) {                                                                              // 146
    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 147
  }                                                                                                                    // 148
  if (template !== null && !Template[type + "_" + template]) {                                                         // 149
    throw new Error("setDefaultTemplateForType can't set default template to \"" + template + "\" for type \"" + type + "\" because there is no defined template with the name \"" + type + "_" + template + "\"");
  }                                                                                                                    // 151
  defaultTypeTemplates[type] = template;                                                                               // 152
  deps.defaultTypeTemplates[type].changed();                                                                           // 153
};                                                                                                                     // 154
                                                                                                                       // 155
/**                                                                                                                    // 156
 * @method AutoForm.getDefaultTemplateForType                                                                          // 157
 * @public                                                                                                             // 158
 * @param {String} type                                                                                                // 159
 * @return {String} Template name                                                                                      // 160
 *                                                                                                                     // 161
 * Reactive.                                                                                                           // 162
 */                                                                                                                    // 163
AutoForm.getDefaultTemplateForType = function autoFormGetDefaultTemplateForType(type) {                                // 164
  if (!deps.defaultTypeTemplates[type]) {                                                                              // 165
    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 166
  }                                                                                                                    // 167
  deps.defaultTypeTemplates[type].depend();                                                                            // 168
  return defaultTypeTemplates[type];                                                                                   // 169
};                                                                                                                     // 170
                                                                                                                       // 171
/**                                                                                                                    // 172
 * @method AutoForm.getTemplateName                                                                                    // 173
 * @public                                                                                                             // 174
 * @param {String} templateType                                                                                        // 175
 * @param {String} templateName                                                                                        // 176
 * @param {String} [fieldName]                                                                                         // 177
 * @param {Boolean} [skipExistsCheck] Pass `true` to return a template name even if that template hasn't been defined. // 178
 * @return {String} Template name                                                                                      // 179
 *                                                                                                                     // 180
 * Returns the full template name. In the simplest scenario, this is templateType_templateName                         // 181
 * as passed in. However, if templateName is not provided, it is looked up in the following                            // 182
 * manner:                                                                                                             // 183
 *                                                                                                                     // 184
 * 1. autoform.<componentType>.template from the schema (field+type override for all forms)                            // 185
 * 2. autoform.template from the schema (field override for all forms)                                                 // 186
 * 3. template-<componentType> attribute on an ancestor component within the same form (form+type for all fields)      // 187
 * 4. template attribute on an ancestor component within the same form (form specificity for all types and fields)     // 188
 * 5. Default template for component type, as set by AutoForm.setDefaultTemplateForType                                // 189
 * 6. Default template, as set by AutoForm.setDefaultTemplate.                                                         // 190
 * 7. Built-in default template, currently bootstrap-3.                                                                // 191
 */                                                                                                                    // 192
AutoForm.getTemplateName = function autoFormGetTemplateName(templateType, templateName, fieldName, skipExistsCheck) {  // 193
  var schemaAutoFormDefs, templateFromAncestor, defaultTemplate;                                                       // 194
                                                                                                                       // 195
  function templateExists(t) {                                                                                         // 196
    return !!(skipExistsCheck || Template[t]);                                                                         // 197
  }                                                                                                                    // 198
                                                                                                                       // 199
  // Default case: use the `template` attribute provided                                                               // 200
  if (templateName && templateExists(templateType + '_' + templateName)) {                                             // 201
    return templateType + '_' + templateName;                                                                          // 202
  }                                                                                                                    // 203
                                                                                                                       // 204
  // If the attributes provided a templateName but that template didn't exist, show a warning                          // 205
  if (templateName && AutoForm._debug) {                                                                               // 206
    console.warn(templateType + ': "' + templateName + '" is not a valid template name. Falling back to a different template.');
  }                                                                                                                    // 208
                                                                                                                       // 209
  // Get `autoform` object from the schema, if present.                                                                // 210
  // Skip for quickForm because it renders a form and not a field.                                                     // 211
  if (templateType !== 'quickForm' && fieldName) {                                                                     // 212
    schemaAutoFormDefs = AutoForm.getSchemaForField(fieldName).autoform;                                               // 213
  }                                                                                                                    // 214
                                                                                                                       // 215
  // Fallback #1: autoform.<componentType>.template from the schema                                                    // 216
  if (schemaAutoFormDefs && schemaAutoFormDefs[templateType] && schemaAutoFormDefs[templateType].template && templateExists(templateType + '_' + schemaAutoFormDefs[templateType].template)) {
    return templateType + '_' + schemaAutoFormDefs[templateType].template;                                             // 218
  }                                                                                                                    // 219
                                                                                                                       // 220
  // Fallback #2: autoform.template from the schema                                                                    // 221
  if (schemaAutoFormDefs && schemaAutoFormDefs.template && templateExists(templateType + '_' + schemaAutoFormDefs.template)) {
    return templateType + '_' + schemaAutoFormDefs.template;                                                           // 223
  }                                                                                                                    // 224
                                                                                                                       // 225
  // Fallback #3: template-<componentType> attribute on an ancestor component within the same form                     // 226
  templateFromAncestor = AutoForm.findAttribute("template-" + templateType);                                           // 227
  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 228
    return templateType + '_' + templateFromAncestor;                                                                  // 229
  }                                                                                                                    // 230
                                                                                                                       // 231
  // Fallback #4: template attribute on an ancestor component within the same form                                     // 232
  templateFromAncestor = AutoForm.findAttribute("template");                                                           // 233
  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 234
    return templateType + '_' + templateFromAncestor;                                                                  // 235
  }                                                                                                                    // 236
                                                                                                                       // 237
  // Fallback #5: Default template for component type, as set by AutoForm.setDefaultTemplateForType                    // 238
  defaultTemplate = AutoForm.getDefaultTemplateForType(templateType);                                                  // 239
  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 240
    return templateType + '_' + defaultTemplate;                                                                       // 241
  }                                                                                                                    // 242
                                                                                                                       // 243
  // Fallback #6: Default template, as set by AutoForm.setDefaultTemplate                                              // 244
  defaultTemplate = AutoForm.getDefaultTemplate();                                                                     // 245
  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 246
    return templateType + '_' + defaultTemplate;                                                                       // 247
  }                                                                                                                    // 248
                                                                                                                       // 249
  // Found nothing. Return undefined                                                                                   // 250
  return;                                                                                                              // 251
};                                                                                                                     // 252
                                                                                                                       // 253
/**                                                                                                                    // 254
 * @method AutoForm.getFormValues                                                                                      // 255
 * @public                                                                                                             // 256
 * @param {String} formId The `id` attribute of the `autoForm` you want current values for.                            // 257
 * @param {Template} [template] The template instance, if already known, as a performance optimization.                // 258
 * @param {SimpleSchema} [ss] The SimpleSchema instance, if already known, as a performance optimization.              // 259
 * @param {Boolean} [getModifier] Set to `true` to return a modifier object or `false` to return a normal object. For backwards compatibility, and object containing both is returned if this is undefined.
 * @return {Object|null}                                                                                               // 261
 *                                                                                                                     // 262
 * Returns an object representing the current values of all schema-based fields in the form.                           // 263
 * The returned object is either a normal object or a MongoDB modifier, based on the `getModifier` argument. Return value may be `null` if the form is not currently rendered on screen.
 */                                                                                                                    // 265
AutoForm.getFormValues = function autoFormGetFormValues(formId, template, ss, getModifier) {                           // 266
  var insertDoc, updateDoc, transforms;                                                                                // 267
                                                                                                                       // 268
  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 269
  if (!template ||                                                                                                     // 270
      !template.view ||                                                                                                // 271
      !template.view._domrange ||                                                                                      // 272
      template.view.isDestroyed) {                                                                                     // 273
    return null;                                                                                                       // 274
  }                                                                                                                    // 275
                                                                                                                       // 276
  // Get a reference to the SimpleSchema instance that should be used for                                              // 277
  // determining what types we want back for each field.                                                               // 278
  ss = ss || AutoForm.getFormSchema(formId);                                                                           // 279
                                                                                                                       // 280
  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 281
                                                                                                                       // 282
  // By default, we do not keep empty strings                                                                          // 283
  var keepEmptyStrings = false;                                                                                        // 284
  if (form.removeEmptyStrings === false) {                                                                             // 285
    keepEmptyStrings = true;                                                                                           // 286
  }                                                                                                                    // 287
  // By default, we do filter                                                                                          // 288
  var filter = true;                                                                                                   // 289
  if (form.filter === false) {                                                                                         // 290
    filter = false;                                                                                                    // 291
  }                                                                                                                    // 292
  // By default, we do autoConvert                                                                                     // 293
  var autoConvert = true;                                                                                              // 294
  if (form.autoConvert === false) {                                                                                    // 295
    autoConvert = false;                                                                                               // 296
  }                                                                                                                    // 297
  // By default, we do trimStrings                                                                                     // 298
  var trimStrings = true;                                                                                              // 299
  if (form.trimStrings === false) {                                                                                    // 300
    trimStrings = false;                                                                                               // 301
  }                                                                                                                    // 302
  // By default, we do keepArrays                                                                                      // 303
  // We need keepArrays: false when we need update fields                                                              // 304
  // like "foo.2.bar" to update the proper index. But in                                                               // 305
  // most cases, we need to keep arrays together due to the mongo                                                      // 306
  // bug that creates objects rather than arrays if the array                                                          // 307
  // does not already exist in the db.                                                                                 // 308
  var keepArrays = true;                                                                                               // 309
  if (form.setArrayItems === true) {                                                                                   // 310
    keepArrays = false;                                                                                                // 311
  }                                                                                                                    // 312
                                                                                                                       // 313
  var hookCtx = {                                                                                                      // 314
    template: template,                                                                                                // 315
    formId: formId,                                                                                                    // 316
    schema: ss                                                                                                         // 317
  };                                                                                                                   // 318
                                                                                                                       // 319
  // Build a flat document from field values                                                                           // 320
  var doc = getFlatDocOfFieldValues(getAllFieldsInForm(template), ss);                                                 // 321
                                                                                                                       // 322
  // Expand the flat document                                                                                          // 323
  doc = AutoForm.Utility.expandObj(doc);                                                                               // 324
                                                                                                                       // 325
  // When all fields that comprise a sub-object are empty, we should unset                                             // 326
  // the whole subobject and not complain about required fields in it. For example,                                    // 327
  // if `profile.address` has several properties but they are all null or undefined,                                   // 328
  // we will set `profile.address=null`. This ensures that we don't get incorrect validation                           // 329
  // errors about required fields that are children of optional objects.                                               // 330
  AutoForm.Utility.bubbleEmpty(doc, keepEmptyStrings);                                                                 // 331
                                                                                                                       // 332
  // Create and clean insert doc.                                                                                      // 333
  if (getModifier !== true) {                                                                                          // 334
    // Delete any properties that are null, undefined, or empty strings,                                               // 335
    // unless the form has requested to keep empty string.                                                             // 336
    // Do not add autoValues at this stage.                                                                            // 337
    insertDoc = AutoForm.Utility.cleanNulls(doc, false, keepEmptyStrings);                                             // 338
                                                                                                                       // 339
    // As array items are removed, gaps can appear in the numbering,                                                   // 340
    // which results in arrays that have undefined items. Here we                                                      // 341
    // remove any array items that are undefined.                                                                      // 342
    //                                                                                                                 // 343
    // We do this to the insertDoc, but we don't want to do it earlier to the                                          // 344
    // doc, because that would cause the update modifier to have $sets for                                             // 345
    // the wrong array indexes.                                                                                        // 346
    AutoForm.Utility.compactArrays(insertDoc);                                                                         // 347
                                                                                                                       // 348
    ss.clean(insertDoc, {                                                                                              // 349
      isModifier: false,                                                                                               // 350
      getAutoValues: false,                                                                                            // 351
      filter: filter,                                                                                                  // 352
      autoConvert: autoConvert,                                                                                        // 353
      trimStrings: trimStrings                                                                                         // 354
    });                                                                                                                // 355
                                                                                                                       // 356
    // Pass expanded doc through formToDoc hooks                                                                       // 357
    transforms = Hooks.getHooks(formId, 'formToDoc');                                                                  // 358
    _.each(transforms, function formValuesTransform(transform) {                                                       // 359
      insertDoc = transform.call(hookCtx, insertDoc, ss);                                                              // 360
    });                                                                                                                // 361
  }                                                                                                                    // 362
                                                                                                                       // 363
  // Create and clean update modifier.                                                                                 // 364
  if (getModifier !== false) {                                                                                         // 365
    // Converts to modifier object with $set and $unset.                                                               // 366
    // Do not add autoValues at this stage.                                                                            // 367
    updateDoc = AutoForm.Utility.docToModifier(doc, {                                                                  // 368
      keepEmptyStrings: keepEmptyStrings,                                                                              // 369
      keepArrays: keepArrays                                                                                           // 370
    });                                                                                                                // 371
                                                                                                                       // 372
    ss.clean(updateDoc, {                                                                                              // 373
      isModifier: true,                                                                                                // 374
      getAutoValues: false,                                                                                            // 375
      filter: filter,                                                                                                  // 376
      autoConvert: autoConvert,                                                                                        // 377
      trimStrings: trimStrings                                                                                         // 378
    });                                                                                                                // 379
                                                                                                                       // 380
    // Pass modifier through formToModifier hooks                                                                      // 381
    transforms = Hooks.getHooks(formId, 'formToModifier');                                                             // 382
    _.each(transforms, function formValuesTransform(transform) {                                                       // 383
      updateDoc = transform.call(hookCtx, updateDoc);                                                                  // 384
    });                                                                                                                // 385
  }                                                                                                                    // 386
                                                                                                                       // 387
  if (getModifier === true) {                                                                                          // 388
    return updateDoc;                                                                                                  // 389
  } else if (getModifier === false) {                                                                                  // 390
    return insertDoc;                                                                                                  // 391
  } else {                                                                                                             // 392
    // We return insertDoc and updateDoc when getModifier                                                              // 393
    // is undefined for backwards compatibility                                                                        // 394
    return {                                                                                                           // 395
      insertDoc: insertDoc,                                                                                            // 396
      updateDoc: updateDoc                                                                                             // 397
    };                                                                                                                 // 398
  }                                                                                                                    // 399
};                                                                                                                     // 400
                                                                                                                       // 401
/**                                                                                                                    // 402
 * @method AutoForm.getFieldValue                                                                                      // 403
 * @public                                                                                                             // 404
 * @param {String} fieldName The name of the field for which you want the current value.                               // 405
 * @param {String} [formId] The `id` attribute of the `autoForm` you want current values for. Default is the closest form from the current context.
 * @return {Any|undefined}                                                                                             // 407
 *                                                                                                                     // 408
 * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 409
 * This is a reactive method that will rerun whenever the current value of the requested field changes. Return value will be undefined if the field is not currently rendered.
 */                                                                                                                    // 411
AutoForm.getFieldValue = function autoFormGetFieldValue(fieldName, formId) {                                           // 412
  // find AutoForm template                                                                                            // 413
  var template = Tracker.nonreactive(function () {                                                                     // 414
    return AutoForm.templateInstanceForForm(formId);                                                                   // 415
  });                                                                                                                  // 416
  if (!template ||                                                                                                     // 417
      !template.fieldValuesReady.get() ||                                                                              // 418
      !template.view ||                                                                                                // 419
      !template.view._domrange ||                                                                                      // 420
      template.view.isDestroyed) {                                                                                     // 421
    return;                                                                                                            // 422
  }                                                                                                                    // 423
                                                                                                                       // 424
  // reactive dependency                                                                                               // 425
  template.formValues = template.formValues || {};                                                                     // 426
  if (!template.formValues[fieldName]) {                                                                               // 427
    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 428
  }                                                                                                                    // 429
  template.formValues[fieldName].depend();                                                                             // 430
                                                                                                                       // 431
  var doc = AutoForm.getFormValues(formId, template, null, false);                                                     // 432
  if (!doc) {                                                                                                          // 433
    return;                                                                                                            // 434
  }                                                                                                                    // 435
                                                                                                                       // 436
  var mDoc = new MongoObject(doc);                                                                                     // 437
  var value = mDoc.getValueForKey(fieldName);                                                                          // 438
                                                                                                                       // 439
  return value;                                                                                                        // 440
};                                                                                                                     // 441
                                                                                                                       // 442
/**                                                                                                                    // 443
 * @method AutoForm.getInputTypeTemplateNameForElement                                                                 // 444
 * @public                                                                                                             // 445
 * @param {DOMElement} element The input DOM element, generated by an autoform input control                           // 446
 * @return {String}                                                                                                    // 447
 *                                                                                                                     // 448
 * Returns the name of the template used to render the element.                                                        // 449
 */                                                                                                                    // 450
AutoForm.getInputTypeTemplateNameForElement = function autoFormGetInputTypeTemplateNameForElement(element) {           // 451
  // get the enclosing view                                                                                            // 452
  var view = Blaze.getView(element);                                                                                   // 453
  // if the enclosing view is not a template, perhaps because                                                          // 454
  // the template contains a block helper like if, with, each,                                                         // 455
  // then look up the view chain until we arrive at a template                                                         // 456
  while (view && view.name.slice(0, 9) !== "Template.") {                                                              // 457
    view = view.originalParentView || view.parentView;                                                                 // 458
  }                                                                                                                    // 459
                                                                                                                       // 460
  if (!view) return;                                                                                                   // 461
                                                                                                                       // 462
  // View names have "Template." at the beginning so we slice that off.                                                // 463
  return view.name.slice(9);                                                                                           // 464
};                                                                                                                     // 465
                                                                                                                       // 466
/**                                                                                                                    // 467
 * @method AutoForm.getInputValue                                                                                      // 468
 * @public                                                                                                             // 469
 * @param {DOMElement} element The input DOM element, generated by an autoform input control, which must have a `data-schema-key` attribute set to the correct schema key name.
 * @param {SimpleSchema} [ss] Provide the SimpleSchema instance if you already have it.                                // 471
 * @return {Any}                                                                                                       // 472
 *                                                                                                                     // 473
 * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 474
 * Unlike `AutoForm.getFieldValue`, this function is not reactive.                                                     // 475
 */                                                                                                                    // 476
AutoForm.getInputValue = function autoFormGetInputValue(element, ss) {                                                 // 477
  var field, fieldName, fieldType, arrayItemFieldType, val, typeDef, inputTypeTemplate, dataContext, autoConvert;      // 478
                                                                                                                       // 479
  Tracker.nonreactive(function() {                                                                                     // 480
    //don't rerun when data context of element changes, can cause infinite loops                                       // 481
                                                                                                                       // 482
    dataContext = Blaze.getData(element);                                                                              // 483
    if (dataContext && dataContext.atts) {                                                                             // 484
      autoConvert = dataContext.atts.autoConvert;                                                                      // 485
    }                                                                                                                  // 486
  });                                                                                                                  // 487
                                                                                                                       // 488
  // Get jQuery field reference                                                                                        // 489
  field = $(element);                                                                                                  // 490
                                                                                                                       // 491
  // Get the field/schema key name                                                                                     // 492
  fieldName = field.attr("data-schema-key");                                                                           // 493
                                                                                                                       // 494
  // If we have a schema, we can autoconvert to the correct data type                                                  // 495
  if (ss) {                                                                                                            // 496
    fieldType = ss.schema(fieldName).type;                                                                             // 497
  }                                                                                                                    // 498
                                                                                                                       // 499
  // Get the name of the input type template used to render the input element                                          // 500
  inputTypeTemplate = AutoForm.getInputTypeTemplateNameForElement(element);                                            // 501
                                                                                                                       // 502
  // Slice off the potential theme template, after the last underscore.                                                // 503
  var lastUnderscore = inputTypeTemplate.lastIndexOf('_');                                                             // 504
  if (lastUnderscore !== -1) {                                                                                         // 505
    inputTypeTemplate = inputTypeTemplate.slice(0, lastUnderscore);                                                    // 506
  }                                                                                                                    // 507
                                                                                                                       // 508
  // Figure out what registered input type was used to render this element                                             // 509
  typeDef = _.where(AutoForm._inputTypeDefinitions, {template: inputTypeTemplate})[0];                                 // 510
                                                                                                                       // 511
  // If field has a "data-null-value" attribute, value should always be null                                           // 512
  if (field.attr("data-null-value") !== void 0) {                                                                      // 513
    val = null;                                                                                                        // 514
  }                                                                                                                    // 515
  // Otherwise get the field's value using the input type's `valueOut` function if provided                            // 516
  else if (typeDef && typeDef.valueOut) {                                                                              // 517
    val = typeDef.valueOut.call(field);                                                                                // 518
  }                                                                                                                    // 519
  // Otherwise get the field's value in a default way                                                                  // 520
  else {                                                                                                               // 521
    val = field.val();                                                                                                 // 522
  }                                                                                                                    // 523
                                                                                                                       // 524
  // run through input's type converter if provided                                                                    // 525
  if (val !== void 0 && autoConvert !== false && typeDef && typeDef.valueConverters && fieldType) {                    // 526
    var converterFunc;                                                                                                 // 527
    if (fieldType === String) {                                                                                        // 528
      converterFunc = typeDef.valueConverters.string;                                                                  // 529
    } else if (fieldType === Number) {                                                                                 // 530
      converterFunc = typeDef.valueConverters.number;                                                                  // 531
    } else if (fieldType === Boolean) {                                                                                // 532
      converterFunc = typeDef.valueConverters.boolean;                                                                 // 533
    } else if (fieldType === Date) {                                                                                   // 534
      converterFunc = typeDef.valueConverters.date;                                                                    // 535
    } else if (fieldType === Array) {                                                                                  // 536
      arrayItemFieldType = ss.schema(fieldName + ".$").type;                                                           // 537
      if (arrayItemFieldType === String) {                                                                             // 538
        converterFunc = typeDef.valueConverters.stringArray;                                                           // 539
      } else if (arrayItemFieldType === Number) {                                                                      // 540
        converterFunc = typeDef.valueConverters.numberArray;                                                           // 541
      } else if (arrayItemFieldType === Boolean) {                                                                     // 542
        converterFunc = typeDef.valueConverters.booleanArray;                                                          // 543
      } else if (arrayItemFieldType === Date) {                                                                        // 544
        converterFunc = typeDef.valueConverters.dateArray;                                                             // 545
      }                                                                                                                // 546
    }                                                                                                                  // 547
                                                                                                                       // 548
    if (typeof converterFunc === "function") {                                                                         // 549
      val = converterFunc.call(field, val);                                                                            // 550
    }                                                                                                                  // 551
  }                                                                                                                    // 552
                                                                                                                       // 553
  return val;                                                                                                          // 554
};                                                                                                                     // 555
                                                                                                                       // 556
/**                                                                                                                    // 557
 * @method AutoForm.addInputType                                                                                       // 558
 * @public                                                                                                             // 559
 * @param {String} name The type string that this definition is for.                                                   // 560
 * @param {Object} definition Defines how the input type should be rendered.                                           // 561
 * @param {String} definition.componentName The component name. A template with the name <componentName>_bootstrap3, and potentially others, must be defined.
 * @return {undefined}                                                                                                 // 563
 *                                                                                                                     // 564
 * Use this method to add custom input components.                                                                     // 565
 */                                                                                                                    // 566
AutoForm.addInputType = function afAddInputType(name, definition) {                                                    // 567
  var obj = {};                                                                                                        // 568
  obj[name] = definition;                                                                                              // 569
  _.extend(AutoForm._inputTypeDefinitions, obj);                                                                       // 570
};                                                                                                                     // 571
                                                                                                                       // 572
/**                                                                                                                    // 573
 * @method AutoForm.addFormType                                                                                        // 574
 * @public                                                                                                             // 575
 * @param {String} name The type string that this definition is for.                                                   // 576
 * @param {Object} definition Defines how the submit type should work                                                  // 577
 * @param {Function} [definition.adjustInputContext] A function that accepts a single argument, which is the context with which an input template in the form will be called, potentially changes the context object, and then returns it. For example, the "readonly" and "disabled" form types use this function to add the "readonly" or "disabled" attribute, respectively, to every input within the form.
 * @param {Function} [definition.adjustSchema] A function that accepts a single argument, which is the form schema, and potentially uses that to return a different schema to use instead. For example, the "update-pushArray" form type uses this function to build and return a schema that is limited by the `scope` attribute on the form. When this function is called, `this` contains useful information about the form.
 * @param {Boolean} [definition.hideArrayItemButtons] Set to `true` if this form type should not show buttons for adding and removing items in an array field. The "disabled" and "readonly" form types do this.
 * @param {Function} definition.onSubmit A function that does whatever should happen upon submission of this form type. When this function is called, `this` contains useful information about the form. At a minimum, you probably want to call `this.event.preventDefault()` to prevent the browser from submitting the form. Your submission logic may want to rely on additional custom form attributes, which will be available in `this.formAttributes`. If you do any additional validation and it fails, you should call `this.failedValidation()`. When your logic is done, you should call `this.result(error, result)`. If you want to end the submission process without providing a result, call `this.endSubmission()`. If you don't call `this.result()` or `this.endSubmission()`, `endSubmit` hooks won't be called, so for example the submit button might remain disabled. `onError` hooks will be called only if you pass an error to `this.result()`. `onSuccess` hooks will be called only if you do not pass an error to `this.result()`.
 * @param {Function} [definition.shouldPrevalidate] A function that returns `true` if validation against the form schema should happen before the `onSubmit` function is called, or `false` if not. When this function is called, `this` contains useful information about the form. If this function is not provided for a form type, the default is `true`.
 * @param {Function} definition.validateForm A function that validates the form and returns `true` if valid or `false` if not. This can happen during submission but also at other times. When this function is called, `this` contains useful information about the form and the validation options.
 * @return {undefined}                                                                                                 // 584
 *                                                                                                                     // 585
 * Use this method to add custom form types.                                                                           // 586
 */                                                                                                                    // 587
AutoForm.addFormType = function afAddFormType(name, definition) {                                                      // 588
  var obj = {};                                                                                                        // 589
  obj[name] = definition;                                                                                              // 590
  _.extend(AutoForm._formTypeDefinitions, obj);                                                                        // 591
};                                                                                                                     // 592
                                                                                                                       // 593
/**                                                                                                                    // 594
 * @method AutoForm.validateField                                                                                      // 595
 * @public                                                                                                             // 596
 * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 597
 * @param {String} fieldName The name of the field within the `autoForm` you want to validate.                         // 598
 * @param {Boolean} [skipEmpty=false] Set to `true` to skip validation if the field has no value. Useful for preventing `required` errors in form fields that the user has not yet filled out.
 * @return {Boolean} Is it valid?                                                                                      // 600
 *                                                                                                                     // 601
 * In addition to returning a boolean that indicates whether the field is currently valid,                             // 602
 * this method causes the reactive validation messages to appear.                                                      // 603
 */                                                                                                                    // 604
AutoForm.validateField = function autoFormValidateField(formId, fieldName, skipEmpty) {                                // 605
  var template = AutoForm.templateInstanceForForm(formId);                                                             // 606
  if (!template ||                                                                                                     // 607
      !template.view ||                                                                                                // 608
      !template.view._domrange ||                                                                                      // 609
      template.view.isDestroyed) {                                                                                     // 610
    return true;                                                                                                       // 611
  }                                                                                                                    // 612
                                                                                                                       // 613
  return validateField(fieldName, formId, skipEmpty, false);                                                           // 614
};                                                                                                                     // 615
                                                                                                                       // 616
/**                                                                                                                    // 617
 * @method AutoForm.validateForm                                                                                       // 618
 * @public                                                                                                             // 619
 * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 620
 * @return {Boolean} Is it valid?                                                                                      // 621
 *                                                                                                                     // 622
 * In addition to returning a boolean that indicates whether the form is currently valid,                              // 623
 * this method causes the reactive validation messages to appear.                                                      // 624
 */                                                                                                                    // 625
AutoForm.validateForm = function autoFormValidateForm(formId) {                                                        // 626
  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 627
  var formDoc, formType = form.type;                                                                                   // 628
                                                                                                                       // 629
  var ftd = Utility.getFormTypeDef(formType);                                                                          // 630
                                                                                                                       // 631
  // Gather all form values                                                                                            // 632
  if (ftd.needsModifierAndDoc) {                                                                                       // 633
    formDoc = AutoForm.getFormValues(formId, null, null);                                                              // 634
  } else if (ftd.usesModifier) {                                                                                       // 635
    formDoc = AutoForm.getFormValues(formId, null, null, true);                                                        // 636
  } else {                                                                                                             // 637
    formDoc = AutoForm.getFormValues(formId, null, null, false);                                                       // 638
  }                                                                                                                    // 639
                                                                                                                       // 640
  // If form is not currently rendered, return true                                                                    // 641
  if (!formDoc) {                                                                                                      // 642
    return true;                                                                                                       // 643
  }                                                                                                                    // 644
                                                                                                                       // 645
  return (form.validation === 'none') || ftd.validateForm.call({                                                       // 646
    form: form,                                                                                                        // 647
    formDoc: formDoc,                                                                                                  // 648
    useCollectionSchema: false                                                                                         // 649
  });                                                                                                                  // 650
};                                                                                                                     // 651
                                                                                                                       // 652
/**                                                                                                                    // 653
 * @method AutoForm.getValidationContext                                                                               // 654
 * @public                                                                                                             // 655
 * @param {String} formId The `id` attribute of the `autoForm` for which you want the validation context               // 656
 * @return {SimpleSchemaValidationContext} The SimpleSchema validation context object.                                 // 657
 *                                                                                                                     // 658
 * Use this method to get the validation context, which can be used to check                                           // 659
 * the current invalid fields, manually invalidate fields, etc.                                                        // 660
 */                                                                                                                    // 661
AutoForm.getValidationContext = function autoFormGetValidationContext(formId) {                                        // 662
  var ss = AutoForm.getFormSchema(formId);                                                                             // 663
  return ss && ss.namedContext(formId);                                                                                // 664
};                                                                                                                     // 665
                                                                                                                       // 666
/**                                                                                                                    // 667
 * @method AutoForm.findAttribute                                                                                      // 668
 * @public                                                                                                             // 669
 * @param {String} attrName Attribute name                                                                             // 670
 * @return {Any|undefined} Searches for the given attribute, looking up the parent context tree until the closest autoform is reached.
 *                                                                                                                     // 672
 * Call this method from a UI helper. Might return undefined.                                                          // 673
 */                                                                                                                    // 674
AutoForm.findAttribute = function autoFormFindAttribute(attrName) {                                                    // 675
  var val, view, viewData;                                                                                             // 676
                                                                                                                       // 677
  function checkView() {                                                                                               // 678
    // Is the attribute we're looking for on here?                                                                     // 679
    // If so, stop searching                                                                                           // 680
    viewData = Blaze.getData(view);                                                                                    // 681
    if (viewData && viewData.atts && viewData.atts[attrName] !== void 0) {                                             // 682
      val = viewData.atts[attrName];                                                                                   // 683
    } else if (viewData && viewData[attrName] !== void 0) {                                                            // 684
      // When searching for "template", make sure we didn't just                                                       // 685
      // find the one that's on Template.dynamic                                                                       // 686
      if (attrName !== 'template' || !('data' in viewData)) {                                                          // 687
        val = viewData[attrName];                                                                                      // 688
      }                                                                                                                // 689
    }                                                                                                                  // 690
  }                                                                                                                    // 691
                                                                                                                       // 692
  // Loop                                                                                                              // 693
  view = Blaze.currentView;                                                                                            // 694
  while (val === undefined && view && view.name !== 'Template.autoForm') {                                             // 695
    checkView();                                                                                                       // 696
    view = view.originalParentView || view.parentView;                                                                 // 697
  }                                                                                                                    // 698
                                                                                                                       // 699
  // If we've reached the form, check there, too                                                                       // 700
  if (val === undefined && view && view.name === 'Template.autoForm') {                                                // 701
    checkView();                                                                                                       // 702
  }                                                                                                                    // 703
                                                                                                                       // 704
  return val;                                                                                                          // 705
};                                                                                                                     // 706
                                                                                                                       // 707
/**                                                                                                                    // 708
 * @method AutoForm.findAttributesWithPrefix                                                                           // 709
 * @public                                                                                                             // 710
 * @param {String} prefix Attribute prefix                                                                             // 711
 * @return {Object} An object containing all of the found attributes and their values, with the prefix removed from the keys.
 *                                                                                                                     // 713
 * Call this method from a UI helper. Searches for attributes that start with the given prefix, looking up the parent context tree until the closest autoform is reached.
 */                                                                                                                    // 715
AutoForm.findAttributesWithPrefix = function autoFormFindAttributesWithPrefix(prefix) {                                // 716
  var result = {}, view, viewData, searchObj;                                                                          // 717
                                                                                                                       // 718
  function checkView() {                                                                                               // 719
    // Is the attribute we're looking for on here?                                                                     // 720
    // If so, add to result object.                                                                                    // 721
    viewData = Blaze.getData(view);                                                                                    // 722
    if (viewData && viewData.atts) {                                                                                   // 723
      searchObj = viewData.atts;                                                                                       // 724
    } else {                                                                                                           // 725
      searchObj = viewData;                                                                                            // 726
    }                                                                                                                  // 727
    // We need an isArray check, too because _.isObject([{}]) comes back true                                          // 728
    if (_.isObject(searchObj) && !_.isArray(searchObj)) {                                                              // 729
      _.each(searchObj, function (v, k) {                                                                              // 730
        if (k.indexOf(prefix) === 0) {                                                                                 // 731
          result[k.slice(prefix.length)] = v;                                                                          // 732
        }                                                                                                              // 733
      });                                                                                                              // 734
    }                                                                                                                  // 735
  }                                                                                                                    // 736
                                                                                                                       // 737
  // Loop                                                                                                              // 738
  view = Blaze.currentView;                                                                                            // 739
  while (view && view.name !== 'Template.autoForm') {                                                                  // 740
    checkView();                                                                                                       // 741
    view = view.originalParentView || view.parentView;                                                                 // 742
  }                                                                                                                    // 743
                                                                                                                       // 744
  // If we've reached the form, check there, too                                                                       // 745
  if (view && view.name === 'Template.autoForm') {                                                                     // 746
    checkView();                                                                                                       // 747
  }                                                                                                                    // 748
                                                                                                                       // 749
  return result;                                                                                                       // 750
};                                                                                                                     // 751
                                                                                                                       // 752
/**                                                                                                                    // 753
 * @method AutoForm.debug                                                                                              // 754
 * @public                                                                                                             // 755
 *                                                                                                                     // 756
 * Call this method in client code while developing to turn on extra logging.                                          // 757
 * You need to call it just one time, usually in top level client code.                                                // 758
 */                                                                                                                    // 759
AutoForm.debug = function autoFormDebug() {                                                                            // 760
  SimpleSchema.debug = true;                                                                                           // 761
  AutoForm._debug = true;                                                                                              // 762
  AutoForm.addHooks(null, {                                                                                            // 763
    onError: function (operation, error) {                                                                             // 764
      console.log("Error in " + this.formId, operation, error);                                                        // 765
    }                                                                                                                  // 766
  });                                                                                                                  // 767
};                                                                                                                     // 768
                                                                                                                       // 769
/**                                                                                                                    // 770
 * @property AutoForm.arrayTracker                                                                                     // 771
 * @public                                                                                                             // 772
 */                                                                                                                    // 773
AutoForm.arrayTracker = arrayTracker;                                                                                  // 774
                                                                                                                       // 775
/**                                                                                                                    // 776
 * @method AutoForm.getInputType                                                                                       // 777
 * @param {Object} atts The attributes provided to afFieldInput.                                                       // 778
 * @public                                                                                                             // 779
 * @return {String} The input type. Most are the same as the `type` attributes for HTML input elements, but some are special strings that autoform interprets.
 *                                                                                                                     // 781
 * Call this method from a UI helper to get the type string for the input control.                                     // 782
 */                                                                                                                    // 783
AutoForm.getInputType = function getInputType(atts) {                                                                  // 784
  var expectsArray = false, defs, schemaType, type;                                                                    // 785
                                                                                                                       // 786
  atts = AutoForm.Utility.getComponentContext(atts, 'afFieldInput').atts;                                              // 787
                                                                                                                       // 788
  // If a `type` attribute is specified, we just use that                                                              // 789
  if (atts.type) {                                                                                                     // 790
    return atts.type;                                                                                                  // 791
  }                                                                                                                    // 792
                                                                                                                       // 793
  // Get schema definition, using the item definition for array fields                                                 // 794
  defs = AutoForm.getSchemaForField(atts.name);                                                                        // 795
  if (!defs) {                                                                                                         // 796
    return 'text';                                                                                                     // 797
  }                                                                                                                    // 798
                                                                                                                       // 799
  schemaType = defs.type;                                                                                              // 800
  if (schemaType === Array) {                                                                                          // 801
    expectsArray = true;                                                                                               // 802
    schemaType = AutoForm.getSchemaForField(atts.name + ".$").type;                                                    // 803
    if (!defs) {                                                                                                       // 804
      return 'text';                                                                                                   // 805
    }                                                                                                                  // 806
  }                                                                                                                    // 807
                                                                                                                       // 808
  // Based on the `type` attribute, the `type` from the schema, and/or                                                 // 809
  // other characteristics such as regEx and whether an array is expected,                                             // 810
  // choose which type string to return.                                                                               // 811
                                                                                                                       // 812
  // If options were provided, noselect is `true`, and the schema                                                      // 813
  // expects the value of the field to be an array, use "select-checkbox".                                             // 814
  if (atts.options && atts.noselect === true && expectsArray) {                                                        // 815
    type = 'select-checkbox';                                                                                          // 816
  }                                                                                                                    // 817
                                                                                                                       // 818
  // If options were provided, noselect is `true`, and the schema                                                      // 819
  // does not expect the value of the field to be an array, use "select-radio".                                        // 820
  else if (atts.options && atts.noselect === true && !expectsArray) {                                                  // 821
    type = 'select-radio';                                                                                             // 822
  }                                                                                                                    // 823
                                                                                                                       // 824
  // If options were provided, noselect is not `true`, and the schema                                                  // 825
  // expects the value of the field to be an array, use "select-multiple".                                             // 826
  else if (atts.options && atts.noselect !== true && expectsArray) {                                                   // 827
    type = 'select-multiple';                                                                                          // 828
  }                                                                                                                    // 829
                                                                                                                       // 830
  // If options were provided, noselect is not `true`, and the schema                                                  // 831
  // does not expect the value of the field to be an array, use "select".                                              // 832
  else if (atts.options && atts.noselect !== true && !expectsArray) {                                                  // 833
    type = 'select';                                                                                                   // 834
  }                                                                                                                    // 835
                                                                                                                       // 836
  // If the schema expects the value of the field to be a string and                                                   // 837
  // the `rows` attribute is provided, use "textarea"                                                                  // 838
  else if (schemaType === String && atts.rows === +atts.rows) {                                                        // 839
    type = 'textarea';                                                                                                 // 840
  }                                                                                                                    // 841
                                                                                                                       // 842
  // If the schema expects the value of the field to be a number,                                                      // 843
  // use "number"                                                                                                      // 844
  else if (schemaType === Number) {                                                                                    // 845
    type = 'number';                                                                                                   // 846
  }                                                                                                                    // 847
                                                                                                                       // 848
  // If the schema expects the value of the field to be a Date instance,                                               // 849
  // use "date"                                                                                                        // 850
  else if (schemaType === Date) {                                                                                      // 851
    type = 'date';                                                                                                     // 852
  }                                                                                                                    // 853
                                                                                                                       // 854
  // If the schema expects the value of the field to be a boolean,                                                     // 855
  // use "boolean-checkbox"                                                                                            // 856
  else if (schemaType === Boolean) {                                                                                   // 857
    type = 'boolean-checkbox';                                                                                         // 858
  }                                                                                                                    // 859
                                                                                                                       // 860
  // Default is "text"                                                                                                 // 861
  else {                                                                                                               // 862
    type = 'text';                                                                                                     // 863
  }                                                                                                                    // 864
                                                                                                                       // 865
  return type;                                                                                                         // 866
};                                                                                                                     // 867
                                                                                                                       // 868
/**                                                                                                                    // 869
 * @method AutoForm.getSchemaForField                                                                                  // 870
 * @public                                                                                                             // 871
 * @param {String} name The field name attribute / schema key.                                                         // 872
 * @return {Object|undefined}                                                                                          // 873
 *                                                                                                                     // 874
 * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.
 */                                                                                                                    // 876
AutoForm.getSchemaForField = function autoFormGetSchemaForField(name) {                                                // 877
  var ss = AutoForm.getFormSchema();                                                                                   // 878
  return AutoForm.Utility.getDefs(ss, name);                                                                           // 879
};                                                                                                                     // 880
                                                                                                                       // 881
/**                                                                                                                    // 882
 * @method AutoForm._getOptionsForField                                                                                // 883
 * @public                                                                                                             // 884
 * @param {String} name The field name attribute / schema key.                                                         // 885
 * @return {Array(Object)|String|undefined}                                                                            // 886
 *                                                                                                                     // 887
 * Call this method from a UI helper to get the select options for the field. Might return the string "allowed".       // 888
 */                                                                                                                    // 889
AutoForm._getOptionsForField = function autoFormGetOptionsForField(name) {                                             // 890
  var ss, def, saf, allowedValues;                                                                                     // 891
                                                                                                                       // 892
  ss = AutoForm.getFormSchema();                                                                                       // 893
  if (!ss) {                                                                                                           // 894
    return;                                                                                                            // 895
  }                                                                                                                    // 896
                                                                                                                       // 897
  def = ss.getDefinition(name);                                                                                        // 898
  if (!def) {                                                                                                          // 899
    return;                                                                                                            // 900
  }                                                                                                                    // 901
                                                                                                                       // 902
  // If options in schema, use those                                                                                   // 903
  saf = def.autoform;                                                                                                  // 904
  if (saf) {                                                                                                           // 905
    if (saf.afFieldInput && saf.afFieldInput.options) {                                                                // 906
      return saf.afFieldInput.options;                                                                                 // 907
    } else if (saf.afQuickField && saf.afQuickField.options) {                                                         // 908
      return saf.afQuickField.options;                                                                                 // 909
    } else if (saf.options) {                                                                                          // 910
      return saf.options;                                                                                              // 911
    }                                                                                                                  // 912
  }                                                                                                                    // 913
                                                                                                                       // 914
  // If schema has allowedValues, use those                                                                            // 915
  allowedValues = ss.getAllowedValuesForKey(name);                                                                     // 916
  if (allowedValues) {                                                                                                 // 917
    return 'allowed';                                                                                                  // 918
  }                                                                                                                    // 919
};                                                                                                                     // 920
                                                                                                                       // 921
/**                                                                                                                    // 922
 * @method AutoForm.getLabelForField                                                                                   // 923
 * @public                                                                                                             // 924
 * @param {String} name The field name attribute / schema key.                                                         // 925
 * @return {Object}                                                                                                    // 926
 *                                                                                                                     // 927
 * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.
 */                                                                                                                    // 929
AutoForm.getLabelForField = function autoFormGetSchemaForField(name) {                                                 // 930
  var ss = AutoForm.getFormSchema(), label = ss.label(name);                                                           // 931
  // for array items we don't want to inflect the label because                                                        // 932
  // we will end up with a number;                                                                                     // 933
  // TODO this check should probably be in the SimpleSchema code                                                       // 934
  if (SimpleSchema._makeGeneric(name).slice(-1) === "$" && !isNaN(parseInt(label, 10))) {                              // 935
    label = null;                                                                                                      // 936
  }                                                                                                                    // 937
  return label;                                                                                                        // 938
};                                                                                                                     // 939
                                                                                                                       // 940
/**                                                                                                                    // 941
 * @method AutoForm.templateInstanceForForm                                                                            // 942
 * @public                                                                                                             // 943
 * @param {String} [formId] The form's `id` attribute                                                                  // 944
 * @returns {TemplateInstance|undefined} The template instance.                                                        // 945
 *                                                                                                                     // 946
 * Gets the template instance for the form with formId or the closest form to the current context.                     // 947
 */                                                                                                                    // 948
AutoForm.templateInstanceForForm = function (formId) {                                                                 // 949
  var view = AutoForm.viewForForm(formId);                                                                             // 950
                                                                                                                       // 951
  if (!view) return;                                                                                                   // 952
                                                                                                                       // 953
  return view.templateInstance();                                                                                      // 954
};                                                                                                                     // 955
                                                                                                                       // 956
/**                                                                                                                    // 957
 * @method AutoForm.viewForForm                                                                                        // 958
 * @public                                                                                                             // 959
 * @param {String} [formId] The form's `id` attribute. Do not pass this if calling from within a form context.         // 960
 * @returns {Blaze.View|undefined} The `Blaze.View` instance for the autoForm.                                         // 961
 *                                                                                                                     // 962
 * Gets the `Blaze.View` instance for the form with formId or the closest form to the current context.                 // 963
 */                                                                                                                    // 964
AutoForm.viewForForm = function (formId) {                                                                             // 965
  var formElement, view;                                                                                               // 966
                                                                                                                       // 967
  if (formId) {                                                                                                        // 968
    formElement = document.getElementById(formId);                                                                     // 969
    if (!formElement) {                                                                                                // 970
      return;                                                                                                          // 971
    }                                                                                                                  // 972
  }                                                                                                                    // 973
                                                                                                                       // 974
  // If formElement is undefined, Blaze.getView returns the current view.                                              // 975
  try {                                                                                                                // 976
    view = Blaze.getView(formElement);                                                                                 // 977
  } catch (err) {}                                                                                                     // 978
                                                                                                                       // 979
  while (view && view.name !== 'Template.autoForm') {                                                                  // 980
    view = view.originalParentView || view.parentView;                                                                 // 981
  }                                                                                                                    // 982
                                                                                                                       // 983
  if (!view || view.name !== 'Template.autoForm') {                                                                    // 984
    return;                                                                                                            // 985
  }                                                                                                                    // 986
                                                                                                                       // 987
  return view;                                                                                                         // 988
};                                                                                                                     // 989
                                                                                                                       // 990
/**                                                                                                                    // 991
 * @method AutoForm.getArrayCountFromDocForField                                                                       // 992
 * @public                                                                                                             // 993
 * @param {String} formId The form's `id` attribute                                                                    // 994
 * @param {String} field  The field name (schema key)                                                                  // 995
 * @returns {Number|undefined} Array count in the attached document.                                                   // 996
 *                                                                                                                     // 997
 * Looks in the document attached to the form to see if the                                                            // 998
 * requested field exists and is an array. If so, returns the                                                          // 999
 * length (count) of the array. Otherwise returns undefined.                                                           // 1000
 */                                                                                                                    // 1001
AutoForm.getArrayCountFromDocForField = function (formId, field) {                                                     // 1002
  var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                              // 1003
  var docCount;                                                                                                        // 1004
  if (mDoc) {                                                                                                          // 1005
    var keyInfo = mDoc.getInfoForKey(field);                                                                           // 1006
    if (keyInfo && _.isArray(keyInfo.value)) {                                                                         // 1007
      docCount = keyInfo.value.length;                                                                                 // 1008
    }                                                                                                                  // 1009
  }                                                                                                                    // 1010
  return docCount;                                                                                                     // 1011
};                                                                                                                     // 1012
                                                                                                                       // 1013
/**                                                                                                                    // 1014
 * @method AutoForm.getCurrentDataForForm                                                                              // 1015
 * @public                                                                                                             // 1016
 * @param {String} formId The form's `id` attribute                                                                    // 1017
 * @returns {Object} Current data context for the form, or an empty object.                                            // 1018
 *                                                                                                                     // 1019
 * Returns the current data context for a form.                                                                        // 1020
 * You can call this without a formId from within a helper and                                                         // 1021
 * the data for the nearest containing form will be returned.                                                          // 1022
 */                                                                                                                    // 1023
AutoForm.getCurrentDataForForm = function (formId) {                                                                   // 1024
  var view = AutoForm.viewForForm(formId);                                                                             // 1025
                                                                                                                       // 1026
  if (!view) return;                                                                                                   // 1027
                                                                                                                       // 1028
  var data = Blaze.getData(view);                                                                                      // 1029
                                                                                                                       // 1030
  if (!data) return;                                                                                                   // 1031
                                                                                                                       // 1032
  return setDefaults(data);                                                                                            // 1033
};                                                                                                                     // 1034
                                                                                                                       // 1035
/**                                                                                                                    // 1036
 * @method AutoForm.getCurrentDataPlusExtrasForForm                                                                    // 1037
 * @public                                                                                                             // 1038
 * @param   {String} [formId] The form's `id` attribute                                                                // 1039
 * @returns {Object} Current data context for the form, or an empty object.                                            // 1040
 *                                                                                                                     // 1041
 * Returns the current data context for a form plus some extra properties.                                             // 1042
 * You can call this without a formId from within a helper and                                                         // 1043
 * the data for the nearest containing form will be returned.                                                          // 1044
 */                                                                                                                    // 1045
AutoForm.getCurrentDataPlusExtrasForForm = function (formId) {                                                         // 1046
  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1047
                                                                                                                       // 1048
  data = _.clone(data);                                                                                                // 1049
                                                                                                                       // 1050
  // add form type definition                                                                                          // 1051
  var formType = data.type || 'normal';                                                                                // 1052
  data.formTypeDef = Utility.getFormTypeDef(formType);                                                                 // 1053
                                                                                                                       // 1054
  return data;                                                                                                         // 1055
};                                                                                                                     // 1056
                                                                                                                       // 1057
/**                                                                                                                    // 1058
 * @method AutoForm.getFormCollection                                                                                  // 1059
 * @public                                                                                                             // 1060
 * @param {String} formId The form's `id` attribute                                                                    // 1061
 * @returns {Mongo.Collection|undefined} The Collection instance                                                       // 1062
 *                                                                                                                     // 1063
 * Gets the collection for a form from the `collection` attribute                                                      // 1064
 */                                                                                                                    // 1065
AutoForm.getFormCollection = function (formId) {                                                                       // 1066
  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1067
  return AutoForm.Utility.lookup(data.collection);                                                                     // 1068
};                                                                                                                     // 1069
                                                                                                                       // 1070
/**                                                                                                                    // 1071
 * @method AutoForm.getFormSchema                                                                                      // 1072
 * @public                                                                                                             // 1073
 * @param {String} formId The form's `id` attribute                                                                    // 1074
 * @param {Object} [form] Pass the form data context as an optimization or if the form is not yet rendered.            // 1075
 * @returns {SimpleSchema|undefined} The SimpleSchema instance                                                         // 1076
 *                                                                                                                     // 1077
 * Gets the schema for a form, from the `schema` attribute if                                                          // 1078
 * provided, or from the schema attached to the `Mongo.Collection`                                                     // 1079
 * specified in the `collection` attribute. The form must be                                                           // 1080
 * currently rendered.                                                                                                 // 1081
 */                                                                                                                    // 1082
AutoForm.getFormSchema = function (formId, form) {                                                                     // 1083
  form = form ? setDefaults(form) : AutoForm.getCurrentDataForForm(formId);                                            // 1084
  return form._resolvedSchema;                                                                                         // 1085
};                                                                                                                     // 1086
                                                                                                                       // 1087
/**                                                                                                                    // 1088
 * @method AutoForm.getFormId                                                                                          // 1089
 * @public                                                                                                             // 1090
 * @returns {String} The containing form's `id` attribute value                                                        // 1091
 *                                                                                                                     // 1092
 * Call in a helper to get the containing form's `id` attribute. Reactive.                                             // 1093
 */                                                                                                                    // 1094
AutoForm.getFormId = function () {                                                                                     // 1095
  return AutoForm.getCurrentDataForForm().id;                                                                          // 1096
};                                                                                                                     // 1097
                                                                                                                       // 1098
/**                                                                                                                    // 1099
 * @method AutoForm.selectFirstInvalidField                                                                            // 1100
 * @public                                                                                                             // 1101
 * @param {String} formId The `id` attribute of the form                                                               // 1102
 * @param {SimpleSchema} ss The SimpleSchema instance that was used to create the form's validation context.           // 1103
 * @returns {undefined}                                                                                                // 1104
 *                                                                                                                     // 1105
 * Selects the focus the first field (in DOM order) with an error.                                                     // 1106
 */                                                                                                                    // 1107
AutoForm.selectFirstInvalidField = function selectFirstInvalidField(formId, ss) {                                      // 1108
  var ctx = ss.namedContext(formId), template, fields;                                                                 // 1109
  if (!ctx.isValid()) {                                                                                                // 1110
    template = AutoForm.templateInstanceForForm(formId);                                                               // 1111
    fields = getAllFieldsInForm(template);                                                                             // 1112
    fields.each(function () {                                                                                          // 1113
      var f = $(this);                                                                                                 // 1114
      if (ctx.keyIsInvalid(f.attr('data-schema-key'))) {                                                               // 1115
        f.focus();                                                                                                     // 1116
        return false;                                                                                                  // 1117
      }                                                                                                                // 1118
    });                                                                                                                // 1119
  }                                                                                                                    // 1120
};                                                                                                                     // 1121
                                                                                                                       // 1122
/**                                                                                                                    // 1123
 * @method AutoForm._validateFormDoc                                                                                   // 1124
 * @public                                                                                                             // 1125
 *                                                                                                                     // 1126
 * If creating a form type, you will often want to call this from the `validateForm` function. It provides the generic form validation logic that does not typically change between form types.
 *                                                                                                                     // 1128
 * @param {Object} doc The document with the gathered form values to validate.                                         // 1129
 * @param {Boolean} isModifier Is `doc` actually a mongo modifier object?                                              // 1130
 * @param {String} formId The form `id` attribute                                                                      // 1131
 * @param {SimpleSchema} ss The SimpleSchema instance against which to validate.                                       // 1132
 * @param {Object} form The form context object                                                                        // 1133
 * @param {String} [key] Optionally, a specific schema key to validate.                                                // 1134
 * @returns {Boolean} Is the form valid?                                                                               // 1135
 */                                                                                                                    // 1136
AutoForm._validateFormDoc = function validateFormDoc(doc, isModifier, formId, ss, form, key) {                         // 1137
  var isValid;                                                                                                         // 1138
  var ec = {                                                                                                           // 1139
    userId: (Meteor.userId && Meteor.userId()) || null,                                                                // 1140
    isInsert: !isModifier,                                                                                             // 1141
    isUpdate: !!isModifier,                                                                                            // 1142
    isUpsert: false,                                                                                                   // 1143
    isFromTrustedCode: false,                                                                                          // 1144
    docId: (form.doc && form.doc._id) || null                                                                          // 1145
  };                                                                                                                   // 1146
                                                                                                                       // 1147
  // Get a version of the doc that has auto values to validate here. We                                                // 1148
  // don't want to actually send any auto values to the server because                                                 // 1149
  // we ultimately want them generated on the server                                                                   // 1150
  var docForValidation = _.clone(doc);                                                                                 // 1151
  ss.clean(docForValidation, {                                                                                         // 1152
    isModifier: isModifier,                                                                                            // 1153
    filter: false,                                                                                                     // 1154
    autoConvert: false,                                                                                                // 1155
    trimStrings: false,                                                                                                // 1156
    extendAutoValueContext: ec                                                                                         // 1157
  });                                                                                                                  // 1158
                                                                                                                       // 1159
  // Get form's validation context                                                                                     // 1160
  var vc = ss.namedContext(formId);                                                                                    // 1161
                                                                                                                       // 1162
  // Validate                                                                                                          // 1163
  // If `key` is provided, we validate that key/field only                                                             // 1164
  if (key) {                                                                                                           // 1165
    isValid = vc.validateOne(docForValidation, key, {                                                                  // 1166
      modifier: isModifier,                                                                                            // 1167
      extendedCustomContext: ec                                                                                        // 1168
    });                                                                                                                // 1169
                                                                                                                       // 1170
    // Add sticky error for this key if there is one                                                                   // 1171
    var stickyError = AutoForm.templateInstanceForForm(formId)._stickyErrors[key];                                     // 1172
    if (stickyError) {                                                                                                 // 1173
      isValid = false;                                                                                                 // 1174
      vc.addInvalidKeys([                                                                                              // 1175
        {name: key, type: stickyError.type, value: stickyError.value}                                                  // 1176
      ]);                                                                                                              // 1177
    }                                                                                                                  // 1178
  } else {                                                                                                             // 1179
    isValid = vc.validate(docForValidation, {                                                                          // 1180
      modifier: isModifier,                                                                                            // 1181
      extendedCustomContext: ec                                                                                        // 1182
    });                                                                                                                // 1183
                                                                                                                       // 1184
    // Add sticky errors for all keys if any                                                                           // 1185
    var stickyErrors = AutoForm.templateInstanceForForm(formId)._stickyErrors;                                         // 1186
    if (!_.isEmpty(stickyErrors)) {                                                                                    // 1187
      isValid = false;                                                                                                 // 1188
      stickyErrors = _.map(stickyErrors, function (obj, k) {                                                           // 1189
        return {name: k, type: obj.type, value: obj.value};                                                            // 1190
      });                                                                                                              // 1191
      vc.addInvalidKeys(stickyErrors);                                                                                 // 1192
    }                                                                                                                  // 1193
                                                                                                                       // 1194
    if (!isValid) {                                                                                                    // 1195
      AutoForm.selectFirstInvalidField(formId, ss);                                                                    // 1196
    }                                                                                                                  // 1197
  }                                                                                                                    // 1198
                                                                                                                       // 1199
  return isValid;                                                                                                      // 1200
};                                                                                                                     // 1201
                                                                                                                       // 1202
/**                                                                                                                    // 1203
 * Sets defaults for the form data context                                                                             // 1204
 * @private                                                                                                            // 1205
 * @returns {String} The data context with property defaults added.                                                    // 1206
 */                                                                                                                    // 1207
setDefaults = function setDefaults(data) {                                                                             // 1208
  if (!data) {                                                                                                         // 1209
    data = {};                                                                                                         // 1210
  }                                                                                                                    // 1211
                                                                                                                       // 1212
  // default form type is "normal"                                                                                     // 1213
  if (typeof data.type !== 'string') {                                                                                 // 1214
    data.type = 'normal';                                                                                              // 1215
  }                                                                                                                    // 1216
                                                                                                                       // 1217
  // default form validation is "submitThenKeyup"                                                                      // 1218
  if (typeof data.validation !== 'string') {                                                                           // 1219
    data.validation = 'submitThenKeyup';                                                                               // 1220
  }                                                                                                                    // 1221
                                                                                                                       // 1222
  // Resolve form schema                                                                                               // 1223
  if (!data._resolvedSchema) {                                                                                         // 1224
    var formType = data.type;                                                                                          // 1225
    var schema = data.schema;                                                                                          // 1226
    if (schema) {                                                                                                      // 1227
      schema = AutoForm.Utility.lookup(schema);                                                                        // 1228
    } else {                                                                                                           // 1229
      var collection = AutoForm.Utility.lookup(data.collection);                                                       // 1230
      if (collection && typeof collection.simpleSchema === 'function') {                                               // 1231
        schema = collection.simpleSchema();                                                                            // 1232
      }                                                                                                                // 1233
    }                                                                                                                  // 1234
                                                                                                                       // 1235
    // Form type definition can optionally alter the schema                                                            // 1236
    var ftd = Utility.getFormTypeDef(formType);                                                                        // 1237
                                                                                                                       // 1238
    if (typeof ftd.adjustSchema === 'function') {                                                                      // 1239
      schema = ftd.adjustSchema.call({form: data}, schema);                                                            // 1240
    }                                                                                                                  // 1241
                                                                                                                       // 1242
    // If we have a schema, cache it                                                                                   // 1243
    if (schema) {                                                                                                      // 1244
      data._resolvedSchema = schema;                                                                                   // 1245
    }                                                                                                                  // 1246
  }                                                                                                                    // 1247
                                                                                                                       // 1248
  return data;                                                                                                         // 1249
};                                                                                                                     // 1250
                                                                                                                       // 1251
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/insert.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('insert', {                                                                                       // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    // Make sure we have a collection                                                                                  // 10
    var collection = this.collection;                                                                                  // 11
    if (!collection) {                                                                                                 // 12
      throw new Error("AutoForm: You must specify a collection when form type is insert.");                            // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    // See if the collection has a schema attached                                                                     // 16
    var collectionHasSchema = (typeof collection.simpleSchema === "function" &&                                        // 17
                               collection.simpleSchema() != null);                                                     // 18
                                                                                                                       // 19
    // Run "before.insert" hooks                                                                                       // 20
    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 21
      // Perform insert                                                                                                // 22
      if (collectionHasSchema) {                                                                                       // 23
        // If the collection2 pkg is used and a schema is attached, we pass a validationContext                        // 24
        collection.insert(doc, c.validationOptions, c.result);                                                         // 25
      } else {                                                                                                         // 26
        // If the collection2 pkg is not used or no schema is attached, we don't pass options                          // 27
        // because core Meteor's `insert` function does not accept                                                     // 28
        // an options argument.                                                                                        // 29
        collection.insert(doc, c.result);                                                                              // 30
      }                                                                                                                // 31
    });                                                                                                                // 32
  },                                                                                                                   // 33
  validateForm: function () {                                                                                          // 34
    // Get SimpleSchema                                                                                                // 35
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 36
    // Validate                                                                                                        // 37
    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 38
  },                                                                                                                   // 39
  shouldPrevalidate: function () {                                                                                     // 40
    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 41
    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 42
  }                                                                                                                    // 43
});                                                                                                                    // 44
                                                                                                                       // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/update.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('update', {                                                                                       // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    // Make sure we have a collection                                                                                  // 10
    var collection = this.collection;                                                                                  // 11
    if (!collection) {                                                                                                 // 12
      throw new Error("AutoForm: You must specify a collection when form type is update.");                            // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    // Run "before.update" hooks                                                                                       // 16
    this.runBeforeHooks(this.updateDoc, function (modifier) {                                                          // 17
      if (_.isEmpty(modifier)) { // make sure this check stays after the before hooks                                  // 18
        // Nothing to update. Just treat it as a successful update.                                                    // 19
        c.result(null, 0);                                                                                             // 20
      } else {                                                                                                         // 21
        // Perform update                                                                                              // 22
        collection.update({_id: c.docId}, modifier, c.validationOptions, c.result);                                    // 23
      }                                                                                                                // 24
    });                                                                                                                // 25
  },                                                                                                                   // 26
  usesModifier: true,                                                                                                  // 27
  validateForm: function () {                                                                                          // 28
    // Get SimpleSchema                                                                                                // 29
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 30
    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 31
    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 32
  },                                                                                                                   // 33
  shouldPrevalidate: function () {                                                                                     // 34
    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 35
    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 36
  }                                                                                                                    // 37
});                                                                                                                    // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/update-pushArray.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, SimpleSchema */                                                                                    // 1
                                                                                                                       // 2
AutoForm.addFormType('update-pushArray', {                                                                             // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    // Make sure we have a collection                                                                                  // 10
    var collection = this.collection;                                                                                  // 11
    if (!collection) {                                                                                                 // 12
      throw new Error("AutoForm: You must specify a collection when form type is update-pushArray.");                  // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    // Make sure we have a scope                                                                                       // 16
    var scope = c.formAttributes.scope;                                                                                // 17
    if (!scope) {                                                                                                      // 18
      throw new Error("AutoForm: You must specify a scope when form type is update-pushArray.");                       // 19
    }                                                                                                                  // 20
                                                                                                                       // 21
    // Run "before.update" hooks                                                                                       // 22
    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 23
      if (_.isEmpty(doc)) { // make sure this check stays after the before hooks                                       // 24
        // Nothing to update. Just treat it as a successful update.                                                    // 25
        c.result(null, 0);                                                                                             // 26
      } else {                                                                                                         // 27
        var modifer = {$push: {}};                                                                                     // 28
        modifer.$push[scope] = doc;                                                                                    // 29
        // Perform update                                                                                              // 30
        collection.update({_id: c.docId}, modifer, c.validationOptions, c.result);                                     // 31
      }                                                                                                                // 32
    });                                                                                                                // 33
  },                                                                                                                   // 34
  validateForm: function () {                                                                                          // 35
    // Get SimpleSchema                                                                                                // 36
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 37
    // We validate as if it's an insert form                                                                           // 38
    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 39
  },                                                                                                                   // 40
  adjustSchema: function (ss) {                                                                                        // 41
    var scope = this.form.scope, newSchemaDef = {};                                                                    // 42
    var searchString = scope+'.$.';                                                                                    // 43
                                                                                                                       // 44
    // create new SS instance with only the fields that begin with `scope`                                             // 45
    _.each(ss.schema(), function (val, key) {                                                                          // 46
      if (key.indexOf(searchString) === 0) {                                                                           // 47
        newSchemaDef[key.slice(searchString.length)] = val;                                                            // 48
      }                                                                                                                // 49
    });                                                                                                                // 50
                                                                                                                       // 51
    return new SimpleSchema(newSchemaDef);                                                                             // 52
  },                                                                                                                   // 53
  shouldPrevalidate: function () {                                                                                     // 54
    // Prevalidate because the form is generated with a schema                                                         // 55
    // that has keys different from the collection schema                                                              // 56
    return true;                                                                                                       // 57
  }                                                                                                                    // 58
});                                                                                                                    // 59
                                                                                                                       // 60
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/method.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('method', {                                                                                       // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    if (!this.formAttributes.meteormethod) {                                                                           // 10
      throw new Error('When form type is "method", you must also provide a "meteormethod" attribute');                 // 11
    }                                                                                                                  // 12
                                                                                                                       // 13
    // Run "before.method" hooks                                                                                       // 14
    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 15
      // Validate. If both schema and collection were provided, then we validate                                       // 16
      // against the collection schema here. Otherwise we validate against whichever                                   // 17
      // one was passed.                                                                                               // 18
      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19
          c.formTypeDefinition.validateForm.call({                                                                     // 20
            form: c.formAttributes,                                                                                    // 21
            formDoc: doc,                                                                                              // 22
            useCollectionSchema: c.ssIsOverride                                                                        // 23
          });                                                                                                          // 24
                                                                                                                       // 25
      if (valid === false) {                                                                                           // 26
        c.failedValidation();                                                                                          // 27
      } else {                                                                                                         // 28
        // Call the method. If a ddp connection was provided, use                                                      // 29
        // that instead of the default Meteor connection                                                               // 30
        var ddp = c.formAttributes.ddp;                                                                                // 31
        if (ddp && ddp.call && typeof ddp.call === 'function') {                                                       // 32
          ddp.call(c.formAttributes.meteormethod, doc, c.result);                                                      // 33
        } else {                                                                                                       // 34
          Meteor.call(c.formAttributes.meteormethod, doc, c.result);                                                   // 35
        }                                                                                                              // 36
      }                                                                                                                // 37
    });                                                                                                                // 38
  },                                                                                                                   // 39
  validateForm: function () {                                                                                          // 40
    // Get SimpleSchema                                                                                                // 41
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 42
                                                                                                                       // 43
    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 44
    // If there is a `schema` attribute but you want to force validation against the                                   // 45
    // collection's schema instead, pass useCollectionSchema=true                                                      // 46
    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 47
                                                                                                                       // 48
    // Validate                                                                                                        // 49
    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 50
  },                                                                                                                   // 51
  shouldPrevalidate: function () {                                                                                     // 52
    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 53
    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 54
  }                                                                                                                    // 55
});                                                                                                                    // 56
                                                                                                                       // 57
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/method-update.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('method-update', {                                                                                // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    if (!this.formAttributes.meteormethod) {                                                                           // 10
      throw new Error('When form type is "method-update", you must also provide a "meteormethod" attribute');          // 11
    }                                                                                                                  // 12
                                                                                                                       // 13
    // Run "before.method" hooks                                                                                       // 14
    this.runBeforeHooks(this.updateDoc, function (updateDoc) {                                                         // 15
      // Validate. If both schema and collection were provided, then we validate                                       // 16
      // against the collection schema here. Otherwise we validate against whichever                                   // 17
      // one was passed.                                                                                               // 18
      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19
          c.formTypeDefinition.validateForm.call({                                                                     // 20
            form: c.formAttributes,                                                                                    // 21
            formDoc: updateDoc,                                                                                        // 22
            useCollectionSchema: c.ssIsOverride                                                                        // 23
          });                                                                                                          // 24
                                                                                                                       // 25
      if (valid === false) {                                                                                           // 26
        c.failedValidation();                                                                                          // 27
      } else {                                                                                                         // 28
        // Call the method. If a ddp connection was provided, use                                                      // 29
        // that instead of the default Meteor connection                                                               // 30
        var ddp = c.formAttributes.ddp;                                                                                // 31
        if (ddp && ddp.call && typeof ddp.call === 'function') {                                                       // 32
          ddp.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);                                       // 33
        } else {                                                                                                       // 34
          Meteor.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);                                    // 35
        }                                                                                                              // 36
      }                                                                                                                // 37
    });                                                                                                                // 38
  },                                                                                                                   // 39
  usesModifier: true,                                                                                                  // 40
  validateForm: function () {                                                                                          // 41
    // Get SimpleSchema                                                                                                // 42
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 43
                                                                                                                       // 44
    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 45
    // If there is a `schema` attribute but you want to force validation against the                                   // 46
    // collection's schema instead, pass useCollectionSchema=true                                                      // 47
    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 48
                                                                                                                       // 49
    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 50
    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 51
  },                                                                                                                   // 52
  shouldPrevalidate: function () {                                                                                     // 53
    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 54
    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 55
  }                                                                                                                    // 56
});                                                                                                                    // 57
                                                                                                                       // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/normal.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, Hooks */                                                                                           // 1
                                                                                                                       // 2
AutoForm.addFormType('normal', {                                                                                       // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Get onSubmit hooks                                                                                              // 7
    // These are called differently from the before hooks because                                                      // 8
    // they run async, but they can run in parallel and we need the                                                    // 9
    // result of all of them immediately because they can return                                                       // 10
    // false to stop normal form submission.                                                                           // 11
    var hooks = Hooks.getHooks(this.formId, 'onSubmit');                                                               // 12
                                                                                                                       // 13
    var hookCount = hooks.length, doneCount = 0, submitError, submitResult;                                            // 14
                                                                                                                       // 15
    if (hookCount === 0) {                                                                                             // 16
      // we haven't called preventDefault, so normal browser                                                           // 17
      // submission will now happen                                                                                    // 18
      this.endSubmission();                                                                                            // 19
      return;                                                                                                          // 20
    }                                                                                                                  // 21
                                                                                                                       // 22
    // Set up onSubmit hook context                                                                                    // 23
    var ctx = _.extend({                                                                                               // 24
      done: function (error, result) {                                                                                 // 25
        doneCount++;                                                                                                   // 26
        if (!submitError && error) {                                                                                   // 27
          submitError = error;                                                                                         // 28
        }                                                                                                              // 29
        if (!submitResult && result) {                                                                                 // 30
          submitResult = result;                                                                                       // 31
        }                                                                                                              // 32
        if (doneCount === hookCount) {                                                                                 // 33
          // run onError, onSuccess, endSubmit                                                                         // 34
          c.result(submitError, submitResult);                                                                         // 35
        }                                                                                                              // 36
      }                                                                                                                // 37
    }, this.hookContext);                                                                                              // 38
                                                                                                                       // 39
    // Call all hooks at once.                                                                                         // 40
    // Pass both types of doc plus the doc attached to the form.                                                       // 41
    // If any return false, we stop normal submission, but we don't                                                    // 42
    // run onError, onSuccess, endSubmit hooks until they all call this.done().                                        // 43
    var shouldStop = false;                                                                                            // 44
    _.each(hooks, function eachOnSubmit(hook) {                                                                        // 45
      var result = hook.call(ctx, c.insertDoc, c.updateDoc, c.currentDoc);                                             // 46
      if (shouldStop === false && result === false) {                                                                  // 47
        shouldStop = true;                                                                                             // 48
      }                                                                                                                // 49
    });                                                                                                                // 50
    if (shouldStop) {                                                                                                  // 51
      this.event.preventDefault();                                                                                     // 52
      this.event.stopPropagation();                                                                                    // 53
      this.endSubmission();                                                                                            // 54
    }                                                                                                                  // 55
  },                                                                                                                   // 56
  needsModifierAndDoc: true,                                                                                           // 57
  validateForm: function () {                                                                                          // 58
    // Get SimpleSchema                                                                                                // 59
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 60
    // Validate                                                                                                        // 61
    return AutoForm._validateFormDoc(this.formDoc.insertDoc, false, this.form.id, ss, this.form);                      // 62
  }                                                                                                                    // 63
});                                                                                                                    // 64
                                                                                                                       // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/readonly.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('readonly', {                                                                                     // 3
  onSubmit: function () {                                                                                              // 4
    // Prevent browser form submission                                                                                 // 5
    this.event.preventDefault();                                                                                       // 6
    // Nothing else                                                                                                    // 7
  },                                                                                                                   // 8
  validateForm: function () {                                                                                          // 9
    // Always valid                                                                                                    // 10
    return true;                                                                                                       // 11
  },                                                                                                                   // 12
  adjustInputContext: function (ctx) {                                                                                 // 13
    ctx.atts.readonly = "";                                                                                            // 14
    return ctx;                                                                                                        // 15
  },                                                                                                                   // 16
  hideArrayItemButtons: true                                                                                           // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/disabled.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('disabled', {                                                                                     // 3
  onSubmit: function () {                                                                                              // 4
    // Prevent browser form submission                                                                                 // 5
    this.event.preventDefault();                                                                                       // 6
    // Nothing else                                                                                                    // 7
  },                                                                                                                   // 8
  validateForm: function () {                                                                                          // 9
    // Always valid                                                                                                    // 10
    return true;                                                                                                       // 11
  },                                                                                                                   // 12
  adjustInputContext: function (ctx) {                                                                                 // 13
    ctx.atts.disabled = "";                                                                                            // 14
    return ctx;                                                                                                        // 15
  },                                                                                                                   // 16
  hideArrayItemButtons: true                                                                                           // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-checkbox/template.boolean-checkbox.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckbox");                                                                                    // 2
Template["afCheckbox"] = new Template("Template.afCheckbox", (function() {                                             // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5
    type: "checkbox",                                                                                                  // 6
    value: "true"                                                                                                      // 7
  }, function() {                                                                                                      // 8
    return Spacebars.attrMustache(view.lookup("atts"));                                                                // 9
  })), " ", Blaze.View("lookup:afFieldLabelText", function() {                                                         // 10
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 11
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 12
    }));                                                                                                               // 13
  })));                                                                                                                // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-checkbox/boolean-checkbox.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("boolean-checkbox", {                                                                            // 1
  template: "afCheckbox",                                                                                              // 2
  valueOut: function () {                                                                                              // 3
    return !!this.is(":checked");                                                                                      // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "string": function (val) {                                                                                         // 7
      if (val === true) {                                                                                              // 8
        return "TRUE";                                                                                                 // 9
      } else if (val === false) {                                                                                      // 10
        return "FALSE";                                                                                                // 11
      }                                                                                                                // 12
      return val;                                                                                                      // 13
    },                                                                                                                 // 14
    "stringArray": function (val) {                                                                                    // 15
      if (val === true) {                                                                                              // 16
        return ["TRUE"];                                                                                               // 17
      } else if (val === false) {                                                                                      // 18
        return ["FALSE"];                                                                                              // 19
      }                                                                                                                // 20
      return val;                                                                                                      // 21
    },                                                                                                                 // 22
    "number": function (val) {                                                                                         // 23
      if (val === true) {                                                                                              // 24
        return 1;                                                                                                      // 25
      } else if (val === false) {                                                                                      // 26
        return 0;                                                                                                      // 27
      }                                                                                                                // 28
      return val;                                                                                                      // 29
    },                                                                                                                 // 30
    "numberArray": function (val) {                                                                                    // 31
      if (val === true) {                                                                                              // 32
        return [1];                                                                                                    // 33
      } else if (val === false) {                                                                                      // 34
        return [0];                                                                                                    // 35
      }                                                                                                                // 36
      return val;                                                                                                      // 37
    }                                                                                                                  // 38
  },                                                                                                                   // 39
  contextAdjust: function (context) {                                                                                  // 40
    if (context.value === true) {                                                                                      // 41
      context.atts.checked = "";                                                                                       // 42
    }                                                                                                                  // 43
    //don't add required attribute to checkboxes because some browsers assume that to mean that it must be checked, which is not what we mean by "required"
    delete context.atts.required;                                                                                      // 45
    return context;                                                                                                    // 46
  }                                                                                                                    // 47
});                                                                                                                    // 48
                                                                                                                       // 49
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-radios/template.boolean-radios.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afBooleanRadioGroup");                                                                           // 2
Template["afBooleanRadioGroup"] = new Template("Template.afBooleanRadioGroup", (function() {                           // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 6
  }), "\n    ", HTML.DIV("\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                // 7
    type: "radio",                                                                                                     // 8
    value: "false",                                                                                                    // 9
    name: function() {                                                                                                 // 10
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                              // 11
    }                                                                                                                  // 12
  }, function() {                                                                                                      // 13
    return Spacebars.attrMustache(view.lookup("falseAtts"));                                                           // 14
  })), " ", Spacebars.With(function() {                                                                                // 15
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "falseLabel"));                                      // 16
  }, function() {                                                                                                      // 17
    return Blaze.View("lookup:.", function() {                                                                         // 18
      return Spacebars.mustache(view.lookup("."));                                                                     // 19
    });                                                                                                                // 20
  }, function() {                                                                                                      // 21
    return "False";                                                                                                    // 22
  })), "\n    "), "\n    ", HTML.DIV("\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                    // 23
    type: "radio",                                                                                                     // 24
    value: "true",                                                                                                     // 25
    name: function() {                                                                                                 // 26
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                              // 27
    }                                                                                                                  // 28
  }, function() {                                                                                                      // 29
    return Spacebars.attrMustache(view.lookup("trueAtts"));                                                            // 30
  })), " ", Spacebars.With(function() {                                                                                // 31
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "trueLabel"));                                       // 32
  }, function() {                                                                                                      // 33
    return Blaze.View("lookup:.", function() {                                                                         // 34
      return Spacebars.mustache(view.lookup("."));                                                                     // 35
    });                                                                                                                // 36
  }, function() {                                                                                                      // 37
    return "True";                                                                                                     // 38
  })), "\n    "), "\n  ");                                                                                             // 39
}));                                                                                                                   // 40
                                                                                                                       // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-radios/boolean-radios.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("boolean-radios", {                                                                              // 1
  template: "afBooleanRadioGroup",                                                                                     // 2
  valueOut: function () {                                                                                              // 3
    if (this.find('input[value=false]').is(":checked")) {                                                              // 4
      return false;                                                                                                    // 5
    } else if (this.find('input[value=true]').is(":checked")) {                                                        // 6
      return true;                                                                                                     // 7
    }                                                                                                                  // 8
  },                                                                                                                   // 9
  valueConverters: {                                                                                                   // 10
    "string": function (val) {                                                                                         // 11
      if (val === true) {                                                                                              // 12
        return "TRUE";                                                                                                 // 13
      } else if (val === false) {                                                                                      // 14
        return "FALSE";                                                                                                // 15
      }                                                                                                                // 16
      return val;                                                                                                      // 17
    },                                                                                                                 // 18
    "stringArray": function (val) {                                                                                    // 19
      if (val === true) {                                                                                              // 20
        return ["TRUE"];                                                                                               // 21
      } else if (val === false) {                                                                                      // 22
        return ["FALSE"];                                                                                              // 23
      }                                                                                                                // 24
      return val;                                                                                                      // 25
    },                                                                                                                 // 26
    "number": function (val) {                                                                                         // 27
      if (val === true) {                                                                                              // 28
        return 1;                                                                                                      // 29
      } else if (val === false) {                                                                                      // 30
        return 0;                                                                                                      // 31
      }                                                                                                                // 32
      return val;                                                                                                      // 33
    },                                                                                                                 // 34
    "numberArray": function (val) {                                                                                    // 35
      if (val === true) {                                                                                              // 36
        return [1];                                                                                                    // 37
      } else if (val === false) {                                                                                      // 38
        return [0];                                                                                                    // 39
      }                                                                                                                // 40
      return val;                                                                                                      // 41
    }                                                                                                                  // 42
  }                                                                                                                    // 43
});                                                                                                                    // 44
                                                                                                                       // 45
Template["afBooleanRadioGroup"].helpers({                                                                              // 46
  falseAtts: function falseAtts() {                                                                                    // 47
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 48
    if (this.value === false) {                                                                                        // 49
      atts.checked = "";                                                                                               // 50
    }                                                                                                                  // 51
    return atts;                                                                                                       // 52
  },                                                                                                                   // 53
  trueAtts: function trueAtts() {                                                                                      // 54
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 55
    if (this.value === true) {                                                                                         // 56
      atts.checked = "";                                                                                               // 57
    }                                                                                                                  // 58
    return atts;                                                                                                       // 59
  },                                                                                                                   // 60
  dsk: function () {                                                                                                   // 61
    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 62
  }                                                                                                                    // 63
});                                                                                                                    // 64
                                                                                                                       // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-select/template.boolean-select.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afBooleanSelect");                                                                               // 2
Template["afBooleanSelect"] = new Template("Template.afBooleanSelect", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 6
  }), "\n    ", Blaze.Each(function() {                                                                                // 7
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", HTML.OPTION(HTML.Attrs(function() {                                                             // 10
      return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                                // 11
    }), Blaze.View("lookup:..label", function() {                                                                      // 12
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 13
    })), "\n    " ];                                                                                                   // 14
  }), "\n  ");                                                                                                         // 15
}));                                                                                                                   // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-select/boolean-select.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("boolean-select", {                                                                              // 1
  template: "afBooleanSelect",                                                                                         // 2
  valueOut: function () {                                                                                              // 3
    var val = this.val();                                                                                              // 4
    if (val === "true") {                                                                                              // 5
      return true;                                                                                                     // 6
    } else if (val === "false") {                                                                                      // 7
      return false;                                                                                                    // 8
    }                                                                                                                  // 9
  },                                                                                                                   // 10
  valueConverters: {                                                                                                   // 11
    "string": function (val) {                                                                                         // 12
      if (val === true) {                                                                                              // 13
        return "TRUE";                                                                                                 // 14
      } else if (val === false) {                                                                                      // 15
        return "FALSE";                                                                                                // 16
      }                                                                                                                // 17
      return val;                                                                                                      // 18
    },                                                                                                                 // 19
    "stringArray": function (val) {                                                                                    // 20
      if (val === true) {                                                                                              // 21
        return ["TRUE"];                                                                                               // 22
      } else if (val === false) {                                                                                      // 23
        return ["FALSE"];                                                                                              // 24
      }                                                                                                                // 25
      return val;                                                                                                      // 26
    },                                                                                                                 // 27
    "number": function (val) {                                                                                         // 28
      if (val === true) {                                                                                              // 29
        return 1;                                                                                                      // 30
      } else if (val === false) {                                                                                      // 31
        return 0;                                                                                                      // 32
      }                                                                                                                // 33
      return val;                                                                                                      // 34
    },                                                                                                                 // 35
    "numberArray": function (val) {                                                                                    // 36
      if (val === true) {                                                                                              // 37
        return [1];                                                                                                    // 38
      } else if (val === false) {                                                                                      // 39
        return [0];                                                                                                    // 40
      }                                                                                                                // 41
      return val;                                                                                                      // 42
    }                                                                                                                  // 43
  },                                                                                                                   // 44
  contextAdjust: function (context) {                                                                                  // 45
    var atts = _.omit(context.atts, 'trueLabel', 'falseLabel', 'firstOption');                                         // 46
                                                                                                                       // 47
    // build items list                                                                                                // 48
    context.items = [                                                                                                  // 49
      {                                                                                                                // 50
        name: context.name,                                                                                            // 51
        value: "",                                                                                                     // 52
        // _id must be included because it is a special property that                                                  // 53
        // #each uses to track unique list items when adding and removing them                                         // 54
        // See https://github.com/meteor/meteor/issues/2174                                                            // 55
        _id: "",                                                                                                       // 56
        selected: (context.value !== false && context.value !== true),                                                 // 57
        label: context.atts.firstOption || "(Select One)",                                                             // 58
        atts: atts                                                                                                     // 59
      },                                                                                                               // 60
      {                                                                                                                // 61
        name: context.name,                                                                                            // 62
        value: "false",                                                                                                // 63
        // _id must be included because it is a special property that                                                  // 64
        // #each uses to track unique list items when adding and removing them                                         // 65
        // See https://github.com/meteor/meteor/issues/2174                                                            // 66
        _id: "false",                                                                                                  // 67
        selected: (context.value === false),                                                                           // 68
        label: context.atts.falseLabel || "False",                                                                     // 69
        atts: atts                                                                                                     // 70
      },                                                                                                               // 71
      {                                                                                                                // 72
        name: context.name,                                                                                            // 73
        value: "true",                                                                                                 // 74
        // _id must be included because it is a special property that                                                  // 75
        // #each uses to track unique list items when adding and removing them                                         // 76
        // See https://github.com/meteor/meteor/issues/2174                                                            // 77
        _id: "true",                                                                                                   // 78
        selected: (context.value === true),                                                                            // 79
        label: context.atts.trueLabel || "True",                                                                       // 80
        atts: atts                                                                                                     // 81
      }                                                                                                                // 82
    ];                                                                                                                 // 83
                                                                                                                       // 84
    return context;                                                                                                    // 85
  }                                                                                                                    // 86
});                                                                                                                    // 87
                                                                                                                       // 88
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/button/template.button.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputButton");                                                                                 // 2
Template["afInputButton"] = new Template("Template.afInputButton", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "button",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/button/button.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("button", {                                                                                      // 1
  template: "afInputButton"                                                                                            // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/color/template.color.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputColor");                                                                                  // 2
Template["afInputColor"] = new Template("Template.afInputColor", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "color",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/color/color.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("color", {                                                                                       // 1
  template: "afInputColor"                                                                                             // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/contenteditable/template.contenteditable.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afContenteditable");                                                                             // 2
Template["afContenteditable"] = new Template("Template.afContenteditable", (function() {                               // 3
  var view = this;                                                                                                     // 4
  return [ Blaze.View("lookup:getValue", function() {                                                                  // 5
    return Spacebars.mustache(view.lookup("getValue"), Spacebars.dot(view.lookup("."), "value"));                      // 6
  }), "\n  ", HTML.DIV(HTML.Attrs({                                                                                    // 7
    contenteditable: "true"                                                                                            // 8
  }, function() {                                                                                                      // 9
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 10
  })) ];                                                                                                               // 11
}));                                                                                                                   // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/contenteditable/contenteditable.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("contenteditable", {                                                                             // 1
  template: "afContenteditable",                                                                                       // 2
  valueOut: function () {                                                                                              // 3
    return this.html();                                                                                                // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    if (typeof context.atts['data-maxlength'] === "undefined" && typeof context.max === "number") {                    // 7
      context.atts['data-maxlength'] = context.max;                                                                    // 8
    }                                                                                                                  // 9
    return context;                                                                                                    // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
Template.afContenteditable.events({                                                                                    // 14
  'blur div[contenteditable=true]': function (event, template) {                                                       // 15
    template.$(event.target).change();                                                                                 // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
Template.afContenteditable.helpers({                                                                                   // 20
  getValue: function (value) {                                                                                         // 21
    if(Template.instance().view.isRendered){                                                                           // 22
      Template.instance().$('[contenteditable]').html(value);                                                          // 23
    }                                                                                                                  // 24
  }                                                                                                                    // 25
});                                                                                                                    // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/date/template.date.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDate");                                                                                   // 2
Template["afInputDate"] = new Template("Template.afInputDate", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "date",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/date/date.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("date", {                                                                                        // 1
  template: "afInputDate",                                                                                             // 2
  valueIn: function (val) {                                                                                            // 3
    //convert Date to string value                                                                                     // 4
    return (val instanceof Date) ? AutoForm.Utility.dateToDateStringUTC(val) : val;                                    // 5
  },                                                                                                                   // 6
  valueOut: function () {                                                                                              // 7
    var val = this.val();                                                                                              // 8
    if (AutoForm.Utility.isValidDateString(val)) {                                                                     // 9
      //Date constructor will interpret val as UTC and create                                                          // 10
      //date at mignight in the morning of val date in UTC time zone                                                   // 11
      return new Date(val);                                                                                            // 12
    } else {                                                                                                           // 13
      return null;                                                                                                     // 14
    }                                                                                                                  // 15
  },                                                                                                                   // 16
  valueConverters: {                                                                                                   // 17
    "string": function (val) {                                                                                         // 18
      return (val instanceof Date) ? AutoForm.Utility.dateToDateStringUTC(val) : val;                                  // 19
    },                                                                                                                 // 20
    "stringArray": function (val) {                                                                                    // 21
      if (val instanceof Date) {                                                                                       // 22
        return [AutoForm.Utility.dateToDateStringUTC(val)];                                                            // 23
      }                                                                                                                // 24
      return val;                                                                                                      // 25
    },                                                                                                                 // 26
    "number": function (val) {                                                                                         // 27
      return (val instanceof Date) ? val.getTime() : val;                                                              // 28
    },                                                                                                                 // 29
    "numberArray": function (val) {                                                                                    // 30
      if (val instanceof Date) {                                                                                       // 31
        return [val.getTime()];                                                                                        // 32
      }                                                                                                                // 33
      return val;                                                                                                      // 34
    },                                                                                                                 // 35
    "dateArray": function (val) {                                                                                      // 36
      if (val instanceof Date) {                                                                                       // 37
        return [val];                                                                                                  // 38
      }                                                                                                                // 39
      return val;                                                                                                      // 40
    }                                                                                                                  // 41
  },                                                                                                                   // 42
  contextAdjust: function (context) {                                                                                  // 43
    if (typeof context.atts.max === "undefined" && context.max instanceof Date) {                                      // 44
      context.atts.max = AutoForm.Utility.dateToDateStringUTC(context.max);                                            // 45
    }                                                                                                                  // 46
    if (typeof context.atts.min === "undefined" && context.min instanceof Date) {                                      // 47
      context.atts.min = AutoForm.Utility.dateToDateStringUTC(context.min);                                            // 48
    }                                                                                                                  // 49
    return context;                                                                                                    // 50
  }                                                                                                                    // 51
});                                                                                                                    // 52
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/datetime/template.datetime.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDateTime");                                                                               // 2
Template["afInputDateTime"] = new Template("Template.afInputDateTime", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "datetime",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/datetime/datetime.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("datetime", {                                                                                    // 1
  template: "afInputDateTime",                                                                                         // 2
  valueIn: function (val) {                                                                                            // 3
    //convert Date to string value                                                                                     // 4
    return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val): val;        // 5
  },                                                                                                                   // 6
  valueOut: function () {                                                                                              // 7
    var val = this.val();                                                                                              // 8
    val = (typeof val === "string") ? val.replace(/ /g, "T") : val;                                                    // 9
    if (AutoForm.Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString(val)) {                                     // 10
      //Date constructor will interpret val as UTC due to ending "Z"                                                   // 11
      return new Date(val);                                                                                            // 12
    } else {                                                                                                           // 13
      return null;                                                                                                     // 14
    }                                                                                                                  // 15
  },                                                                                                                   // 16
  valueConverters: {                                                                                                   // 17
    "string": function (val) {                                                                                         // 18
      return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val) : val;     // 19
    },                                                                                                                 // 20
    "stringArray": function (val) {                                                                                    // 21
      if (val instanceof Date) {                                                                                       // 22
        return [AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];                               // 23
      }                                                                                                                // 24
      return val;                                                                                                      // 25
    },                                                                                                                 // 26
    "number": function (val) {                                                                                         // 27
      return (val instanceof Date) ? val.getTime() : val;                                                              // 28
    },                                                                                                                 // 29
    "numberArray": function (val) {                                                                                    // 30
      if (val instanceof Date) {                                                                                       // 31
        return [val.getTime()];                                                                                        // 32
      }                                                                                                                // 33
      return val;                                                                                                      // 34
    },                                                                                                                 // 35
    "dateArray": function (val) {                                                                                      // 36
      if (val instanceof Date) {                                                                                       // 37
        return [val];                                                                                                  // 38
      }                                                                                                                // 39
      return val;                                                                                                      // 40
    }                                                                                                                  // 41
  },                                                                                                                   // 42
  contextAdjust: function (context) {                                                                                  // 43
    if (typeof context.atts.max === "undefined" && context.max instanceof Date) {                                      // 44
      context.atts.max = AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.max);               // 45
    }                                                                                                                  // 46
    if (typeof context.atts.min === "undefined" && context.min instanceof Date) {                                      // 47
      context.atts.min = AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.min);               // 48
    }                                                                                                                  // 49
    return context;                                                                                                    // 50
  }                                                                                                                    // 51
});                                                                                                                    // 52
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/datetime-local/template.datetime-local.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDateTimeLocal");                                                                          // 2
Template["afInputDateTimeLocal"] = new Template("Template.afInputDateTimeLocal", (function() {                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "datetime-local",                                                                                            // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/datetime-local/datetime-local.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("datetime-local", {                                                                              // 1
  template: "afInputDateTimeLocal",                                                                                    // 2
  valueIn: function (val, atts) {                                                                                      // 3
    //convert Date to string value                                                                                     // 4
    return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(val, atts.timezoneId) : val;
  },                                                                                                                   // 6
  valueOut: function () {                                                                                              // 7
    var val = this.val();                                                                                              // 8
    val = (typeof val === "string") ? val.replace(/ /g, "T") : val;                                                    // 9
    if (AutoForm.Utility.isValidNormalizedLocalDateAndTimeString(val)) {                                               // 10
      var timezoneId = this.attr("data-timezone-id");                                                                  // 11
      // default is local, but if there's a timezoneId, we use that                                                    // 12
      if (typeof timezoneId === "string") {                                                                            // 13
        if (typeof moment.tz !== "function") {                                                                         // 14
          throw new Error("If you specify a timezoneId, make sure that you've added a moment-timezone package to your app");
        }                                                                                                              // 16
        return moment.tz(val, timezoneId).toDate();                                                                    // 17
      } else {                                                                                                         // 18
        return moment(val).toDate();                                                                                   // 19
      }                                                                                                                // 20
    } else {                                                                                                           // 21
      return this.val();                                                                                               // 22
    }                                                                                                                  // 23
  },                                                                                                                   // 24
  valueConverters: {                                                                                                   // 25
    "string": function (val) {                                                                                         // 26
      return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(val, this.attr("data-timezone-id")) : val;
    },                                                                                                                 // 28
    "stringArray": function (val) {                                                                                    // 29
      if (val instanceof Date) {                                                                                       // 30
        return [AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(val, this.attr("data-timezone-id"))];          // 31
      }                                                                                                                // 32
      return val;                                                                                                      // 33
    },                                                                                                                 // 34
    "number": function (val) {                                                                                         // 35
      return (val instanceof Date) ? val.getTime() : val;                                                              // 36
    },                                                                                                                 // 37
    "numberArray": function (val) {                                                                                    // 38
      if (val instanceof Date) {                                                                                       // 39
        return [val.getTime()];                                                                                        // 40
      }                                                                                                                // 41
      return val;                                                                                                      // 42
    },                                                                                                                 // 43
    "dateArray": function (val) {                                                                                      // 44
      if (val instanceof Date) {                                                                                       // 45
        return [val];                                                                                                  // 46
      }                                                                                                                // 47
      return val;                                                                                                      // 48
    }                                                                                                                  // 49
  },                                                                                                                   // 50
  contextAdjust: function (context) {                                                                                  // 51
    if (typeof context.atts.max === "undefined" && context.max instanceof Date) {                                      // 52
      context.atts.max = AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(context.max, context.atts.timezoneId);
    }                                                                                                                  // 54
    if (typeof context.atts.min === "undefined" && context.min instanceof Date) {                                      // 55
      context.atts.min = AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(context.min, context.atts.timezoneId);
    }                                                                                                                  // 57
    if (context.atts.timezoneId) {                                                                                     // 58
      context.atts["data-timezone-id"] = context.atts.timezoneId;                                                      // 59
    }                                                                                                                  // 60
    delete context.atts.timezoneId;                                                                                    // 61
    return context;                                                                                                    // 62
  }                                                                                                                    // 63
});                                                                                                                    // 64
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/email/template.email.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputEmail");                                                                                  // 2
Template["afInputEmail"] = new Template("Template.afInputEmail", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "email",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/email/email.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("email", {                                                                                       // 1
  template: "afInputEmail",                                                                                            // 2
  contextAdjust: function (context) {                                                                                  // 3
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 4
      context.atts.maxlength = context.max;                                                                            // 5
    }                                                                                                                  // 6
    return context;                                                                                                    // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/file/template.file.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputFile");                                                                                   // 2
Template["afInputFile"] = new Template("Template.afInputFile", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "file",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/file/file.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("file", {                                                                                        // 1
  template: "afInputFile"                                                                                              // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/hidden/template.hidden.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputHidden");                                                                                 // 2
Template["afInputHidden"] = new Template("Template.afInputHidden", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "hidden",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/hidden/hidden.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("hidden", {                                                                                      // 1
  template: "afInputHidden",                                                                                           // 2
  isHidden: true,                                                                                                      // 3
  valueOut: function () {                                                                                              // 4
    return this.val();                                                                                                 // 5
  },                                                                                                                   // 6
  valueConverters: {                                                                                                   // 7
    "stringArray": function (val) {                                                                                    // 8
      if (typeof val === "string") {                                                                                   // 9
        val = val.split(",");                                                                                          // 10
        return _.map(val, function (item) {                                                                            // 11
          return $.trim(item);                                                                                         // 12
        });                                                                                                            // 13
      }                                                                                                                // 14
      return val;                                                                                                      // 15
    },                                                                                                                 // 16
    "number": AutoForm.Utility.stringToNumber,                                                                         // 17
    "numberArray": function (val) {                                                                                    // 18
      if (typeof val === "string") {                                                                                   // 19
        val = val.split(",");                                                                                          // 20
        return _.map(val, function (item) {                                                                            // 21
          item = $.trim(item);                                                                                         // 22
          return AutoForm.Utility.stringToNumber(item);                                                                // 23
        });                                                                                                            // 24
      }                                                                                                                // 25
      return val;                                                                                                      // 26
    },                                                                                                                 // 27
    "boolean": AutoForm.Utility.stringToBool,                                                                          // 28
    "booleanArray": function (val) {                                                                                   // 29
      if (typeof val === "string") {                                                                                   // 30
        val = val.split(",");                                                                                          // 31
        return _.map(val, function (item) {                                                                            // 32
          item = $.trim(item);                                                                                         // 33
          return AutoForm.Utility.stringToBool(item);                                                                  // 34
        });                                                                                                            // 35
      }                                                                                                                // 36
      return val;                                                                                                      // 37
    },                                                                                                                 // 38
    "date": AutoForm.Utility.stringToDate,                                                                             // 39
    "dateArray": function (val) {                                                                                      // 40
      if (typeof val === "string") {                                                                                   // 41
        val = val.split(",");                                                                                          // 42
        return _.map(val, function (item) {                                                                            // 43
          item = $.trim(item);                                                                                         // 44
          return AutoForm.Utility.stringToDate(item);                                                                  // 45
        });                                                                                                            // 46
      }                                                                                                                // 47
      return val;                                                                                                      // 48
    }                                                                                                                  // 49
  }                                                                                                                    // 50
});                                                                                                                    // 51
                                                                                                                       // 52
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/image/template.image.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputImage");                                                                                  // 2
Template["afInputImage"] = new Template("Template.afInputImage", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "image",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/image/image.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("image", {                                                                                       // 1
  template: "afInputImage"                                                                                             // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/month/template.month.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputMonth");                                                                                  // 2
Template["afInputMonth"] = new Template("Template.afInputMonth", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "month",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/month/month.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("month", {                                                                                       // 1
  template: "afInputMonth",                                                                                            // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": function (val) {                                                                                    // 4
      if (typeof val === "string" && val.length > 0) {                                                                 // 5
        return [val];                                                                                                  // 6
      }                                                                                                                // 7
      return val;                                                                                                      // 8
    }                                                                                                                  // 9
  }                                                                                                                    // 10
});                                                                                                                    // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/number/template.number.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputNumber");                                                                                 // 2
Template["afInputNumber"] = new Template("Template.afInputNumber", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "number",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/number/number.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("number", {                                                                                      // 1
  template: "afInputNumber",                                                                                           // 2
  valueOut: function () {                                                                                              // 3
    return AutoForm.Utility.stringToNumber(this.val());                                                                // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "string": function (val) {                                                                                         // 7
      if (typeof val === "number") {                                                                                   // 8
        return val.toString();                                                                                         // 9
      }                                                                                                                // 10
      return val;                                                                                                      // 11
    },                                                                                                                 // 12
    "stringArray": function (val) {                                                                                    // 13
      if (typeof val === "number") {                                                                                   // 14
        return [val.toString()];                                                                                       // 15
      }                                                                                                                // 16
      return val;                                                                                                      // 17
    },                                                                                                                 // 18
    "numberArray": function (val) {                                                                                    // 19
      if (typeof val === "number") {                                                                                   // 20
        return [val];                                                                                                  // 21
      }                                                                                                                // 22
      return val;                                                                                                      // 23
    },                                                                                                                 // 24
    "boolean": function (val) {                                                                                        // 25
      if (val === 0) {                                                                                                 // 26
        return false;                                                                                                  // 27
      } else if (val === 1) {                                                                                          // 28
        return true;                                                                                                   // 29
      }                                                                                                                // 30
      return val;                                                                                                      // 31
    },                                                                                                                 // 32
    "booleanArray": function (val) {                                                                                   // 33
      if (val === 0) {                                                                                                 // 34
        return [false];                                                                                                // 35
      } else if (val === 1) {                                                                                          // 36
        return [true];                                                                                                 // 37
      }                                                                                                                // 38
      return val;                                                                                                      // 39
    }                                                                                                                  // 40
  },                                                                                                                   // 41
  contextAdjust: function (context) {                                                                                  // 42
    if (typeof context.atts.max === "undefined" && typeof context.max === "number") {                                  // 43
      context.atts.max = context.max;                                                                                  // 44
    }                                                                                                                  // 45
    if (typeof context.atts.min === "undefined" && typeof context.min === "number") {                                  // 46
      context.atts.min = context.min;                                                                                  // 47
    }                                                                                                                  // 48
    if (typeof context.atts.step === "undefined" && context.decimal) {                                                 // 49
      context.atts.step = '0.01';                                                                                      // 50
    }                                                                                                                  // 51
    return context;                                                                                                    // 52
  }                                                                                                                    // 53
});                                                                                                                    // 54
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/password/template.password.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputPassword");                                                                               // 2
Template["afInputPassword"] = new Template("Template.afInputPassword", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "password",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/password/password.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("password", {                                                                                    // 1
  template: "afInputPassword",                                                                                         // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": function (val) {                                                                                    // 4
      if (typeof val === "string" && val.length > 0) {                                                                 // 5
        return [val];                                                                                                  // 6
      }                                                                                                                // 7
      return val;                                                                                                      // 8
    }                                                                                                                  // 9
  },                                                                                                                   // 10
  contextAdjust: function (context) {                                                                                  // 11
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 12
      context.atts.maxlength = context.max;                                                                            // 13
    }                                                                                                                  // 14
    return context;                                                                                                    // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/radio/template.radio.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadio");                                                                                       // 2
Template["afRadio"] = new Template("Template.afRadio", (function() {                                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5
    type: "checkbox",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("atts"));                                                                // 11
  })), " ", Blaze.View("lookup:afFieldLabelText", function() {                                                         // 12
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 13
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 14
    }));                                                                                                               // 15
  })));                                                                                                                // 16
}));                                                                                                                   // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/radio/radio.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("radio", {                                                                                       // 1
  template: "afRadio",                                                                                                 // 2
  valueOut: function () {                                                                                              // 3
    if (this.is(":checked")) {                                                                                         // 4
      return this.val();                                                                                               // 5
    }                                                                                                                  // 6
  },                                                                                                                   // 7
  valueConverters: {                                                                                                   // 8
    "stringArray": function (val) {                                                                                    // 9
      if (typeof val === "string" && val.length > 0) {                                                                 // 10
        return [val];                                                                                                  // 11
      }                                                                                                                // 12
      return val;                                                                                                      // 13
    }                                                                                                                  // 14
  }                                                                                                                    // 15
});                                                                                                                    // 16
                                                                                                                       // 17
Template["afRadio"].helpers({                                                                                          // 18
  atts: function selectedAttsAdjust() {                                                                                // 19
    var atts = _.clone(this.atts);                                                                                     // 20
    if (this.selected) {                                                                                               // 21
      atts.checked = "";                                                                                               // 22
    }                                                                                                                  // 23
    return atts;                                                                                                       // 24
  }                                                                                                                    // 25
});                                                                                                                    // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/range/template.range.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputRange");                                                                                  // 2
Template["afInputRange"] = new Template("Template.afInputRange", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "range",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/range/range.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("range", {                                                                                       // 1
  template: "afInputRange",                                                                                            // 2
  valueOut: function () {                                                                                              // 3
    return AutoForm.Utility.stringToNumber(this.val());                                                                // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "string": function (val) {                                                                                         // 7
      if (typeof val === "number") {                                                                                   // 8
        return val.toString();                                                                                         // 9
      }                                                                                                                // 10
      return val;                                                                                                      // 11
    },                                                                                                                 // 12
    "stringArray": function (val) {                                                                                    // 13
      if (typeof val === "number") {                                                                                   // 14
        return [val.toString()];                                                                                       // 15
      }                                                                                                                // 16
      return val;                                                                                                      // 17
    },                                                                                                                 // 18
    "numberArray": function (val) {                                                                                    // 19
      if (typeof val === "number") {                                                                                   // 20
        return [val];                                                                                                  // 21
      }                                                                                                                // 22
      return val;                                                                                                      // 23
    },                                                                                                                 // 24
    "boolean": function (val) {                                                                                        // 25
      if (val === 0) {                                                                                                 // 26
        return false;                                                                                                  // 27
      } else if (val === 1) {                                                                                          // 28
        return true;                                                                                                   // 29
      }                                                                                                                // 30
      return val;                                                                                                      // 31
    },                                                                                                                 // 32
    "booleanArray": function (val) {                                                                                   // 33
      if (val === 0) {                                                                                                 // 34
        return [false];                                                                                                // 35
      } else if (val === 1) {                                                                                          // 36
        return [true];                                                                                                 // 37
      }                                                                                                                // 38
      return val;                                                                                                      // 39
    }                                                                                                                  // 40
  }                                                                                                                    // 41
});                                                                                                                    // 42
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/reset/template.reset.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputReset");                                                                                  // 2
Template["afInputReset"] = new Template("Template.afInputReset", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "reset",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/reset/reset.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("reset", {                                                                                       // 1
  template: "afInputReset"                                                                                             // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/search/template.search.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputSearch");                                                                                 // 2
Template["afInputSearch"] = new Template("Template.afInputSearch", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "search",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/search/search.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("search", {                                                                                      // 1
  template: "afInputSearch",                                                                                           // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": function (val) {                                                                                    // 4
      if (typeof val === "string" && val.length > 0) {                                                                 // 5
        return [val];                                                                                                  // 6
      }                                                                                                                // 7
      return val;                                                                                                      // 8
    }                                                                                                                  // 9
  },                                                                                                                   // 10
  contextAdjust: function (context) {                                                                                  // 11
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 12
      context.atts.maxlength = context.max;                                                                            // 13
    }                                                                                                                  // 14
    return context;                                                                                                    // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select/template.select.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afSelect");                                                                                      // 2
Template["afSelect"] = new Template("Template.afSelect", (function() {                                                 // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 6
  }), "\n    ", Blaze.Each(function() {                                                                                // 7
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 8
  }, function() {                                                                                                      // 9
    return [ "\n      ", Blaze.If(function() {                                                                         // 10
      return Spacebars.call(Spacebars.dot(view.lookup("."), "optgroup"));                                              // 11
    }, function() {                                                                                                    // 12
      return [ "\n        ", HTML.OPTGROUP({                                                                           // 13
        label: function() {                                                                                            // 14
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "optgroup"));                                      // 15
        }                                                                                                              // 16
      }, "\n        ", Blaze.Each(function() {                                                                         // 17
        return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                               // 18
      }, function() {                                                                                                  // 19
        return [ "\n        ", HTML.OPTION(HTML.Attrs(function() {                                                     // 20
          return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                            // 21
        }), Blaze.View("lookup:..label", function() {                                                                  // 22
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                         // 23
        })), "\n        " ];                                                                                           // 24
      }), "\n        "), "\n      " ];                                                                                 // 25
    }, function() {                                                                                                    // 26
      return [ "\n        ", HTML.OPTION(HTML.Attrs(function() {                                                       // 27
        return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                              // 28
      }), Blaze.View("lookup:..label", function() {                                                                    // 29
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                           // 30
      })), "\n      " ];                                                                                               // 31
    }), "\n    " ];                                                                                                    // 32
  }), "\n  ");                                                                                                         // 33
}));                                                                                                                   // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select/select.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select", {                                                                                      // 1
  template: "afSelect",                                                                                                // 2
  valueOut: function () {                                                                                              // 3
    return this.val();                                                                                                 // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "stringArray": function (val) {                                                                                    // 7
      if (typeof val === "string") {                                                                                   // 8
        val = val.split(",");                                                                                          // 9
        return _.map(val, function (item) {                                                                            // 10
          return $.trim(item);                                                                                         // 11
        });                                                                                                            // 12
      }                                                                                                                // 13
      return val;                                                                                                      // 14
    },                                                                                                                 // 15
    "number": AutoForm.Utility.stringToNumber,                                                                         // 16
    "numberArray": function (val) {                                                                                    // 17
      if (typeof val === "string") {                                                                                   // 18
        val = val.split(",");                                                                                          // 19
        return _.map(val, function (item) {                                                                            // 20
          item = $.trim(item);                                                                                         // 21
          return AutoForm.Utility.stringToNumber(item);                                                                // 22
        });                                                                                                            // 23
      }                                                                                                                // 24
      return val;                                                                                                      // 25
    },                                                                                                                 // 26
    "boolean": AutoForm.Utility.stringToBool,                                                                          // 27
    "booleanArray": function (val) {                                                                                   // 28
      if (typeof val === "string") {                                                                                   // 29
        val = val.split(",");                                                                                          // 30
        return _.map(val, function (item) {                                                                            // 31
          item = $.trim(item);                                                                                         // 32
          return AutoForm.Utility.stringToBool(item);                                                                  // 33
        });                                                                                                            // 34
      }                                                                                                                // 35
      return val;                                                                                                      // 36
    },                                                                                                                 // 37
    "date": AutoForm.Utility.stringToDate,                                                                             // 38
    "dateArray": function (val) {                                                                                      // 39
      if (typeof val === "string") {                                                                                   // 40
        val = val.split(",");                                                                                          // 41
        return _.map(val, function (item) {                                                                            // 42
          item = $.trim(item);                                                                                         // 43
          return AutoForm.Utility.stringToDate(item);                                                                  // 44
        });                                                                                                            // 45
      }                                                                                                                // 46
      return val;                                                                                                      // 47
    }                                                                                                                  // 48
  },                                                                                                                   // 49
  contextAdjust: function (context) {                                                                                  // 50
    //can fix issues with some browsers selecting the firstOption instead of the selected option                       // 51
    context.atts.autocomplete = "off";                                                                                 // 52
                                                                                                                       // 53
    var itemAtts = _.omit(context.atts, 'firstOption');                                                                // 54
    var firstOption = context.atts.firstOption;                                                                        // 55
                                                                                                                       // 56
    // build items list                                                                                                // 57
    context.items = [];                                                                                                // 58
                                                                                                                       // 59
    // If a firstOption was provided, add that to the items list first                                                 // 60
    if (firstOption !== false) {                                                                                       // 61
      context.items.push({                                                                                             // 62
        name: context.name,                                                                                            // 63
        label: (typeof firstOption === "string" ? firstOption : "(Select One)"),                                       // 64
        value: "",                                                                                                     // 65
        // _id must be included because it is a special property that                                                  // 66
        // #each uses to track unique list items when adding and removing them                                         // 67
        // See https://github.com/meteor/meteor/issues/2174                                                            // 68
        //                                                                                                             // 69
        // Setting this to an empty string caused problems if option with value                                        // 70
        // 1 was in the options list because Spacebars evaluates "" to 1 and                                           // 71
        // considers that a duplicate.                                                                                 // 72
        // See https://github.com/aldeed/meteor-autoform/issues/656                                                    // 73
        _id: "AUTOFORM_EMPTY_FIRST_OPTION",                                                                            // 74
        selected: false,                                                                                               // 75
        atts: itemAtts                                                                                                 // 76
      });                                                                                                              // 77
    }                                                                                                                  // 78
                                                                                                                       // 79
    // Add all defined options                                                                                         // 80
    _.each(context.selectOptions, function(opt) {                                                                      // 81
      if (opt.optgroup) {                                                                                              // 82
        var subItems = _.map(opt.options, function(subOpt) {                                                           // 83
          return {                                                                                                     // 84
            name: context.name,                                                                                        // 85
            label: subOpt.label,                                                                                       // 86
            value: subOpt.value,                                                                                       // 87
            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 88
            // _id must be included because it is a special property that                                              // 89
            // #each uses to track unique list items when adding and removing them                                     // 90
            // See https://github.com/meteor/meteor/issues/2174                                                        // 91
            //                                                                                                         // 92
            // The toString() is necessary because otherwise Spacebars evaluates                                       // 93
            // any string to 1 if the other values are numbers, and then considers                                     // 94
            // that a duplicate.                                                                                       // 95
            // See https://github.com/aldeed/meteor-autoform/issues/656                                                // 96
            _id: subOpt.value.toString(),                                                                              // 97
            selected: (subOpt.value === context.value),                                                                // 98
            atts: itemAtts                                                                                             // 99
          };                                                                                                           // 100
        });                                                                                                            // 101
        context.items.push({                                                                                           // 102
          optgroup: opt.optgroup,                                                                                      // 103
          items: subItems                                                                                              // 104
        });                                                                                                            // 105
      } else {                                                                                                         // 106
        context.items.push({                                                                                           // 107
          name: context.name,                                                                                          // 108
          label: opt.label,                                                                                            // 109
          value: opt.value,                                                                                            // 110
          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 111
          // _id must be included because it is a special property that                                                // 112
          // #each uses to track unique list items when adding and removing them                                       // 113
          // See https://github.com/meteor/meteor/issues/2174                                                          // 114
          //                                                                                                           // 115
          // The toString() is necessary because otherwise Spacebars evaluates                                         // 116
          // any string to 1 if the other values are numbers, and then considers                                       // 117
          // that a duplicate.                                                                                         // 118
          // See https://github.com/aldeed/meteor-autoform/issues/656                                                  // 119
          _id: opt.value.toString(),                                                                                   // 120
          selected: (opt.value === context.value),                                                                     // 121
          atts: itemAtts                                                                                               // 122
        });                                                                                                            // 123
      }                                                                                                                // 124
    });                                                                                                                // 125
                                                                                                                       // 126
    return context;                                                                                                    // 127
  }                                                                                                                    // 128
});                                                                                                                    // 129
                                                                                                                       // 130
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-checkbox/template.select-checkbox.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckboxGroup");                                                                               // 2
Template["afCheckboxGroup"] = new Template("Template.afCheckboxGroup", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-checkbox-group"                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n      ", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                   // 12
      type: "checkbox",                                                                                                // 13
      value: function() {                                                                                              // 14
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 15
      }                                                                                                                // 16
    }, function() {                                                                                                    // 17
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 18
    })), " ", Blaze.View("lookup:..label", function() {                                                                // 19
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 20
    }))), "\n    " ];                                                                                                  // 21
  }), "\n  ");                                                                                                         // 22
}));                                                                                                                   // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-checkbox/select-checkbox.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-checkbox", {                                                                             // 1
  template: "afCheckboxGroup",                                                                                         // 2
  valueIsArray: true,                                                                                                  // 3
  valueOut: function () {                                                                                              // 4
    var val = [];                                                                                                      // 5
    this.find('input[type=checkbox]').each(function () {                                                               // 6
      if ($(this).is(":checked")) {                                                                                    // 7
        val.push($(this).val());                                                                                       // 8
      }                                                                                                                // 9
    });                                                                                                                // 10
    return val;                                                                                                        // 11
  },                                                                                                                   // 12
  contextAdjust: function (context) {                                                                                  // 13
    var itemAtts = _.omit(context.atts);                                                                               // 14
                                                                                                                       // 15
    // build items list                                                                                                // 16
    context.items = [];                                                                                                // 17
                                                                                                                       // 18
    // Add all defined options                                                                                         // 19
    _.each(context.selectOptions, function(opt) {                                                                      // 20
      context.items.push({                                                                                             // 21
        name: context.name,                                                                                            // 22
        label: opt.label,                                                                                              // 23
        value: opt.value,                                                                                              // 24
        // _id must be included because it is a special property that                                                  // 25
        // #each uses to track unique list items when adding and removing them                                         // 26
        // See https://github.com/meteor/meteor/issues/2174                                                            // 27
        _id: opt.value,                                                                                                // 28
        selected: (_.contains(context.value, opt.value)),                                                              // 29
        atts: itemAtts                                                                                                 // 30
      });                                                                                                              // 31
    });                                                                                                                // 32
                                                                                                                       // 33
    return context;                                                                                                    // 34
  }                                                                                                                    // 35
});                                                                                                                    // 36
                                                                                                                       // 37
Template["afCheckboxGroup"].helpers({                                                                                  // 38
  atts: function selectedAttsAdjust() {                                                                                // 39
    var atts = _.clone(this.atts);                                                                                     // 40
    if (this.selected) {                                                                                               // 41
      atts.checked = "";                                                                                               // 42
    }                                                                                                                  // 43
    // remove data-schema-key attribute because we put it                                                              // 44
    // on the entire group                                                                                             // 45
    delete atts["data-schema-key"];                                                                                    // 46
    return atts;                                                                                                       // 47
  },                                                                                                                   // 48
  dsk: function dsk() {                                                                                                // 49
    return {                                                                                                           // 50
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 51
    }                                                                                                                  // 52
  }                                                                                                                    // 53
});                                                                                                                    // 54
                                                                                                                       // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckboxGroupInline");                                                                         // 2
Template["afCheckboxGroupInline"] = new Template("Template.afCheckboxGroupInline", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-checkbox-group"                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                            // 12
      type: "checkbox",                                                                                                // 13
      value: function() {                                                                                              // 14
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 15
      }                                                                                                                // 16
    }, function() {                                                                                                    // 17
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 18
    })), " ", Blaze.View("lookup:..label", function() {                                                                // 19
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 20
    })), "\n    " ];                                                                                                   // 21
  }), "\n  ");                                                                                                         // 22
}));                                                                                                                   // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-checkbox-inline/select-checkbox-inline.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-checkbox-inline", {                                                                      // 1
  template: "afCheckboxGroupInline",                                                                                   // 2
  valueIsArray: true,                                                                                                  // 3
  valueOut: function () {                                                                                              // 4
    var val = [];                                                                                                      // 5
    this.find('input[type=checkbox]').each(function () {                                                               // 6
      if ($(this).is(":checked")) {                                                                                    // 7
        val.push($(this).val());                                                                                       // 8
      }                                                                                                                // 9
    });                                                                                                                // 10
    return val;                                                                                                        // 11
  },                                                                                                                   // 12
  contextAdjust: function (context) {                                                                                  // 13
    var itemAtts = _.omit(context.atts);                                                                               // 14
                                                                                                                       // 15
    // build items list                                                                                                // 16
    context.items = [];                                                                                                // 17
                                                                                                                       // 18
    // Add all defined options                                                                                         // 19
    _.each(context.selectOptions, function(opt) {                                                                      // 20
      context.items.push({                                                                                             // 21
        name: context.name,                                                                                            // 22
        label: opt.label,                                                                                              // 23
        value: opt.value,                                                                                              // 24
        // _id must be included because it is a special property that                                                  // 25
        // #each uses to track unique list items when adding and removing them                                         // 26
        // See https://github.com/meteor/meteor/issues/2174                                                            // 27
        _id: opt.value,                                                                                                // 28
        selected: (_.contains(context.value, opt.value)),                                                              // 29
        atts: itemAtts                                                                                                 // 30
      });                                                                                                              // 31
    });                                                                                                                // 32
                                                                                                                       // 33
    return context;                                                                                                    // 34
  }                                                                                                                    // 35
});                                                                                                                    // 36
                                                                                                                       // 37
Template["afCheckboxGroupInline"].helpers({                                                                            // 38
  atts: function selectedAttsAdjust() {                                                                                // 39
    var atts = _.clone(this.atts);                                                                                     // 40
    if (this.selected) {                                                                                               // 41
      atts.checked = "";                                                                                               // 42
    }                                                                                                                  // 43
    // remove data-schema-key attribute because we put it                                                              // 44
    // on the entire group                                                                                             // 45
    delete atts["data-schema-key"];                                                                                    // 46
    return atts;                                                                                                       // 47
  },                                                                                                                   // 48
  dsk: function dsk() {                                                                                                // 49
    return {                                                                                                           // 50
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 51
    }                                                                                                                  // 52
  }                                                                                                                    // 53
});                                                                                                                    // 54
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-multiple/template.select-multiple.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afSelectMultiple");                                                                              // 2
Template["afSelectMultiple"] = new Template("Template.afSelectMultiple", (function() {                                 // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs({                                                                                      // 5
    multiple: ""                                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n      ", Blaze.If(function() {                                                                         // 12
      return Spacebars.call(Spacebars.dot(view.lookup("."), "optgroup"));                                              // 13
    }, function() {                                                                                                    // 14
      return [ "\n        ", HTML.OPTGROUP({                                                                           // 15
        label: function() {                                                                                            // 16
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "optgroup"));                                      // 17
        }                                                                                                              // 18
      }, "\n        ", Blaze.Each(function() {                                                                         // 19
        return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                               // 20
      }, function() {                                                                                                  // 21
        return [ "\n        ", HTML.OPTION(HTML.Attrs(function() {                                                     // 22
          return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                            // 23
        }), Blaze.View("lookup:..label", function() {                                                                  // 24
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                         // 25
        })), "\n        " ];                                                                                           // 26
      }), "\n        "), "\n      " ];                                                                                 // 27
    }, function() {                                                                                                    // 28
      return [ "\n        ", HTML.OPTION(HTML.Attrs(function() {                                                       // 29
        return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                              // 30
      }), Blaze.View("lookup:..label", function() {                                                                    // 31
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                           // 32
      })), "\n      " ];                                                                                               // 33
    }), "\n    " ];                                                                                                    // 34
  }), "\n  ");                                                                                                         // 35
}));                                                                                                                   // 36
                                                                                                                       // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-multiple/select-multiple.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-multiple", {                                                                             // 1
  template: "afSelectMultiple",                                                                                        // 2
  valueIsArray: true,                                                                                                  // 3
  valueOut: function () {                                                                                              // 4
    return AutoForm.Utility.getSelectValues(this[0]);                                                                  // 5
  },                                                                                                                   // 6
  contextAdjust: function (context) {                                                                                  // 7
    // build items list                                                                                                // 8
    context.items = _.map(context.selectOptions, function(opt) {                                                       // 9
      if (opt.optgroup) {                                                                                              // 10
        var subItems = _.map(opt.options, function(subOpt) {                                                           // 11
          return {                                                                                                     // 12
            name: context.name,                                                                                        // 13
            label: subOpt.label,                                                                                       // 14
            value: subOpt.value,                                                                                       // 15
            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 16
            // _id must be included because it is a special property that                                              // 17
            // #each uses to track unique list items when adding and removing them                                     // 18
            // See https://github.com/meteor/meteor/issues/2174                                                        // 19
            _id: subOpt.value,                                                                                         // 20
            selected: _.contains(context.value, subOpt.value),                                                         // 21
            atts: context.atts                                                                                         // 22
          };                                                                                                           // 23
        });                                                                                                            // 24
        return {                                                                                                       // 25
          optgroup: opt.optgroup,                                                                                      // 26
          items: subItems                                                                                              // 27
        };                                                                                                             // 28
      } else {                                                                                                         // 29
        return {                                                                                                       // 30
          name: context.name,                                                                                          // 31
          label: opt.label,                                                                                            // 32
          value: opt.value,                                                                                            // 33
          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 34
          // _id must be included because it is a special property that                                                // 35
          // #each uses to track unique list items when adding and removing them                                       // 36
          // See https://github.com/meteor/meteor/issues/2174                                                          // 37
          _id: opt.value,                                                                                              // 38
          selected: _.contains(context.value, opt.value),                                                              // 39
          atts: context.atts                                                                                           // 40
        };                                                                                                             // 41
      }                                                                                                                // 42
    });                                                                                                                // 43
                                                                                                                       // 44
    return context;                                                                                                    // 45
  }                                                                                                                    // 46
});                                                                                                                    // 47
                                                                                                                       // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-radio/template.select-radio.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadioGroup");                                                                                  // 2
Template["afRadioGroup"] = new Template("Template.afRadioGroup", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-radio-group"                                                                                          // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n  ", Blaze.Each(function() {                                                                                  // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                     // 12
      type: "radio",                                                                                                   // 13
      value: function() {                                                                                              // 14
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 15
      }                                                                                                                // 16
    }, function() {                                                                                                    // 17
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 18
    })), " ", Blaze.View("lookup:..label", function() {                                                                // 19
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 20
    }))), "\n  " ];                                                                                                    // 21
  }), "\n  ");                                                                                                         // 22
}));                                                                                                                   // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-radio/select-radio.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-radio", {                                                                                // 1
  template: "afRadioGroup",                                                                                            // 2
  valueOut: function () {                                                                                              // 3
    return this.find('input[type=radio]:checked').val();                                                               // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    var itemAtts = _.omit(context.atts);                                                                               // 7
                                                                                                                       // 8
    // build items list                                                                                                // 9
    context.items = [];                                                                                                // 10
                                                                                                                       // 11
    // Add all defined options                                                                                         // 12
    _.each(context.selectOptions, function(opt) {                                                                      // 13
      context.items.push({                                                                                             // 14
        name: context.name,                                                                                            // 15
        label: opt.label,                                                                                              // 16
        value: opt.value,                                                                                              // 17
        // _id must be included because it is a special property that                                                  // 18
        // #each uses to track unique list items when adding and removing them                                         // 19
        // See https://github.com/meteor/meteor/issues/2174                                                            // 20
        _id: opt.value,                                                                                                // 21
        selected: (opt.value === context.value),                                                                       // 22
        atts: itemAtts                                                                                                 // 23
      });                                                                                                              // 24
    });                                                                                                                // 25
                                                                                                                       // 26
    return context;                                                                                                    // 27
  }                                                                                                                    // 28
});                                                                                                                    // 29
                                                                                                                       // 30
Template["afRadioGroup"].helpers({                                                                                     // 31
  atts: function selectedAttsAdjust() {                                                                                // 32
    var atts = _.clone(this.atts);                                                                                     // 33
    if (this.selected) {                                                                                               // 34
      atts.checked = "";                                                                                               // 35
    }                                                                                                                  // 36
    // remove data-schema-key attribute because we put it                                                              // 37
    // on the entire group                                                                                             // 38
    delete atts["data-schema-key"];                                                                                    // 39
    return atts;                                                                                                       // 40
  },                                                                                                                   // 41
  dsk: function dsk() {                                                                                                // 42
    return {                                                                                                           // 43
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
});                                                                                                                    // 47
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-radio-inline/template.select-radio-inline.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadioGroupInline");                                                                            // 2
Template["afRadioGroupInline"] = new Template("Template.afRadioGroupInline", (function() {                             // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-radio-group"                                                                                          // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n  ", Blaze.Each(function() {                                                                                  // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                              // 12
      type: "radio",                                                                                                   // 13
      value: function() {                                                                                              // 14
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 15
      }                                                                                                                // 16
    }, function() {                                                                                                    // 17
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 18
    })), " ", Blaze.View("lookup:..label", function() {                                                                // 19
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 20
    })), "\n  " ];                                                                                                     // 21
  }), "\n  ");                                                                                                         // 22
}));                                                                                                                   // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-radio-inline/select-radio-inline.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-radio-inline", {                                                                         // 1
  template: "afRadioGroupInline",                                                                                      // 2
  valueOut: function () {                                                                                              // 3
    return this.find('input[type=radio]:checked').val();                                                               // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    var itemAtts = _.omit(context.atts);                                                                               // 7
                                                                                                                       // 8
    // build items list                                                                                                // 9
    context.items = [];                                                                                                // 10
                                                                                                                       // 11
    // Add all defined options                                                                                         // 12
    _.each(context.selectOptions, function(opt) {                                                                      // 13
      context.items.push({                                                                                             // 14
        name: context.name,                                                                                            // 15
        label: opt.label,                                                                                              // 16
        value: opt.value,                                                                                              // 17
        // _id must be included because it is a special property that                                                  // 18
        // #each uses to track unique list items when adding and removing them                                         // 19
        // See https://github.com/meteor/meteor/issues/2174                                                            // 20
        _id: opt.value,                                                                                                // 21
        selected: (opt.value === context.value),                                                                       // 22
        atts: itemAtts                                                                                                 // 23
      });                                                                                                              // 24
    });                                                                                                                // 25
                                                                                                                       // 26
    return context;                                                                                                    // 27
  }                                                                                                                    // 28
});                                                                                                                    // 29
                                                                                                                       // 30
Template["afRadioGroupInline"].helpers({                                                                               // 31
  atts: function selectedAttsAdjust() {                                                                                // 32
    var atts = _.clone(this.atts);                                                                                     // 33
    if (this.selected) {                                                                                               // 34
      atts.checked = "";                                                                                               // 35
    }                                                                                                                  // 36
    // remove data-schema-key attribute because we put it                                                              // 37
    // on the entire group                                                                                             // 38
    delete atts["data-schema-key"];                                                                                    // 39
    return atts;                                                                                                       // 40
  },                                                                                                                   // 41
  dsk: function dsk() {                                                                                                // 42
    return {                                                                                                           // 43
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
});                                                                                                                    // 47
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/submit/template.submit.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputSubmit");                                                                                 // 2
Template["afInputSubmit"] = new Template("Template.afInputSubmit", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "submit",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/submit/submit.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("submit", {                                                                                      // 1
  template: "afInputSubmit"                                                                                            // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/tel/template.tel.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputTel");                                                                                    // 2
Template["afInputTel"] = new Template("Template.afInputTel", (function() {                                             // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "tel",                                                                                                       // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/tel/tel.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("tel", {                                                                                         // 1
  template: "afInputTel",                                                                                              // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": function (val) {                                                                                    // 4
      if (typeof val === "string" && val.length > 0) {                                                                 // 5
        return [val];                                                                                                  // 6
      }                                                                                                                // 7
      return val;                                                                                                      // 8
    }                                                                                                                  // 9
  },                                                                                                                   // 10
  contextAdjust: function (context) {                                                                                  // 11
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 12
      context.atts.maxlength = context.max;                                                                            // 13
    }                                                                                                                  // 14
    return context;                                                                                                    // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/text/template.text.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputText");                                                                                   // 2
Template["afInputText"] = new Template("Template.afInputText", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "text",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/text/text.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("text", {                                                                                        // 1
  template: "afInputText",                                                                                             // 2
  valueOut: function () {                                                                                              // 3
    return this.val();                                                                                                 // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "stringArray": function (val) {                                                                                    // 7
      if (typeof val === "string") {                                                                                   // 8
        val = val.split(",");                                                                                          // 9
        return _.map(val, function (item) {                                                                            // 10
          return $.trim(item);                                                                                         // 11
        });                                                                                                            // 12
      }                                                                                                                // 13
      return val;                                                                                                      // 14
    },                                                                                                                 // 15
    "number": AutoForm.Utility.stringToNumber,                                                                         // 16
    "numberArray": function (val) {                                                                                    // 17
      if (typeof val === "string") {                                                                                   // 18
        val = val.split(",");                                                                                          // 19
        return _.map(val, function (item) {                                                                            // 20
          item = $.trim(item);                                                                                         // 21
          return AutoForm.Utility.stringToNumber(item);                                                                // 22
        });                                                                                                            // 23
      }                                                                                                                // 24
      return val;                                                                                                      // 25
    },                                                                                                                 // 26
    "boolean": AutoForm.Utility.stringToBool,                                                                          // 27
    "booleanArray": function (val) {                                                                                   // 28
      if (typeof val === "string") {                                                                                   // 29
        val = val.split(",");                                                                                          // 30
        return _.map(val, function (item) {                                                                            // 31
          item = $.trim(item);                                                                                         // 32
          return AutoForm.Utility.stringToBool(item);                                                                  // 33
        });                                                                                                            // 34
      }                                                                                                                // 35
      return val;                                                                                                      // 36
    },                                                                                                                 // 37
    "date": AutoForm.Utility.stringToDate,                                                                             // 38
    "dateArray": function (val) {                                                                                      // 39
      if (typeof val === "string") {                                                                                   // 40
        val = val.split(",");                                                                                          // 41
        return _.map(val, function (item) {                                                                            // 42
          item = $.trim(item);                                                                                         // 43
          return AutoForm.Utility.stringToDate(item);                                                                  // 44
        });                                                                                                            // 45
      }                                                                                                                // 46
      return val;                                                                                                      // 47
    }                                                                                                                  // 48
  },                                                                                                                   // 49
  contextAdjust: function (context) {                                                                                  // 50
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 51
      context.atts.maxlength = context.max;                                                                            // 52
    }                                                                                                                  // 53
    return context;                                                                                                    // 54
  }                                                                                                                    // 55
});                                                                                                                    // 56
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/textarea/template.textarea.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afTextarea");                                                                                    // 2
Template["afTextarea"] = new Template("Template.afTextarea", (function() {                                             // 3
  var view = this;                                                                                                     // 4
  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 6
  }, {                                                                                                                 // 7
    value: function() {                                                                                                // 8
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 9
    }                                                                                                                  // 10
  }));                                                                                                                 // 11
}));                                                                                                                   // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/textarea/textarea.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("textarea", {                                                                                    // 1
  template: "afTextarea",                                                                                              // 2
  valueConverters: {                                                                                                   // 3
    "string": function (val) {                                                                                         // 4
      return val;                                                                                                      // 5
    },                                                                                                                 // 6
    "stringArray": function (val) {                                                                                    // 7
      if (typeof val === "string" && val.length > 0) {                                                                 // 8
        return linesToArray(val);                                                                                      // 9
      }                                                                                                                // 10
      return val;                                                                                                      // 11
    },                                                                                                                 // 12
    "number": AutoForm.Utility.stringToNumber,                                                                         // 13
    "numberArray": function (val) {                                                                                    // 14
      if (typeof val === "string" && val.length > 0) {                                                                 // 15
        var arr = linesToArray(val);                                                                                   // 16
        return _.map(arr, function (item) {                                                                            // 17
          return AutoForm.Utility.stringToNumber(item);                                                                // 18
        });                                                                                                            // 19
      }                                                                                                                // 20
      return val;                                                                                                      // 21
    },                                                                                                                 // 22
    "boolean": AutoForm.Utility.stringToBool,                                                                          // 23
    "booleanArray": function (val) {                                                                                   // 24
      if (typeof val === "string" && val.length > 0) {                                                                 // 25
        var arr = linesToArray(val);                                                                                   // 26
        return _.map(arr, function (item) {                                                                            // 27
          return AutoForm.Utility.stringToBool(item);                                                                  // 28
        });                                                                                                            // 29
      }                                                                                                                // 30
      return val;                                                                                                      // 31
    },                                                                                                                 // 32
    "date": AutoForm.Utility.stringToDate,                                                                             // 33
    "dateArray": function (val) {                                                                                      // 34
      if (typeof val === "string" && val.length > 0) {                                                                 // 35
        var arr = linesToArray(val);                                                                                   // 36
        return _.map(arr, function (item) {                                                                            // 37
          return AutoForm.Utility.stringToDate(item);                                                                  // 38
        });                                                                                                            // 39
      }                                                                                                                // 40
      return val;                                                                                                      // 41
    }                                                                                                                  // 42
  },                                                                                                                   // 43
  contextAdjust: function (context) {                                                                                  // 44
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 45
      context.atts.maxlength = context.max;                                                                            // 46
    }                                                                                                                  // 47
    return context;                                                                                                    // 48
  }                                                                                                                    // 49
});                                                                                                                    // 50
                                                                                                                       // 51
function linesToArray(text) {                                                                                          // 52
  text = text.split('\n');                                                                                             // 53
  var lines = [];                                                                                                      // 54
  _.each(text, function (line) {                                                                                       // 55
    line = $.trim(line);                                                                                               // 56
    if (line.length) {                                                                                                 // 57
      lines.push(line);                                                                                                // 58
    }                                                                                                                  // 59
  });                                                                                                                  // 60
  return lines;                                                                                                        // 61
}                                                                                                                      // 62
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/time/template.time.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputTime");                                                                                   // 2
Template["afInputTime"] = new Template("Template.afInputTime", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "time",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/time/time.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("time", {                                                                                        // 1
  template: "afInputTime",                                                                                             // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": function (val) {                                                                                    // 4
      if (typeof val === "string" && val.length > 0) {                                                                 // 5
        return [val];                                                                                                  // 6
      }                                                                                                                // 7
      return val;                                                                                                      // 8
    }                                                                                                                  // 9
  }                                                                                                                    // 10
});                                                                                                                    // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/url/template.url.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputUrl");                                                                                    // 2
Template["afInputUrl"] = new Template("Template.afInputUrl", (function() {                                             // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "url",                                                                                                       // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/url/url.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("url", {                                                                                         // 1
  template: "afInputUrl",                                                                                              // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": function (val) {                                                                                    // 4
      if (typeof val === "string" && val.length > 0) {                                                                 // 5
        return [val];                                                                                                  // 6
      }                                                                                                                // 7
      return val;                                                                                                      // 8
    }                                                                                                                  // 9
  },                                                                                                                   // 10
  contextAdjust: function (context) {                                                                                  // 11
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 12
      context.atts.maxlength = context.max;                                                                            // 13
    }                                                                                                                  // 14
    return context;                                                                                                    // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/week/template.week.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputWeek");                                                                                   // 2
Template["afInputWeek"] = new Template("Template.afInputWeek", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "week",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/week/week.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("week", {                                                                                        // 1
  template: "afInputWeek",                                                                                             // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": function (val) {                                                                                    // 4
      if (typeof val === "string" && val.length > 0) {                                                                 // 5
        return [val];                                                                                                  // 6
      }                                                                                                                // 7
      return val;                                                                                                      // 8
    }                                                                                                                  // 9
  }                                                                                                                    // 10
});                                                                                                                    // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/autoForm/template.autoForm.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("autoForm");                                                                                      // 2
Template["autoForm"] = new Template("Template.autoForm", (function() {                                                 // 3
  var view = this;                                                                                                     // 4
  return Blaze.Unless(function() {                                                                                     // 5
    return Spacebars.dataMustache(view.lookup("afDestroyUpdateForm"), Spacebars.dot(view.lookup("."), "id"));          // 6
  }, function() {                                                                                                      // 7
    return [ "\n  \n  \n  ", HTML.FORM(HTML.Attrs(function() {                                                         // 8
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 9
    }), "\n    ", Blaze._InOuterTemplateScope(view, function() {                                                       // 10
      return Blaze._TemplateWith(function() {                                                                          // 11
        return Spacebars.call(view.lookup(".."));                                                                      // 12
      }, function() {                                                                                                  // 13
        return Spacebars.include(function() {                                                                          // 14
          return Spacebars.call(view.templateContentBlock);                                                            // 15
        });                                                                                                            // 16
      });                                                                                                              // 17
    }), "\n  "), "\n  " ];                                                                                             // 18
  });                                                                                                                  // 19
}));                                                                                                                   // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/autoForm/autoForm.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, ReactiveVar, arrayTracker, Hooks, MongoObject, updateAllTrackedFieldValues, Utility, setDefaults */
                                                                                                                       // 2
Template.autoForm.helpers({                                                                                            // 3
  atts: function autoFormTplAtts() {                                                                                   // 4
    // After removing all of the props we know about, everything else should                                           // 5
    // become a form attribute unless it's an array or object.                                                         // 6
    var val, htmlAttributes = {}, context = this;                                                                      // 7
    var removeProps = [                                                                                                // 8
      "schema",                                                                                                        // 9
      "collection",                                                                                                    // 10
      "validation",                                                                                                    // 11
      "doc",                                                                                                           // 12
      "resetOnSuccess",                                                                                                // 13
      "type",                                                                                                          // 14
      "template",                                                                                                      // 15
      "autosave",                                                                                                      // 16
      "autosaveOnKeyup",                                                                                               // 17
      "meteormethod",                                                                                                  // 18
      "filter",                                                                                                        // 19
      "autoConvert",                                                                                                   // 20
      "removeEmptyStrings",                                                                                            // 21
      "trimStrings"                                                                                                    // 22
    ];                                                                                                                 // 23
                                                                                                                       // 24
    // Filter out any attributes that have a component prefix                                                          // 25
    function hasComponentPrefix(prop) {                                                                                // 26
      return _.any(Utility.componentTypeList, function (componentType) {                                               // 27
        return prop.indexOf(componentType + '-') === 0;                                                                // 28
      });                                                                                                              // 29
    }                                                                                                                  // 30
                                                                                                                       // 31
    // Filter out arrays and objects, which are obviously not meant to be                                              // 32
    // HTML attributes.                                                                                                // 33
    for (var prop in context) {                                                                                        // 34
      if (context.hasOwnProperty(prop) &&                                                                              // 35
          !_.contains(removeProps, prop) &&                                                                            // 36
          !hasComponentPrefix(prop)) {                                                                                 // 37
        val = context[prop];                                                                                           // 38
        if (!_.isArray(val) && !_.isObject(val)) {                                                                     // 39
          htmlAttributes[prop] = val;                                                                                  // 40
        }                                                                                                              // 41
      }                                                                                                                // 42
    }                                                                                                                  // 43
                                                                                                                       // 44
    // By default, we add the `novalidate="novalidate"` attribute to our form,                                         // 45
    // unless the user passes `validation="browser"`.                                                                  // 46
    if (this.validation !== "browser" && !htmlAttributes.novalidate) {                                                 // 47
      htmlAttributes.novalidate = "novalidate";                                                                        // 48
    }                                                                                                                  // 49
                                                                                                                       // 50
    return htmlAttributes;                                                                                             // 51
  },                                                                                                                   // 52
  afDestroyUpdateForm: function (formId) {                                                                             // 53
    AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                           // 54
    return AutoForm._destroyForm[formId].get();                                                                        // 55
  }                                                                                                                    // 56
});                                                                                                                    // 57
                                                                                                                       // 58
Template.autoForm.created = function autoFormCreated() {                                                               // 59
  var template = this;                                                                                                 // 60
                                                                                                                       // 61
  // We'll add tracker dependencies for reactive field values                                                          // 62
  // to this object as necessary                                                                                       // 63
  template.formValues = template.formValues || {};                                                                     // 64
                                                                                                                       // 65
  // We'll store "sticky" errors here. These are errors added                                                          // 66
  // manually based on server validation, which we don't want to                                                       // 67
  // be wiped out by further client validation.                                                                        // 68
  template._stickyErrors = {};                                                                                         // 69
                                                                                                                       // 70
  template.fieldValuesReady = new ReactiveVar(false);                                                                  // 71
                                                                                                                       // 72
  template.autorun(function (c) {                                                                                      // 73
    var data = Template.currentData(); // rerun when current data changes                                              // 74
    var formId = data.id;                                                                                              // 75
                                                                                                                       // 76
    if (!formId) {                                                                                                     // 77
      throw new Error('Every autoForm and quickForm must have an "id" attribute set to a unique string.');             // 78
    }                                                                                                                  // 79
                                                                                                                       // 80
    // When we change the form, loading a different doc, reloading the current doc, etc.,                              // 81
    // we also want to reset the array counts for the form                                                             // 82
    arrayTracker.resetForm(formId);                                                                                    // 83
                                                                                                                       // 84
    data = setDefaults(data);                                                                                          // 85
                                                                                                                       // 86
    // Clone the doc so that docToForm and other modifications do not change                                           // 87
    // the original referenced object.                                                                                 // 88
    var doc = data.doc ? EJSON.clone(data.doc) : null;                                                                 // 89
                                                                                                                       // 90
    // Update cached form values for hot code reload persistence                                                       // 91
    if (data.preserveForm === false) {                                                                                 // 92
      AutoForm.formPreserve.unregisterForm(formId);                                                                    // 93
    } else {                                                                                                           // 94
      // Even if we have already registered, we reregister to ensure that the                                          // 95
      // closure values of template, formId, and ss remain correct after each                                          // 96
      // reaction                                                                                                      // 97
      AutoForm.formPreserve.registerForm(formId, function autoFormRegFormCallback() {                                  // 98
        return AutoForm.getFormValues(formId, template, data._resolvedSchema, false);                                  // 99
      });                                                                                                              // 100
    }                                                                                                                  // 101
                                                                                                                       // 102
    // Retain doc values after a "hot code push", if possible                                                          // 103
    if (c.firstRun) {                                                                                                  // 104
      var retrievedDoc = AutoForm.formPreserve.getDocument(formId);                                                    // 105
      if (retrievedDoc !== false) {                                                                                    // 106
        // Ensure we keep the _id property which may not be present in retrievedDoc.                                   // 107
        doc = _.extend(doc || {}, retrievedDoc || {});                                                                 // 108
      }                                                                                                                // 109
    }                                                                                                                  // 110
                                                                                                                       // 111
    var mDoc;                                                                                                          // 112
    if (doc && !_.isEmpty(doc)) {                                                                                      // 113
      var hookCtx = {formId: formId};                                                                                  // 114
      // Pass doc through docToForm hooks                                                                              // 115
      _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(hook) {                               // 116
        doc = hook.call(hookCtx, doc, data._resolvedSchema);                                                           // 117
        if (!doc) {                                                                                                    // 118
          throw new Error('Oops! Did you forget to return the modified document from your docToForm hook for the ' + formId + ' form?');
        }                                                                                                              // 120
      });                                                                                                              // 121
                                                                                                                       // 122
      // Create a "flat doc" that can be used to easily get values for corresponding                                   // 123
      // form fields.                                                                                                  // 124
      mDoc = new MongoObject(doc);                                                                                     // 125
      AutoForm.reactiveFormData.sourceDoc(formId, mDoc);                                                               // 126
    } else {                                                                                                           // 127
      AutoForm.reactiveFormData.sourceDoc(formId, null);                                                               // 128
    }                                                                                                                  // 129
                                                                                                                       // 130
    // This ensures that anything dependent on field values will properly                                              // 131
    // react to field values set from the database document. That is,                                                  // 132
    // computations dependent on AutoForm.getFieldValue will rerun properly                                            // 133
    // when the form is initially rendered using values from `doc`.                                                    // 134
    updateAllTrackedFieldValues(template);                                                                             // 135
  });                                                                                                                  // 136
};                                                                                                                     // 137
                                                                                                                       // 138
Template.autoForm.rendered = function autoFormRendered() {                                                             // 139
  this.fieldValuesReady.set(true);                                                                                     // 140
};                                                                                                                     // 141
                                                                                                                       // 142
Template.autoForm.destroyed = function autoFormDestroyed() {                                                           // 143
  var self = this;                                                                                                     // 144
  var formId = self.data.id;                                                                                           // 145
                                                                                                                       // 146
  // TODO if formId was changing reactively during life of instance,                                                   // 147
  // some data won't be removed by the calls below.                                                                    // 148
                                                                                                                       // 149
  // Remove from array fields list                                                                                     // 150
  arrayTracker.untrackForm(formId);                                                                                    // 151
                                                                                                                       // 152
  // Unregister form preservation                                                                                      // 153
  AutoForm.formPreserve.unregisterForm(formId);                                                                        // 154
};                                                                                                                     // 155
                                                                                                                       // 156
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/quickForm/template.quickForm.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm");                                                                                     // 2
Template["quickForm"] = new Template("Template.quickForm", (function() {                                               // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/quickForm/quickForm.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.quickForm.helpers({                                                                                           // 3
  getTemplateName: function () {                                                                                       // 4
    return AutoForm.getTemplateName('quickForm', this.template);                                                       // 5
  },                                                                                                                   // 6
  innerContext: function quickFormContext() {                                                                          // 7
    var atts = this;                                                                                                   // 8
                                                                                                                       // 9
    // Pass along quickForm context to autoForm context, minus a few                                                   // 10
    // properties that are specific to quickForms.                                                                     // 11
    var qfAutoFormContext = _.omit(atts, "buttonContent", "buttonClasses", "fields", "omitFields");                    // 12
                                                                                                                       // 13
    // Determine whether we want to render a submit button                                                             // 14
    var qfShouldRenderButton = (atts.buttonContent !== false && atts.type !== "readonly" && atts.type !== "disabled"); // 15
                                                                                                                       // 16
    return {                                                                                                           // 17
      qfAutoFormContext: qfAutoFormContext,                                                                            // 18
      atts: atts,                                                                                                      // 19
      qfShouldRenderButton: qfShouldRenderButton                                                                       // 20
    };                                                                                                                 // 21
  }                                                                                                                    // 22
});                                                                                                                    // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afArrayField/template.afArrayField.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afArrayField");                                                                                  // 2
Template["afArrayField"] = new Template("Template.afArrayField", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afArrayField/afArrayField.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, arrayTracker */                                                                                    // 1
                                                                                                                       // 2
Template.afArrayField.helpers({                                                                                        // 3
  getTemplateName: function () {                                                                                       // 4
    return AutoForm.getTemplateName('afArrayField', this.template, this.name);                                         // 5
  },                                                                                                                   // 6
  innerContext: function afArrayFieldContext() {                                                                       // 7
    var c = AutoForm.Utility.getComponentContext(this, "afArrayField");                                                // 8
    var name = c.atts.name;                                                                                            // 9
    var fieldMinCount = c.atts.minCount || 0;                                                                          // 10
    var fieldMaxCount = c.atts.maxCount || Infinity;                                                                   // 11
    var ss = AutoForm.getFormSchema();                                                                                 // 12
    var formId = AutoForm.getFormId();                                                                                 // 13
                                                                                                                       // 14
    // Init the array tracking for this field                                                                          // 15
    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 16
    if (docCount === undefined) {                                                                                      // 17
      docCount = c.atts.initialCount;                                                                                  // 18
    }                                                                                                                  // 19
    arrayTracker.initField(formId, name, ss, docCount, fieldMinCount, fieldMaxCount);                                  // 20
                                                                                                                       // 21
    return {                                                                                                           // 22
      atts: c.atts                                                                                                     // 23
    };                                                                                                                 // 24
  }                                                                                                                    // 25
});                                                                                                                    // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afEachArrayItem/template.afEachArrayItem.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afEachArrayItem");                                                                               // 2
Template["afEachArrayItem"] = new Template("Template.afEachArrayItem", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", Spacebars.With(function() {                                                                         // 5
    return Spacebars.call(view.lookup("innerContext"));                                                                // 6
  }, function() {                                                                                                      // 7
    return [ "\n    ", Blaze.Each(function() {                                                                         // 8
      return Spacebars.call(view.lookup("."));                                                                         // 9
    }, function() {                                                                                                    // 10
      return [ "\n    ", Blaze.If(function() {                                                                         // 11
        return Spacebars.call(Spacebars.dot(view.lookup("."), "removed"));                                             // 12
      }, function() {                                                                                                  // 13
        return [ "\n    ", HTML.INPUT({                                                                                // 14
          type: "hidden",                                                                                              // 15
          name: function() {                                                                                           // 16
            return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                        // 17
          },                                                                                                           // 18
          "data-schema-key": function() {                                                                              // 19
            return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                        // 20
          },                                                                                                           // 21
          "data-null-value": "true",                                                                                   // 22
          value: ""                                                                                                    // 23
        }), "\n    " ];                                                                                                // 24
      }, function() {                                                                                                  // 25
        return [ "\n    ", Blaze._InOuterTemplateScope(view, function() {                                              // 26
          return Blaze._TemplateWith(function() {                                                                      // 27
            return Spacebars.call(view.lookup("."));                                                                   // 28
          }, function() {                                                                                              // 29
            return Spacebars.include(function() {                                                                      // 30
              return Spacebars.call(view.templateContentBlock);                                                        // 31
            });                                                                                                        // 32
          });                                                                                                          // 33
        }), "\n    " ];                                                                                                // 34
      }), "\n    " ];                                                                                                  // 35
    }), "\n  " ];                                                                                                      // 36
  }) ];                                                                                                                // 37
}));                                                                                                                   // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afEachArrayItem/afEachArrayItem.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, arrayTracker */                                                                                    // 1
                                                                                                                       // 2
Template.afEachArrayItem.helpers({                                                                                     // 3
  innerContext: function afEachArrayItemContext() {                                                                    // 4
    var c = AutoForm.Utility.getComponentContext(this, "afEachArrayItem");                                             // 5
    var formId = AutoForm.getFormId();                                                                                 // 6
    var ss = AutoForm.getFormSchema();                                                                                 // 7
    var name = c.atts.name;                                                                                            // 8
                                                                                                                       // 9
    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 10
    if (docCount === undefined) {                                                                                      // 11
      docCount = c.atts.initialCount;                                                                                  // 12
    }                                                                                                                  // 13
    arrayTracker.initField(formId, name, ss, docCount, c.atts.minCount, c.atts.maxCount);                              // 14
                                                                                                                       // 15
    return arrayTracker.getField(formId, name);                                                                        // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afFieldInput/template.afFieldInput.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFieldInput");                                                                                  // 2
Template["afFieldInput"] = new Template("Template.afFieldInput", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afFieldInput/afFieldInput.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */                                            // 1
                                                                                                                       // 2
Template.afFieldInput.helpers({                                                                                        // 3
  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back                       // 4
  // lastly to a template without an _ piece at the end                                                                // 5
  getTemplateName: function getTemplateName() {                                                                        // 6
    var self = this;                                                                                                   // 7
                                                                                                                       // 8
    // Determine what `type` attribute should be if not set                                                            // 9
    var inputType = AutoForm.getInputType(this);                                                                       // 10
    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 11
    if (!componentDef) {                                                                                               // 12
      throw new Error('AutoForm: No component found for rendering input with type "' + inputType + '"');               // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    var inputTemplateName = componentDef.template;                                                                     // 16
    var styleTemplateName = this.template;                                                                             // 17
                                                                                                                       // 18
    // We skip the check for existence here so that we can get the `_plain` string                                     // 19
    // even though they don't exist.                                                                                   // 20
    var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true);                // 21
                                                                                                                       // 22
    // Special case: the built-in "plain" template uses the basic input templates for                                  // 23
    // everything, so if we found _plain, we use inputTemplateName instead                                             // 24
    if (templateName.indexOf('_plain') !== -1) {                                                                       // 25
      templateName = null;                                                                                             // 26
    }                                                                                                                  // 27
                                                                                                                       // 28
    // If no override templateName found, use the exact name from the input type definition                            // 29
    if (!templateName || !Template[templateName]) {                                                                    // 30
      templateName = inputTemplateName;                                                                                // 31
    }                                                                                                                  // 32
                                                                                                                       // 33
    return templateName;                                                                                               // 34
  },                                                                                                                   // 35
  innerContext: function afFieldInputContext() {                                                                       // 36
    var c = AutoForm.Utility.getComponentContext(this, "afFieldInput");                                                // 37
    var form = AutoForm.getCurrentDataForForm();                                                                       // 38
    var formId = form.id;                                                                                              // 39
    var ss = AutoForm.getFormSchema();                                                                                 // 40
    var defs = c.defs;                                                                                                 // 41
                                                                                                                       // 42
    // Get schema default value.                                                                                       // 43
    // We must do this before adjusting defs for arrays.                                                               // 44
    var schemaDefaultValue = defs.defaultValue;                                                                        // 45
                                                                                                                       // 46
    // Adjust for array fields if necessary                                                                            // 47
    if (defs.type === Array) {                                                                                         // 48
      defs = ss.schema(c.atts.name + ".$");                                                                            // 49
    }                                                                                                                  // 50
                                                                                                                       // 51
    // Determine what `type` attribute should be if not set                                                            // 52
    var inputType = AutoForm.getInputType(this);                                                                       // 53
    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 54
    if (!componentDef) {                                                                                               // 55
      throw new Error('AutoForm: No component found for rendering input with type "' + inputType + '"');               // 56
    }                                                                                                                  // 57
                                                                                                                       // 58
    // Get reactive mDoc                                                                                               // 59
    var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                            // 60
                                                                                                                       // 61
    // Get input value                                                                                                 // 62
    var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef);      // 63
                                                                                                                       // 64
    // Mark field value as changed for reactive updates                                                                // 65
    // We need to defer this until the element will be                                                                 // 66
    // added to the DOM. Otherwise, AutoForm.getFieldValue                                                             // 67
    // will not pick up the new value when there are #if etc.                                                          // 68
    // blocks involved.                                                                                                // 69
    // See https://github.com/aldeed/meteor-autoform/issues/461                                                        // 70
    var template = AutoForm.templateInstanceForForm();                                                                 // 71
    updateTrackedFieldValue(template, c.atts.name);                                                                    // 72
                                                                                                                       // 73
    // Build input data context                                                                                        // 74
    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type);                                   // 75
                                                                                                                       // 76
    // Adjust and return context                                                                                       // 77
    return (typeof componentDef.contextAdjust === "function") ? componentDef.contextAdjust(iData) : iData;             // 78
  }                                                                                                                    // 79
});                                                                                                                    // 80
                                                                                                                       // 81
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afFormGroup/template.afFormGroup.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFormGroup");                                                                                   // 2
Template["afFormGroup"] = new Template("Template.afFormGroup", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afFormGroup/afFormGroup.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.afFormGroup.helpers({                                                                                         // 3
  getTemplateName: function () {                                                                                       // 4
    return AutoForm.getTemplateName('afFormGroup', this.template, this.name);                                          // 5
  },                                                                                                                   // 6
  innerContext: function afFormGroupContext() {                                                                        // 7
    var c = AutoForm.Utility.getComponentContext(this, 'afFormGroup');                                                 // 8
    var afFormGroupAtts = formGroupAtts(c.atts);                                                                       // 9
    var afFieldLabelAtts = formGroupLabelAtts(c.atts);                                                                 // 10
    var afFieldInputAtts = formGroupInputAtts(c.atts);                                                                 // 11
                                                                                                                       // 12
    // Construct an `id` attribute for the input, optionally                                                           // 13
    // adding a user-provided prefix. Since id attribute is                                                            // 14
    // supposed to be unique in the DOM and templates can be                                                           // 15
    // included multiple times, it's best not to provide an `id`                                                       // 16
    // and generate a random one here for accessibility reasons.                                                       // 17
    var id = c.atts.id || Random.id();                                                                                 // 18
    var idPrefix = c.atts['id-prefix'];                                                                                // 19
    if (idPrefix && idPrefix.length > 0) {                                                                             // 20
      id = idPrefix + '-' + id;                                                                                        // 21
    }                                                                                                                  // 22
                                                                                                                       // 23
    // Set the input's `id` attribute and the label's `for` attribute to                                               // 24
    // the same ID.                                                                                                    // 25
    // NOTE: `afFieldLabelAtts.for` causes exception in IE8                                                            // 26
    afFieldLabelAtts['for'] = afFieldInputAtts.id = id;                                                                // 27
                                                                                                                       // 28
    // Get the field's schema definition                                                                               // 29
    var fieldSchema = AutoForm.getSchemaForField(c.atts.name);                                                         // 30
                                                                                                                       // 31
    return {                                                                                                           // 32
      skipLabel: (c.atts.label === false),                                                                             // 33
      afFormGroupClass: c.atts['formgroup-class'],                                                                     // 34
      afFormGroupAtts: afFormGroupAtts,                                                                                // 35
      afFieldLabelAtts: afFieldLabelAtts,                                                                              // 36
      afFieldInputAtts: afFieldInputAtts,                                                                              // 37
      name: c.atts.name,                                                                                               // 38
      required: fieldSchema ? !fieldSchema.optional : false,                                                           // 39
      labelText: (typeof c.atts.label === 'string') ? c.atts.label : null                                              // 40
    };                                                                                                                 // 41
  }                                                                                                                    // 42
});                                                                                                                    // 43
                                                                                                                       // 44
/*                                                                                                                     // 45
 * Private                                                                                                             // 46
 */                                                                                                                    // 47
                                                                                                                       // 48
function formGroupAtts(atts) {                                                                                         // 49
  // Separate formgroup options from input options; formgroup items begin with 'formgroup-'                            // 50
  var labelAtts = {};                                                                                                  // 51
  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 52
    if (key.indexOf('formgroup-') === 0 && key != 'formgroup-class') {                                                 // 53
      labelAtts[key.substring(10)] = val;                                                                              // 54
    }                                                                                                                  // 55
  });                                                                                                                  // 56
  return labelAtts;                                                                                                    // 57
}                                                                                                                      // 58
                                                                                                                       // 59
function formGroupLabelAtts(atts) {                                                                                    // 60
  // Separate label options from input options; label items begin with 'label-'                                        // 61
  var labelAtts = {};                                                                                                  // 62
  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 63
    if (key.indexOf('label-') === 0) {                                                                                 // 64
      labelAtts[key.substring(6)] = val;                                                                               // 65
    }                                                                                                                  // 66
  });                                                                                                                  // 67
  return labelAtts;                                                                                                    // 68
}                                                                                                                      // 69
                                                                                                                       // 70
function formGroupInputAtts(atts) {                                                                                    // 71
  // Separate input options from label and formgroup options                                                           // 72
  // We also don't want the 'label' option                                                                             // 73
  var inputAtts = {};                                                                                                  // 74
  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 75
    if (['id-prefix', 'id', 'label'].indexOf(key) === -1 && key.indexOf('label-') !== 0 && key.indexOf('formgroup-') !== 0) {
      inputAtts[key] = val;                                                                                            // 77
    }                                                                                                                  // 78
  });                                                                                                                  // 79
  return inputAtts;                                                                                                    // 80
}                                                                                                                      // 81
                                                                                                                       // 82
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afObjectField/template.afObjectField.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afObjectField");                                                                                 // 2
Template["afObjectField"] = new Template("Template.afObjectField", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afObjectField/afObjectField.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.afObjectField.helpers({                                                                                       // 3
  getTemplateName: function () {                                                                                       // 4
    return AutoForm.getTemplateName('afObjectField', this.template, this.name);                                        // 5
  },                                                                                                                   // 6
  innerContext: function() {                                                                                           // 7
    var c = AutoForm.Utility.getComponentContext(this, 'afObjectField');                                               // 8
    return _.extend({}, this, c.atts);                                                                                 // 9
  }                                                                                                                    // 10
});                                                                                                                    // 11
                                                                                                                       // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afQuickField/template.afQuickField.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afQuickField");                                                                                  // 2
Template["afQuickField"] = new Template("Template.afQuickField", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.lookup("isGroup"));                                                                     // 6
  }, function() {                                                                                                      // 7
    return [ "\n    ", Spacebars.include(view.lookupTemplate("afObjectField")), "\n  " ];                              // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", Blaze.If(function() {                                                                           // 10
      return Spacebars.call(view.lookup("isFieldArray"));                                                              // 11
    }, function() {                                                                                                    // 12
      return [ "\n      ", Spacebars.include(view.lookupTemplate("afArrayField")), "\n    " ];                         // 13
    }, function() {                                                                                                    // 14
      return [ "\n      ", Blaze.If(function() {                                                                       // 15
        return Spacebars.call(view.lookup("isHiddenInput"));                                                           // 16
      }, function() {                                                                                                  // 17
        return [ "\n        \n        ", Blaze._TemplateWith(function() {                                              // 18
          return Spacebars.call(view.lookup("groupAtts"));                                                             // 19
        }, function() {                                                                                                // 20
          return Spacebars.include(view.lookupTemplate("afFieldInput"));                                               // 21
        }), "\n      " ];                                                                                              // 22
      }, function() {                                                                                                  // 23
        return [ "\n        ", Blaze._TemplateWith(function() {                                                        // 24
          return Spacebars.call(view.lookup("groupAtts"));                                                             // 25
        }, function() {                                                                                                // 26
          return Spacebars.include(view.lookupTemplate("afFormGroup"));                                                // 27
        }), "\n      " ];                                                                                              // 28
      }), "\n    " ];                                                                                                  // 29
    }), "\n  " ];                                                                                                      // 30
  });                                                                                                                  // 31
}));                                                                                                                   // 32
                                                                                                                       // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afQuickField/afQuickField.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.afQuickField.helpers({                                                                                        // 3
  isGroup: function afQuickFieldIsGroup() {                                                                            // 4
    var c = AutoForm.Utility.getComponentContext(this, "afQuickField");                                                // 5
    // Render a group of fields if we expect an Object and we don't have options                                       // 6
    // and we have not overridden the type                                                                             // 7
    return (c.defs.type === Object && !c.atts.options && !c.atts.type);                                                // 8
  },                                                                                                                   // 9
  isFieldArray: function afQuickFieldIsFieldArray() {                                                                  // 10
    var c = AutoForm.Utility.getComponentContext(this, "afQuickField");                                                // 11
    // Render an array of fields if we expect an Array and we don't have options                                       // 12
    // and we have not overridden the type                                                                             // 13
    return (c.defs.type === Array && !c.atts.options && !c.atts.type);                                                 // 14
  },                                                                                                                   // 15
  groupAtts: function afQuickFieldGroupAtts() {                                                                        // 16
    // afQuickField passes `fields` and `omitFields` on to `afObjectField`                                             // 17
    // and `afArrayField`, but not to `afFormGroup`                                                                    // 18
    return _.omit(this, 'fields', 'omitFields');                                                                       // 19
  },                                                                                                                   // 20
  isHiddenInput: function afQuickFieldIsHiddenInput() {                                                                // 21
    var c = AutoForm.Utility.getComponentContext(this, "afQuickField");                                                // 22
    var inputType = c.atts.type;                                                                                       // 23
    if (inputType) {                                                                                                   // 24
      var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                    // 25
      if (!componentDef) {                                                                                             // 26
        throw new Error('AutoForm: No component found for rendering input with type "' + inputType + '"');             // 27
      }                                                                                                                // 28
      return componentDef.isHidden;                                                                                    // 29
    }                                                                                                                  // 30
                                                                                                                       // 31
    return false;                                                                                                      // 32
  }                                                                                                                    // 33
});                                                                                                                    // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afQuickFields/template.afQuickFields.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afQuickFields");                                                                                 // 2
Template["afQuickFields"] = new Template("Template.afQuickFields", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return Blaze.Each(function() {                                                                                       // 5
    return Spacebars.dataMustache(view.lookup("afFieldNames"), Spacebars.kw({                                          // 6
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 7
    }));                                                                                                               // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", Blaze._TemplateWith(function() {                                                                // 10
      return Spacebars.call(view.lookup("quickFieldAtts"));                                                            // 11
    }, function() {                                                                                                    // 12
      return Spacebars.include(view.lookupTemplate("afQuickField"));                                                   // 13
    }), "\n  " ];                                                                                                      // 14
  });                                                                                                                  // 15
}));                                                                                                                   // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afQuickFields/afQuickFields.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.afQuickFields.helpers({                                                                                       // 3
  quickFieldAtts: function afQuickFieldsQuickFieldAtts() {                                                             // 4
    var afQuickFieldsComponentAtts, defaultOptions, atts = {};                                                         // 5
                                                                                                                       // 6
    // Get the attributes that were on the afQuickFields component                                                     // 7
    afQuickFieldsComponentAtts = Template.parentData(1);                                                               // 8
    // It's possible to call {{> afQuickFields}} with no attributes, in which case we                                  // 9
    // don't want the "attributes" because they're really just the parent context.                                     // 10
    if (!afQuickFieldsComponentAtts || afQuickFieldsComponentAtts.atts) {                                              // 11
      afQuickFieldsComponentAtts = {};                                                                                 // 12
    }                                                                                                                  // 13
                                                                                                                       // 14
    // Add default options from schema/allowed                                                                         // 15
    defaultOptions = AutoForm._getOptionsForField(this.name);                                                          // 16
    if (defaultOptions) {                                                                                              // 17
      atts.options = defaultOptions;                                                                                   // 18
    }                                                                                                                  // 19
                                                                                                                       // 20
    return _.extend(atts, afQuickFieldsComponentAtts, this);                                                           // 21
  }                                                                                                                    // 22
});                                                                                                                    // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-events.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, Hooks, validateField, updateTrackedFieldValue, arrayTracker, updateAllTrackedFieldValues, SimpleSchema */
                                                                                                                       // 2
// all form events handled here                                                                                        // 3
var lastAutoSaveElement = null;                                                                                        // 4
var lastKeyVal = null;                                                                                                 // 5
                                                                                                                       // 6
function beginSubmit(formId, template, hookContext) {                                                                  // 7
  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 8
    return;                                                                                                            // 9
  }                                                                                                                    // 10
                                                                                                                       // 11
  // Get user-defined hooks                                                                                            // 12
  var hooks = Hooks.getHooks(formId, 'beginSubmit');                                                                   // 13
  if (hooks.length) {                                                                                                  // 14
    _.each(hooks, function beginSubmitHooks(hook) {                                                                    // 15
      hook.call(hookContext);                                                                                          // 16
    });                                                                                                                // 17
  } else {                                                                                                             // 18
    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 19
    var submitButton = template.find("button[type=submit]") || template.find("input[type=submit]");                    // 20
    if (submitButton) {                                                                                                // 21
      submitButton.disabled = true;                                                                                    // 22
    }                                                                                                                  // 23
  }                                                                                                                    // 24
}                                                                                                                      // 25
                                                                                                                       // 26
function endSubmit(formId, template, hookContext) {                                                                    // 27
  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 28
    return;                                                                                                            // 29
  }                                                                                                                    // 30
                                                                                                                       // 31
  // Try to avoid incorrect reporting of which input caused autosave                                                   // 32
  lastAutoSaveElement = null;                                                                                          // 33
  // Get user-defined hooks                                                                                            // 34
  var hooks = Hooks.getHooks(formId, 'endSubmit');                                                                     // 35
  if (hooks.length) {                                                                                                  // 36
    _.each(hooks, function endSubmitHooks(hook) {                                                                      // 37
      hook.call(hookContext);                                                                                          // 38
    });                                                                                                                // 39
  } else {                                                                                                             // 40
    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 41
    var submitButton = template.find("button[type=submit]") || template.find("input[type=submit]");                    // 42
    if (submitButton) {                                                                                                // 43
      submitButton.disabled = false;                                                                                   // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
}                                                                                                                      // 47
                                                                                                                       // 48
function adjustKeyForArrays(key) {                                                                                     // 49
  var gKey = SimpleSchema._makeGeneric(key);                                                                           // 50
  if (gKey.slice(-2) === '.$' || gKey.indexOf('.$.') !== -1) {                                                         // 51
    key = gKey.slice(0, gKey.indexOf('.$'));                                                                           // 52
  }                                                                                                                    // 53
  return key;                                                                                                          // 54
}                                                                                                                      // 55
                                                                                                                       // 56
/**                                                                                                                    // 57
 * Returns `true` if the specified validation type should                                                              // 58
 * be revalidated only when the form is already invalid.                                                               // 59
 * @param {String} validationType The validation type string.                                                          // 60
 */                                                                                                                    // 61
function onlyIfAlreadyInvalid(validationType) {                                                                        // 62
  return validationType === 'submitThenKeyup' ||                                                                       // 63
    validationType === 'submitThenBlur';                                                                               // 64
}                                                                                                                      // 65
                                                                                                                       // 66
/**                                                                                                                    // 67
 * Given an element, returns the schema key for it, using the                                                          // 68
 * `data-schema-key` attribute on the element or on the closest                                                        // 69
 * element that has one.                                                                                               // 70
 *                                                                                                                     // 71
 * @param   {Element}          element The DOM element                                                                 // 72
 * @returns {String|undefined} The schema key                                                                          // 73
 */                                                                                                                    // 74
function getKeyForElement(element) {                                                                                   // 75
  var key = element.getAttribute("data-schema-key");                                                                   // 76
  if (!key) {                                                                                                          // 77
    key = $(element).closest('[data-schema-key]').attr("data-schema-key");                                             // 78
  }                                                                                                                    // 79
  return key;                                                                                                          // 80
}                                                                                                                      // 81
                                                                                                                       // 82
//throttle autosave, at most autosave every 500ms                                                                      // 83
var throttleAutosave = _.throttle(function(event) {                                                                    // 84
  lastAutoSaveElement = event.target;                                                                                  // 85
  $(event.currentTarget).submit();                                                                                     // 86
}, 500, {leading: false});                                                                                             // 87
                                                                                                                       // 88
Template.autoForm.events({                                                                                             // 89
  'submit form': function autoFormSubmitHandler(event, template) {                                                     // 90
    var formDoc;                                                                                                       // 91
    // Gather necessary form info                                                                                      // 92
    var formId = this.id;                                                                                              // 93
    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 94
    var formType = form.type;                                                                                          // 95
    // ss will be the schema for the `schema` attribute if present,                                                    // 96
    // else the schema for the collection                                                                              // 97
    var ss = AutoForm.getFormSchema(formId);                                                                           // 98
    var collection = AutoForm.getFormCollection(formId);                                                               // 99
    var ssIsOverride = !!(collection && form.schema);                                                                  // 100
                                                                                                                       // 101
    var currentDoc = form.doc;                                                                                         // 102
    var docId = currentDoc ? currentDoc._id : null;                                                                    // 103
    var isValid;                                                                                                       // 104
                                                                                                                       // 105
    var validationOptions = {                                                                                          // 106
      validationContext: formId,                                                                                       // 107
      filter: form.filter,                                                                                             // 108
      autoConvert: form.autoConvert,                                                                                   // 109
      removeEmptyStrings: form.removeEmptyStrings,                                                                     // 110
      trimStrings: form.trimStrings                                                                                    // 111
    };                                                                                                                 // 112
                                                                                                                       // 113
    // Get the form type definition                                                                                    // 114
    var ftd;                                                                                                           // 115
    try {                                                                                                              // 116
      ftd = Utility.getFormTypeDef(formType);                                                                          // 117
    } catch (err) {                                                                                                    // 118
      event.preventDefault();                                                                                          // 119
      throw err;                                                                                                       // 120
    }                                                                                                                  // 121
                                                                                                                       // 122
    // Gather hooks                                                                                                    // 123
    var onSuccessHooks = Hooks.getHooks(formId, 'onSuccess');                                                          // 124
    var onErrorHooks = Hooks.getHooks(formId, 'onError');                                                              // 125
    var beforeHooks = Hooks.getHooks(formId, 'before', formType);                                                      // 126
    var afterHooks = Hooks.getHooks(formId, 'after', formType);                                                        // 127
                                                                                                                       // 128
    // Prep context with which hooks are called                                                                        // 129
    var hookContext = {                                                                                                // 130
      addStickyValidationError: function (key, type, value) {                                                          // 131
        AutoForm.templateInstanceForForm(formId)._stickyErrors[key] = {type: type, value: value};                      // 132
      },                                                                                                               // 133
      autoSaveChangedElement: lastAutoSaveElement,                                                                     // 134
      collection: collection,                                                                                          // 135
      currentDoc: currentDoc,                                                                                          // 136
      docId: docId,                                                                                                    // 137
      event: event,                                                                                                    // 138
      formAttributes: form,                                                                                            // 139
      formId: formId,                                                                                                  // 140
      formTypeDefinition: ftd,                                                                                         // 141
      removeStickyValidationError: function (key) {                                                                    // 142
        delete AutoForm.templateInstanceForForm(formId)._stickyErrors[key];                                            // 143
        // revalidate that field                                                                                       // 144
        validateField(key, formId, false, false);                                                                      // 145
      },                                                                                                               // 146
      resetForm: function () {                                                                                         // 147
        AutoForm.resetForm(formId, template);                                                                          // 148
      },                                                                                                               // 149
      ss: ss,                                                                                                          // 150
      ssIsOverride: ssIsOverride,                                                                                      // 151
      template: template,                                                                                              // 152
      validationContext: AutoForm.getValidationContext(formId)                                                         // 153
    };                                                                                                                 // 154
                                                                                                                       // 155
    // Gather all form values                                                                                          // 156
    if (ftd.needsModifierAndDoc) {                                                                                     // 157
      formDoc = AutoForm.getFormValues(formId, template, ss);                                                          // 158
      hookContext.updateDoc = formDoc.updateDoc;                                                                       // 159
      hookContext.insertDoc = formDoc.insertDoc;                                                                       // 160
    } else if (ftd.usesModifier) {                                                                                     // 161
      formDoc = AutoForm.getFormValues(formId, template, ss, true);                                                    // 162
      hookContext.updateDoc = formDoc;                                                                                 // 163
    } else {                                                                                                           // 164
      formDoc = AutoForm.getFormValues(formId, template, ss, false);                                                   // 165
      hookContext.insertDoc = formDoc;                                                                                 // 166
    }                                                                                                                  // 167
                                                                                                                       // 168
    // It is pretty unlikely since we are submitting it, but if                                                        // 169
    // for some reason this form is not currently rendered, we exit.                                                   // 170
    if (!formDoc) {                                                                                                    // 171
      event.preventDefault();                                                                                          // 172
      return;                                                                                                          // 173
    }                                                                                                                  // 174
                                                                                                                       // 175
    function endSubmission() {                                                                                         // 176
      // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                  // 177
      endSubmit(formId, template, hookContext);                                                                        // 178
    }                                                                                                                  // 179
                                                                                                                       // 180
    function failedValidation() {                                                                                      // 181
      // add invalidKeys array as a property                                                                           // 182
      // of the Error object before we call                                                                            // 183
      // onError hooks                                                                                                 // 184
      var ec = ss.namedContext(formId);                                                                                // 185
      var ik = ec.invalidKeys(), error;                                                                                // 186
      if (ik) {                                                                                                        // 187
        if (ik.length) {                                                                                               // 188
          // We add `message` prop to the invalidKeys.                                                                 // 189
          // Maybe SS pkg should just add that property back in?                                                       // 190
          ik = _.map(ik, function (o) {                                                                                // 191
            return _.extend({message: ec.keyErrorMessage(o.name)}, o);                                                 // 192
          });                                                                                                          // 193
          error = new Error(ik[0].message);                                                                            // 194
        } else {                                                                                                       // 195
          error = new Error('form failed validation');                                                                 // 196
        }                                                                                                              // 197
        error.invalidKeys = ik;                                                                                        // 198
      } else {                                                                                                         // 199
        error = new Error('form failed validation');                                                                   // 200
      }                                                                                                                // 201
      _.each(onErrorHooks, function onErrorEach(hook) {                                                                // 202
        hook.call(hookContext, 'pre-submit validation', error);                                                        // 203
      });                                                                                                              // 204
      event.preventDefault();                                                                                          // 205
      event.stopPropagation();                                                                                         // 206
      endSubmission();                                                                                                 // 207
    }                                                                                                                  // 208
                                                                                                                       // 209
    // Prep function that calls before hooks.                                                                          // 210
    function runBeforeHooks(doc, next) {                                                                               // 211
      // We call the hooks recursively, in order added,                                                                // 212
      // passing the result of the first hook to the                                                                   // 213
      // second hook, etc.                                                                                             // 214
      function runHook(i, doc) {                                                                                       // 215
        var hook = beforeHooks[i];                                                                                     // 216
                                                                                                                       // 217
        if (!hook) {                                                                                                   // 218
          // We've run all hooks; continue submission                                                                  // 219
          next(doc);                                                                                                   // 220
          return;                                                                                                      // 221
        }                                                                                                              // 222
                                                                                                                       // 223
        // Define a `result` function                                                                                  // 224
        var cb = function (d) {                                                                                        // 225
          // If the hook returns false, we cancel                                                                      // 226
          if (d === false) {                                                                                           // 227
            endSubmission();                                                                                           // 228
          } else if (!_.isObject(d)) {                                                                                 // 229
            throw new Error("A 'before' hook must return an object");                                                  // 230
          } else {                                                                                                     // 231
            runHook(i+1, d);                                                                                           // 232
          }                                                                                                            // 233
        };                                                                                                             // 234
                                                                                                                       // 235
        // Add the `result` function to the before hook context                                                        // 236
        var ctx = _.extend({                                                                                           // 237
          result: _.once(cb)                                                                                           // 238
        }, hookContext);                                                                                               // 239
                                                                                                                       // 240
        var result = hook.call(ctx, doc);                                                                              // 241
                                                                                                                       // 242
        // If the hook returns undefined, we wait for it                                                               // 243
        // to call this.result()                                                                                       // 244
        if (result !== void 0) {                                                                                       // 245
          ctx.result(result);                                                                                          // 246
        }                                                                                                              // 247
      }                                                                                                                // 248
                                                                                                                       // 249
      runHook(0, doc);                                                                                                 // 250
    }                                                                                                                  // 251
                                                                                                                       // 252
    // Prep function that calls after, onError, and onSuccess hooks.                                                   // 253
    // Also resets the form on success.                                                                                // 254
    function resultCallback(error, result) {                                                                           // 255
      if (error) {                                                                                                     // 256
        if (onErrorHooks && onErrorHooks.length) {                                                                     // 257
          _.each(onErrorHooks, function onErrorEach(hook) {                                                            // 258
            hook.call(hookContext, formType, error);                                                                   // 259
          });                                                                                                          // 260
        } else if ((!afterHooks || !afterHooks.length) && ss.namedContext(formId).isValid()) {                         // 261
          // if there are no onError or "after" hooks or validation errors, log the error                              // 262
          // because it must be some other error from the server                                                       // 263
          console.log(error);                                                                                          // 264
        }                                                                                                              // 265
      } else {                                                                                                         // 266
        // By default, we reset form after successful submit, but                                                      // 267
        // you can opt out. We should never reset after submit                                                         // 268
        // when autosaving.                                                                                            // 269
        if (form.resetOnSuccess !== false && form.autosave !== true) {                                                 // 270
          AutoForm.resetForm(formId, template);                                                                        // 271
        }                                                                                                              // 272
        // Set docId in the context for insert forms, too                                                              // 273
        if (formType === "insert") {                                                                                   // 274
          hookContext.docId = result;                                                                                  // 275
        }                                                                                                              // 276
        _.each(onSuccessHooks, function onSuccessEach(hook) {                                                          // 277
          hook.call(hookContext, formType, result);                                                                    // 278
        });                                                                                                            // 279
      }                                                                                                                // 280
      _.each(afterHooks, function afterHooksEach(hook) {                                                               // 281
        hook.call(hookContext, error, result);                                                                         // 282
      });                                                                                                              // 283
      endSubmission();                                                                                                 // 284
    }                                                                                                                  // 285
                                                                                                                       // 286
    // Run beginSubmit hooks (disable submit button or form, etc.)                                                     // 287
    // NOTE: This needs to stay after getFormValues in case a                                                          // 288
    // beginSubmit hook disables inputs. We don't get values for                                                       // 289
    // disabled inputs, but if they are just disabling during submission,                                              // 290
    // then we actually do want the values.                                                                            // 291
    //                                                                                                                 // 292
    // Also keep this before prevalidation so that sticky errors can be                                                // 293
    // removed in this hook.                                                                                           // 294
    beginSubmit(formId, template, hookContext);                                                                        // 295
                                                                                                                       // 296
    // Ask form type definition whether we should prevalidate. By default we do.                                       // 297
    var shouldPrevalidate = ftd.shouldPrevalidate ? ftd.shouldPrevalidate.call(hookContext) : true;                    // 298
                                                                                                                       // 299
    if (shouldPrevalidate) {                                                                                           // 300
      // This validation pass happens before any "before" hooks run. We                                                // 301
      // validate against the form schema. Then before hooks can add any missing                                       // 302
      // properties before we validate against the full collection schema.                                             // 303
      try {                                                                                                            // 304
        isValid = (form.validation === 'none') ||                                                                      // 305
          ftd.validateForm.call({                                                                                      // 306
            form: form,                                                                                                // 307
            formDoc: formDoc,                                                                                          // 308
            useCollectionSchema: false                                                                                 // 309
          });                                                                                                          // 310
      } catch (e) {                                                                                                    // 311
        // Catch exceptions in validation functions which will bubble up here, cause a form with                       // 312
        // onSubmit() to submit prematurely and prevent the error from being reported                                  // 313
        // (due to a page refresh).                                                                                    // 314
        console.error('Validation error', e);                                                                          // 315
        isValid = false;                                                                                               // 316
      }                                                                                                                // 317
      // If we failed pre-submit validation, we stop submission.                                                       // 318
      if (isValid === false) {                                                                                         // 319
        failedValidation();                                                                                            // 320
        return;                                                                                                        // 321
      }                                                                                                                // 322
    }                                                                                                                  // 323
                                                                                                                       // 324
    // Call onSubmit from the form type definition                                                                     // 325
    ftd.onSubmit.call(_.extend({                                                                                       // 326
      runBeforeHooks: runBeforeHooks,                                                                                  // 327
      result: resultCallback,                                                                                          // 328
      endSubmission: endSubmission,                                                                                    // 329
      failedValidation: failedValidation,                                                                              // 330
      validationOptions: validationOptions,                                                                            // 331
      hookContext: hookContext                                                                                         // 332
    }, hookContext));                                                                                                  // 333
  },                                                                                                                   // 334
  'keyup [data-schema-key]': function autoFormKeyUpHandler(event) {                                                    // 335
    // validateField is throttled, so we need to get the nearest form's                                                // 336
    // ID here, while we're still in the correct context                                                               // 337
    var formId = AutoForm.getFormId();                                                                                 // 338
                                                                                                                       // 339
    // Get current form data context                                                                                   // 340
    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 341
                                                                                                                       // 342
    var validationType = form.validation;                                                                              // 343
    var skipEmpty = !(event.keyCode === 8 || event.keyCode === 46); //if deleting or backspacing, don't skip empty     // 344
                                                                                                                       // 345
    if ((validationType === 'keyup' || validationType === 'submitThenKeyup')) {                                        // 346
      var key = getKeyForElement(event.currentTarget);                                                                 // 347
      if (!key) {return;}                                                                                              // 348
                                                                                                                       // 349
      validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                                     // 350
                                                                                                                       // 351
      // If it's an array field, we also want to validate the entire topmost array                                     // 352
      // in case there are minCount/maxCount errors, etc.                                                              // 353
      var arrayKey = adjustKeyForArrays(key);                                                                          // 354
      if (arrayKey !== key) {                                                                                          // 355
        validateField(arrayKey, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                              // 356
      }                                                                                                                // 357
                                                                                                                       // 358
      // If the form should be auto-saved whenever updated, we do that on field                                        // 359
      // changes instead of validating the field                                                                       // 360
      if (form.autosaveOnKeyup === true) {                                                                             // 361
        throttleAutosave(event);                                                                                       // 362
      }                                                                                                                // 363
    }                                                                                                                  // 364
  },                                                                                                                   // 365
  'blur [data-schema-key]': function autoFormBlurHandler(event) {                                                      // 366
    // validateField is throttled, so we need to get the nearest form's                                                // 367
    // ID here, while we're still in the correct context                                                               // 368
    var formId = AutoForm.getFormId();                                                                                 // 369
                                                                                                                       // 370
    // Get current form data context                                                                                   // 371
    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 372
    var validationType = form.validation;                                                                              // 373
                                                                                                                       // 374
    if (validationType === 'keyup' ||                                                                                  // 375
        validationType === 'blur' ||                                                                                   // 376
        validationType === 'submitThenKeyup' ||                                                                        // 377
        validationType === 'submitThenBlur') {                                                                         // 378
      var key = getKeyForElement(event.currentTarget);                                                                 // 379
      if (!key) {return;}                                                                                              // 380
                                                                                                                       // 381
      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 382
                                                                                                                       // 383
      // If it's an array field, we also want to validate the entire topmost array                                     // 384
      // in case there are minCount/maxCount errors, etc.                                                              // 385
      var arrayKey = adjustKeyForArrays(key);                                                                          // 386
      if (arrayKey !== key) {                                                                                          // 387
        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 388
      }                                                                                                                // 389
    }                                                                                                                  // 390
  },                                                                                                                   // 391
  'change form': function autoFormChangeHandler(event, template) {                                                     // 392
    var key = getKeyForElement(event.target);                                                                          // 393
    if (!key) {return;}                                                                                                // 394
                                                                                                                       // 395
    // Some plugins, like jquery.inputmask, can cause infinite                                                         // 396
    // loops by continually saying the field changed when it did not,                                                  // 397
    // especially in an autosave situation. This is an attempt to                                                      // 398
    // prevent that from happening.                                                                                    // 399
    var keyVal;                                                                                                        // 400
    switch(event.target.type){                                                                                         // 401
      case 'checkbox':                                                                                                 // 402
      case 'radio':                                                                                                    // 403
        keyVal = $(event.target).prop('checked');                                                                      // 404
        break;                                                                                                         // 405
      default:                                                                                                         // 406
        keyVal = event.target.value;                                                                                   // 407
    }                                                                                                                  // 408
                                                                                                                       // 409
    keyVal = key + '___' + keyVal;                                                                                     // 410
                                                                                                                       // 411
    if (keyVal === lastKeyVal) {                                                                                       // 412
      return;                                                                                                          // 413
    }                                                                                                                  // 414
    lastKeyVal = keyVal;                                                                                               // 415
                                                                                                                       // 416
    var formId = this.id;                                                                                              // 417
                                                                                                                       // 418
    // Mark field value as changed for reactive updates                                                                // 419
    updateTrackedFieldValue(template, key);                                                                            // 420
                                                                                                                       // 421
    // Get current form data context                                                                                   // 422
    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 423
                                                                                                                       // 424
    // If the form should be auto-saved whenever updated, we do that on field                                          // 425
    // changes instead of validating the field                                                                         // 426
    if (form.autosave === true || form.autosaveOnKeyup === true) {                                                     // 427
      lastAutoSaveElement = event.target;                                                                              // 428
      $(event.currentTarget).submit();                                                                                 // 429
      return;                                                                                                          // 430
    }                                                                                                                  // 431
                                                                                                                       // 432
    var validationType = form.validation;                                                                              // 433
                                                                                                                       // 434
    if (validationType === 'keyup' ||                                                                                  // 435
        validationType === 'blur' ||                                                                                   // 436
        validationType === 'submitThenKeyup' ||                                                                        // 437
        validationType === 'submitThenBlur') {                                                                         // 438
                                                                                                                       // 439
      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 440
                                                                                                                       // 441
      // If it's an array field, we also want to validate the entire topmost array                                     // 442
      // in case there are minCount/maxCount errors, etc.                                                              // 443
      var arrayKey = adjustKeyForArrays(key);                                                                          // 444
      if (arrayKey !== key) {                                                                                          // 445
        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 446
      }                                                                                                                // 447
    }                                                                                                                  // 448
  },                                                                                                                   // 449
  'reset form': function autoFormResetHandler(event, template) {                                                       // 450
    var formId = this.id;                                                                                              // 451
                                                                                                                       // 452
    AutoForm.formPreserve.clearDocument(formId);                                                                       // 453
                                                                                                                       // 454
    // Reset array counts                                                                                              // 455
    arrayTracker.resetForm(formId);                                                                                    // 456
                                                                                                                       // 457
    var vc = AutoForm.getValidationContext(formId);                                                                    // 458
    if (vc) {                                                                                                          // 459
      vc.resetValidation();                                                                                            // 460
      // If simpleSchema is undefined, we haven't yet rendered the form, and therefore                                 // 461
      // there is no need to reset validation for it. No error need be thrown.                                         // 462
    }                                                                                                                  // 463
                                                                                                                       // 464
    if (this.doc) {                                                                                                    // 465
      event.preventDefault();                                                                                          // 466
      AutoForm._forceResetFormValues(formId);                                                                          // 467
    }                                                                                                                  // 468
                                                                                                                       // 469
    // Mark all fields as changed                                                                                      // 470
    updateAllTrackedFieldValues(template);                                                                             // 471
    // Focus the autofocus element                                                                                     // 472
    template.$("[autofocus]").focus();                                                                                 // 473
                                                                                                                       // 474
  },                                                                                                                   // 475
  'keydown .autoform-array-item input': function (event) {                                                             // 476
    // When enter is pressed in an array item field, default behavior                                                  // 477
    // seems to be to "click" the remove item button. This doesn't make                                                // 478
    // sense so we stop it.                                                                                            // 479
    if (event.keyCode === 13) {                                                                                        // 480
      event.preventDefault();                                                                                          // 481
    }                                                                                                                  // 482
  },                                                                                                                   // 483
  'click .autoform-remove-item': function autoFormClickRemoveItem(event, template) {                                   // 484
    var self = this; // This type of button must be used within an afEachArrayItem block, so we know the context       // 485
                                                                                                                       // 486
    event.preventDefault();                                                                                            // 487
                                                                                                                       // 488
    var name = self.arrayFieldName;                                                                                    // 489
    var minCount = self.minCount; // optional, overrides schema                                                        // 490
    var maxCount = self.maxCount; // optional, overrides schema                                                        // 491
    var index = self.index;                                                                                            // 492
    var data = template.data;                                                                                          // 493
    var formId = data && data.id;                                                                                      // 494
    var ss = AutoForm.getFormSchema(formId);                                                                           // 495
                                                                                                                       // 496
    // remove the item we clicked                                                                                      // 497
    arrayTracker.removeFromFieldAtIndex(formId, name, index, ss, minCount, maxCount);                                  // 498
  },                                                                                                                   // 499
  'click .autoform-add-item': function autoFormClickAddItem(event, template) {                                         // 500
    event.preventDefault();                                                                                            // 501
                                                                                                                       // 502
    // We pull from data attributes because the button could be manually                                               // 503
    // added anywhere, so we don't know the data context.                                                              // 504
    var btn = $(event.currentTarget);                                                                                  // 505
    var name = btn.attr("data-autoform-field");                                                                        // 506
    var minCount = btn.attr("data-autoform-minCount"); // optional, overrides schema                                   // 507
    var maxCount = btn.attr("data-autoform-maxCount"); // optional, overrides schema                                   // 508
                                                                                                                       // 509
    var data = template.data;                                                                                          // 510
    var formId = data && data.id;                                                                                      // 511
    var ss = AutoForm.getFormSchema(formId);                                                                           // 512
                                                                                                                       // 513
    arrayTracker.addOneToField(formId, name, ss, minCount, maxCount);                                                  // 514
  }                                                                                                                    // 515
});                                                                                                                    // 516
                                                                                                                       // 517
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/bootstrap3.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
 * Template helpers for "bootstrap3" templates                                                                         // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
Template.registerHelper('attsPlusFormControlClass', function attsPlusFormControlClass() {                              // 7
  var atts = _.clone(this.atts);                                                                                       // 8
  // Add bootstrap class                                                                                               // 9
  atts = AutoForm.Utility.addClass(atts, "form-control");                                                              // 10
  return atts;                                                                                                         // 11
});                                                                                                                    // 12
                                                                                                                       // 13
Template.registerHelper('attsPlusBtnClass', function attsPlusBtnClass() {                                              // 14
  var atts = _.clone(this.atts);                                                                                       // 15
  // Add bootstrap class                                                                                               // 16
  atts = AutoForm.Utility.addClass(atts, "btn");                                                                       // 17
  return atts;                                                                                                         // 18
});                                                                                                                    // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/quickForm/template.quickForm.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_bootstrap3");                                                                          // 2
Template["quickForm_bootstrap3"] = new Template("Template.quickForm_bootstrap3", (function() {                         // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n  ", Blaze._TemplateWith(function() {                                                                // 9
        return Spacebars.call(view.lookup("quickFieldsAtts"));                                                         // 10
      }, function() {                                                                                                  // 11
        return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                // 12
      }), "\n  ", Blaze.If(function() {                                                                                // 13
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 14
      }, function() {                                                                                                  // 15
        return [ "\n  ", HTML.DIV({                                                                                    // 16
          "class": "form-group"                                                                                        // 17
        }, "\n    ", HTML.BUTTON(HTML.Attrs({                                                                          // 18
          type: "submit"                                                                                               // 19
        }, function() {                                                                                                // 20
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 21
        }), "\n      ", Spacebars.With(function() {                                                                    // 22
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 23
        }, function() {                                                                                                // 24
          return [ "\n      ", Blaze.View("lookup:.", function() {                                                     // 25
            return Spacebars.mustache(view.lookup("."));                                                               // 26
          }), "\n      " ];                                                                                            // 27
        }, function() {                                                                                                // 28
          return "\n      Submit\n      ";                                                                             // 29
        }), "\n    "), "\n  "), "\n  " ];                                                                              // 30
      }), "\n  " ];                                                                                                    // 31
    });                                                                                                                // 32
  });                                                                                                                  // 33
}));                                                                                                                   // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/quickForm/quickForm.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.quickForm_bootstrap3.helpers({                                                                                // 1
  quickFieldsAtts: function () {                                                                                       // 2
    // These are the quickForm attributes that we want to forward to                                                   // 3
    // the afQuickFields component.                                                                                    // 4
    return _.pick(this.atts, 'id-prefix');                                                                             // 5
  },                                                                                                                   // 6
  submitButtonAtts: function bsQuickFormSubmitButtonAtts() {                                                           // 7
    var qfAtts = this.atts;                                                                                            // 8
    var atts = {};                                                                                                     // 9
    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 10
      atts['class'] = qfAtts.buttonClasses;                                                                            // 11
    } else {                                                                                                           // 12
      atts['class'] = 'btn btn-primary';                                                                               // 13
    }                                                                                                                  // 14
    return atts;                                                                                                       // 15
  },                                                                                                                   // 16
  qfAutoFormContext: function () {                                                                                     // 17
    var ctx = _.clone(this.qfAutoFormContext);                                                                         // 18
    delete ctx['id-prefix'];                                                                                           // 19
    return ctx;                                                                                                        // 20
  }                                                                                                                    // 21
});                                                                                                                    // 22
                                                                                                                       // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afArrayField/template.afArrayField.js                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afArrayField_bootstrap3");                                                                       // 2
Template["afArrayField_bootstrap3"] = new Template("Template.afArrayField_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": "panel panel-default"                                                                                     // 6
  }, "\n    ", HTML.DIV({                                                                                              // 7
    "class": "panel-heading"                                                                                           // 8
  }, Blaze.View("lookup:afFieldLabelText", function() {                                                                // 9
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 10
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 11
    }));                                                                                                               // 12
  })), "\n    ", Blaze.If(function() {                                                                                 // 13
    return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                      // 14
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 15
    }));                                                                                                               // 16
  }, function() {                                                                                                      // 17
    return [ "\n    ", HTML.DIV({                                                                                      // 18
      "class": "panel-body has-error"                                                                                  // 19
    }, "\n      ", HTML.SPAN({                                                                                         // 20
      "class": "help-block"                                                                                            // 21
    }, Blaze.View("lookup:afFieldMessage", function() {                                                                // 22
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                        // 23
        name: Spacebars.dot(view.lookup("."), "atts", "name")                                                          // 24
      })));                                                                                                            // 25
    })), "\n    "), "\n    " ];                                                                                        // 26
  }), "\n    ", HTML.UL({                                                                                              // 27
    "class": "list-group"                                                                                              // 28
  }, "\n      ", Blaze._TemplateWith(function() {                                                                      // 29
    return {                                                                                                           // 30
      name: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "name")),                                           // 31
      minCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "minCount")),                                   // 32
      maxCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "maxCount"))                                    // 33
    };                                                                                                                 // 34
  }, function() {                                                                                                      // 35
    return Spacebars.include(view.lookupTemplate("afEachArrayItem"), function() {                                      // 36
      return [ "\n      ", HTML.LI({                                                                                   // 37
        "class": "list-group-item autoform-array-item"                                                                 // 38
      }, "\n        ", HTML.DIV("\n          ", HTML.DIV({                                                             // 39
        "class": "autoform-remove-item-wrap"                                                                           // 40
      }, "\n            ", Blaze.If(function() {                                                                       // 41
        return Spacebars.dataMustache(view.lookup("afArrayFieldHasMoreThanMinimum"), Spacebars.kw({                    // 42
          name: Spacebars.dot(view.lookup(".."), "atts", "name"),                                                      // 43
          minCount: Spacebars.dot(view.lookup(".."), "atts", "minCount"),                                              // 44
          maxCount: Spacebars.dot(view.lookup(".."), "atts", "maxCount")                                               // 45
        }));                                                                                                           // 46
      }, function() {                                                                                                  // 47
        return [ "\n            ", HTML.BUTTON({                                                                       // 48
          type: "button",                                                                                              // 49
          "class": "btn btn-primary autoform-remove-item"                                                              // 50
        }, HTML.SPAN({                                                                                                 // 51
          "class": "glyphicon glyphicon-minus"                                                                         // 52
        })), "\n            " ];                                                                                       // 53
      }), "\n          "), "\n          ", HTML.DIV({                                                                  // 54
        "class": "autoform-array-item-body"                                                                            // 55
      }, "\n            ", Blaze._TemplateWith(function() {                                                            // 56
        return {                                                                                                       // 57
          name: Spacebars.call(Spacebars.dot(view.lookup("."), "name")),                                               // 58
          label: Spacebars.call(false),                                                                                // 59
          options: Spacebars.call(view.lookup("afOptionsFromSchema"))                                                  // 60
        };                                                                                                             // 61
      }, function() {                                                                                                  // 62
        return Spacebars.include(view.lookupTemplate("afQuickField"));                                                 // 63
      }), "\n          "), "\n        "), "\n      "), "\n      " ];                                                   // 64
    });                                                                                                                // 65
  }), "\n      ", Blaze.If(function() {                                                                                // 66
    return Spacebars.dataMustache(view.lookup("afArrayFieldHasLessThanMaximum"), Spacebars.kw({                        // 67
      name: Spacebars.dot(view.lookup("."), "atts", "name"),                                                           // 68
      minCount: Spacebars.dot(view.lookup("."), "atts", "minCount"),                                                   // 69
      maxCount: Spacebars.dot(view.lookup("."), "atts", "maxCount")                                                    // 70
    }));                                                                                                               // 71
  }, function() {                                                                                                      // 72
    return [ "\n      ", HTML.LI({                                                                                     // 73
      "class": "list-group-item"                                                                                       // 74
    }, "\n        ", HTML.BUTTON({                                                                                     // 75
      type: "button",                                                                                                  // 76
      "class": "btn btn-primary autoform-add-item",                                                                    // 77
      "data-autoform-field": function() {                                                                              // 78
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "name"));                                    // 79
      },                                                                                                               // 80
      "data-autoform-mincount": function() {                                                                           // 81
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "minCount"));                                // 82
      },                                                                                                               // 83
      "data-autoform-maxcount": function() {                                                                           // 84
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "maxCount"));                                // 85
      }                                                                                                                // 86
    }, HTML.SPAN({                                                                                                     // 87
      "class": "glyphicon glyphicon-plus"                                                                              // 88
    })), "\n      "), "\n      " ];                                                                                    // 89
  }), "\n    "), "\n  ");                                                                                              // 90
}));                                                                                                                   // 91
                                                                                                                       // 92
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afFormGroup/template.afFormGroup.js                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFormGroup_bootstrap3");                                                                        // 2
Template["afFormGroup_bootstrap3"] = new Template("Template.afFormGroup_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": function() {                                                                                              // 6
      return [ "form-group ", Blaze.If(function() {                                                                    // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return "has-error";                                                                                            // 12
      }), " ", Spacebars.mustache(view.lookup("afFormGroupClass")) ];                                                  // 13
    },                                                                                                                 // 14
    "data-required": function() {                                                                                      // 15
      return Spacebars.mustache(view.lookup("required"));                                                              // 16
    }                                                                                                                  // 17
  }, function() {                                                                                                      // 18
    return Spacebars.attrMustache(view.lookup("afFormGroupAtts"));                                                     // 19
  }), "\n    ", Blaze.Unless(function() {                                                                              // 20
    return Spacebars.call(view.lookup("skipLabel"));                                                                   // 21
  }, function() {                                                                                                      // 22
    return [ "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                              // 23
      return Spacebars.attrMustache(view.lookup("bsFieldLabelAtts"));                                                  // 24
    }), Blaze.If(function() {                                                                                          // 25
      return Spacebars.call(Spacebars.dot(view.lookup("."), "labelText"));                                             // 26
    }, function() {                                                                                                    // 27
      return Blaze.View("lookup:..labelText", function() {                                                             // 28
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "labelText"));                                       // 29
      });                                                                                                              // 30
    }, function() {                                                                                                    // 31
      return Blaze.View("lookup:afFieldLabelText", function() {                                                        // 32
        return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 33
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 34
        }));                                                                                                           // 35
      });                                                                                                              // 36
    })), "\n    " ];                                                                                                   // 37
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 38
    return Spacebars.call(Spacebars.dot(view.lookup("."), "afFieldInputAtts"));                                        // 39
  }, function() {                                                                                                      // 40
    return Spacebars.include(view.lookupTemplate("afFieldInput"));                                                     // 41
  }), "\n    ", HTML.SPAN({                                                                                            // 42
    "class": "help-block"                                                                                              // 43
  }, Blaze.View("lookup:afFieldMessage", function() {                                                                  // 44
    return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                          // 45
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 46
    })));                                                                                                              // 47
  })), "\n  ");                                                                                                        // 48
}));                                                                                                                   // 49
                                                                                                                       // 50
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afFormGroup/afFormGroup.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afFormGroup_bootstrap3.helpers({                                                                              // 1
  skipLabel: function bsFormGroupSkipLabel() {                                                                         // 2
    var self = this;                                                                                                   // 3
                                                                                                                       // 4
    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 5
    return (self.skipLabel || type === "boolean-checkbox");                                                            // 6
  },                                                                                                                   // 7
  bsFieldLabelAtts: function bsFieldLabelAtts() {                                                                      // 8
    var atts = _.clone(this.afFieldLabelAtts);                                                                         // 9
    // Add bootstrap class                                                                                             // 10
    atts = AutoForm.Utility.addClass(atts, "control-label");                                                           // 11
    return atts;                                                                                                       // 12
  }                                                                                                                    // 13
});                                                                                                                    // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afObjectField/template.afObjectField.js                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afObjectField_bootstrap3");                                                                      // 2
Template["afObjectField_bootstrap3"] = new Template("Template.afObjectField_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": function() {                                                                                              // 6
      return [ "panel ", Spacebars.mustache(view.lookup("panelClass")) ];                                              // 7
    }                                                                                                                  // 8
  }, "\n    ", Spacebars.With(function() {                                                                             // 9
    return Spacebars.dataMustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 10
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 11
    }));                                                                                                               // 12
  }, function() {                                                                                                      // 13
    return [ "\n    ", HTML.DIV({                                                                                      // 14
      "class": function() {                                                                                            // 15
        return [ "panel-heading ", Spacebars.mustache(view.lookup("headingClass")) ];                                  // 16
      }                                                                                                                // 17
    }, "\n      ", HTML.H3({                                                                                           // 18
      "class": "panel-title"                                                                                           // 19
    }, Blaze.View("lookup:.", function() {                                                                             // 20
      return Spacebars.mustache(view.lookup("."));                                                                     // 21
    })), "\n    "), "\n    " ];                                                                                        // 22
  }), "\n    ", HTML.DIV({                                                                                             // 23
    "class": function() {                                                                                              // 24
      return [ "panel-body ", Spacebars.mustache(view.lookup("bodyClass")) ];                                          // 25
    }                                                                                                                  // 26
  }, "\n      ", Blaze.If(function() {                                                                                 // 27
    return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                      // 28
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 29
    }));                                                                                                               // 30
  }, function() {                                                                                                      // 31
    return [ "\n      ", HTML.SPAN({                                                                                   // 32
      "class": "help-block"                                                                                            // 33
    }, Blaze.View("lookup:afFieldMessage", function() {                                                                // 34
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                        // 35
        name: Spacebars.dot(view.lookup("."), "name")                                                                  // 36
      })));                                                                                                            // 37
    })), "\n      " ];                                                                                                 // 38
  }), "\n      ", Blaze._TemplateWith(function() {                                                                     // 39
    return Spacebars.call(view.lookup("quickFieldsAtts"));                                                             // 40
  }, function() {                                                                                                      // 41
    return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                    // 42
  }), "\n    "), "\n  ");                                                                                              // 43
}));                                                                                                                   // 44
                                                                                                                       // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afObjectField/afObjectField.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afObjectField_bootstrap3.helpers({                                                                            // 1
  quickFieldsAtts: function () {                                                                                       // 2
    return _.pick(this, 'name', 'id-prefix');                                                                          // 3
  },                                                                                                                   // 4
  panelClass: function() {                                                                                             // 5
    return this.panelClass || 'panel-default';                                                                         // 6
  }                                                                                                                    // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-checkbox/template.boolean-checkbox.js              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckbox_bootstrap3");                                                                         // 2
Template["afCheckbox_bootstrap3"] = new Template("Template.afCheckbox_bootstrap3", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": "checkbox"                                                                                                // 6
  }, "\n    ", HTML.LABEL("\n      ", HTML.INPUT(HTML.Attrs({                                                          // 7
    type: "checkbox",                                                                                                  // 8
    value: "true"                                                                                                      // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("atts"));                                                                // 11
  })), "\n      ", Blaze.View("lookup:afFieldLabelText", function() {                                                  // 12
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 13
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 14
    }));                                                                                                               // 15
  }), "\n    "), "\n  ");                                                                                              // 16
}));                                                                                                                   // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-radios/template.boolean-radios.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afBooleanRadioGroup_bootstrap3");                                                                // 2
Template["afBooleanRadioGroup_bootstrap3"] = new Template("Template.afBooleanRadioGroup_bootstrap3", (function() {     // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 6
  }), "\n    ", HTML.DIV({                                                                                             // 7
    "class": "radio"                                                                                                   // 8
  }, "\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 9
    type: "radio",                                                                                                     // 10
    value: "false",                                                                                                    // 11
    name: function() {                                                                                                 // 12
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                              // 13
    }                                                                                                                  // 14
  }, function() {                                                                                                      // 15
    return Spacebars.attrMustache(view.lookup("falseAtts"));                                                           // 16
  })), " ", Spacebars.With(function() {                                                                                // 17
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "falseLabel"));                                      // 18
  }, function() {                                                                                                      // 19
    return Blaze.View("lookup:.", function() {                                                                         // 20
      return Spacebars.mustache(view.lookup("."));                                                                     // 21
    });                                                                                                                // 22
  }, function() {                                                                                                      // 23
    return "False";                                                                                                    // 24
  })), "\n    "), "\n    ", HTML.DIV({                                                                                 // 25
    "class": "radio"                                                                                                   // 26
  }, "\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 27
    type: "radio",                                                                                                     // 28
    value: "true",                                                                                                     // 29
    name: function() {                                                                                                 // 30
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                              // 31
    }                                                                                                                  // 32
  }, function() {                                                                                                      // 33
    return Spacebars.attrMustache(view.lookup("trueAtts"));                                                            // 34
  })), " ", Spacebars.With(function() {                                                                                // 35
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "trueLabel"));                                       // 36
  }, function() {                                                                                                      // 37
    return Blaze.View("lookup:.", function() {                                                                         // 38
      return Spacebars.mustache(view.lookup("."));                                                                     // 39
    });                                                                                                                // 40
  }, function() {                                                                                                      // 41
    return "True";                                                                                                     // 42
  })), "\n    "), "\n  ");                                                                                             // 43
}));                                                                                                                   // 44
                                                                                                                       // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-radios/boolean-radios.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afBooleanRadioGroup_bootstrap3.helpers({                                                                      // 1
  falseAtts: function falseAtts() {                                                                                    // 2
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 3
    if (this.value === false) {                                                                                        // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    return atts;                                                                                                       // 7
  },                                                                                                                   // 8
  trueAtts: function trueAtts() {                                                                                      // 9
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 10
    if (this.value === true) {                                                                                         // 11
      atts.checked = "";                                                                                               // 12
    }                                                                                                                  // 13
    return atts;                                                                                                       // 14
  },                                                                                                                   // 15
  dsk: function () {                                                                                                   // 16
    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 17
  }                                                                                                                    // 18
});                                                                                                                    // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-select/template.boolean-select.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afBooleanSelect_bootstrap3");                                                                    // 2
Template["afBooleanSelect_bootstrap3"] = new Template("Template.afBooleanSelect_bootstrap3", (function() {             // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 6
  }), "\n    ", Blaze.Each(function() {                                                                                // 7
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", HTML.OPTION(HTML.Attrs(function() {                                                             // 10
      return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                                // 11
    }), Blaze.View("lookup:..label", function() {                                                                      // 12
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 13
    })), "\n    " ];                                                                                                   // 14
  }), "\n  ");                                                                                                         // 15
}));                                                                                                                   // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/button/template.button.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputButton_bootstrap3");                                                                      // 2
Template["afInputButton_bootstrap3"] = new Template("Template.afInputButton_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "button",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusBtnClass"));                                                    // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/color/template.color.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputColor_bootstrap3");                                                                       // 2
Template["afInputColor_bootstrap3"] = new Template("Template.afInputColor_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "color",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/date/template.date.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDate_bootstrap3");                                                                        // 2
Template["afInputDate_bootstrap3"] = new Template("Template.afInputDate_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "date",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/datetime/template.datetime.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDateTime_bootstrap3");                                                                    // 2
Template["afInputDateTime_bootstrap3"] = new Template("Template.afInputDateTime_bootstrap3", (function() {             // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "datetime",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/datetime-local/template.datetime-local.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDateTimeLocal_bootstrap3");                                                               // 2
Template["afInputDateTimeLocal_bootstrap3"] = new Template("Template.afInputDateTimeLocal_bootstrap3", (function() {   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "datetime-local",                                                                                            // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/email/template.email.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputEmail_bootstrap3");                                                                       // 2
Template["afInputEmail_bootstrap3"] = new Template("Template.afInputEmail_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "email",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/month/template.month.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputMonth_bootstrap3");                                                                       // 2
Template["afInputMonth_bootstrap3"] = new Template("Template.afInputMonth_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "month",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/number/template.number.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputNumber_bootstrap3");                                                                      // 2
Template["afInputNumber_bootstrap3"] = new Template("Template.afInputNumber_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "number",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/password/template.password.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputPassword_bootstrap3");                                                                    // 2
Template["afInputPassword_bootstrap3"] = new Template("Template.afInputPassword_bootstrap3", (function() {             // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "password",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/radio/template.radio.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadio_bootstrap3");                                                                            // 2
Template["afRadio_bootstrap3"] = new Template("Template.afRadio_bootstrap3", (function() {                             // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": "radio"                                                                                                   // 6
  }, "\n    ", HTML.LABEL("\n      ", HTML.INPUT(HTML.Attrs({                                                          // 7
    type: "radio",                                                                                                     // 8
    value: function() {                                                                                                // 9
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 10
    }                                                                                                                  // 11
  }, function() {                                                                                                      // 12
    return Spacebars.attrMustache(view.lookup("atts"));                                                                // 13
  })), "\n      ", Blaze.View("lookup:afFieldLabelText", function() {                                                  // 14
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 15
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 16
    }));                                                                                                               // 17
  }), "\n    "), "\n  ");                                                                                              // 18
}));                                                                                                                   // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/radio/radio.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afRadio_bootstrap3.helpers({                                                                                  // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    return atts;                                                                                                       // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/range/template.range.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputRange_bootstrap3");                                                                       // 2
Template["afInputRange_bootstrap3"] = new Template("Template.afInputRange_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "range",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/reset/template.reset.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputReset_bootstrap3");                                                                       // 2
Template["afInputReset_bootstrap3"] = new Template("Template.afInputReset_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "reset",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusBtnClass"));                                                    // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/search/template.search.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputSearch_bootstrap3");                                                                      // 2
Template["afInputSearch_bootstrap3"] = new Template("Template.afInputSearch_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "search",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select/template.select.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afSelect_bootstrap3");                                                                           // 2
Template["afSelect_bootstrap3"] = new Template("Template.afSelect_bootstrap3", (function() {                           // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 6
  }), "\n    ", Blaze.Each(function() {                                                                                // 7
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", Blaze.If(function() {                                                                           // 10
      return Spacebars.call(Spacebars.dot(view.lookup("."), "optgroup"));                                              // 11
    }, function() {                                                                                                    // 12
      return [ "\n    ", HTML.OPTGROUP({                                                                               // 13
        label: function() {                                                                                            // 14
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "optgroup"));                                      // 15
        }                                                                                                              // 16
      }, "\n      ", Blaze.Each(function() {                                                                           // 17
        return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                               // 18
      }, function() {                                                                                                  // 19
        return [ "\n      ", HTML.OPTION(HTML.Attrs(function() {                                                       // 20
          return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                            // 21
        }), Blaze.View("lookup:..label", function() {                                                                  // 22
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                         // 23
        })), "\n      " ];                                                                                             // 24
      }), "\n    "), "\n    " ];                                                                                       // 25
    }, function() {                                                                                                    // 26
      return [ "\n    ", HTML.OPTION(HTML.Attrs(function() {                                                           // 27
        return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                              // 28
      }), Blaze.View("lookup:..label", function() {                                                                    // 29
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                           // 30
      })), "\n    " ];                                                                                                 // 31
    }), "\n    " ];                                                                                                    // 32
  }), "\n  ");                                                                                                         // 33
}));                                                                                                                   // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox/template.select-checkbox.js                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckboxGroup_bootstrap3");                                                                    // 2
Template["afCheckboxGroup_bootstrap3"] = new Template("Template.afCheckboxGroup_bootstrap3", (function() {             // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-checkbox-group"                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.DIV({                                                                                      // 12
      "class": "checkbox"                                                                                              // 13
    }, "\n      ", HTML.LABEL("\n        ", HTML.INPUT(HTML.Attrs({                                                    // 14
      type: "checkbox",                                                                                                // 15
      value: function() {                                                                                              // 16
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 17
      }                                                                                                                // 18
    }, function() {                                                                                                    // 19
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 20
    })), "\n        ", Blaze.View("lookup:..label", function() {                                                       // 21
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 22
    }), "\n      "), "\n    "), "\n    " ];                                                                            // 23
  }), "\n  ");                                                                                                         // 24
}));                                                                                                                   // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox/select-checkbox.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afCheckboxGroup_bootstrap3.helpers({                                                                          // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    // remove data-schema-key attribute because we put it                                                              // 7
    // on the entire group                                                                                             // 8
    delete atts["data-schema-key"];                                                                                    // 9
    return atts;                                                                                                       // 10
  },                                                                                                                   // 11
  dsk: function dsk() {                                                                                                // 12
    return {                                                                                                           // 13
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckboxGroupInline_bootstrap3");                                                              // 2
Template["afCheckboxGroupInline_bootstrap3"] = new Template("Template.afCheckboxGroupInline_bootstrap3", (function() { // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-checkbox-group"                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.LABEL({                                                                                    // 12
      "class": "checkbox-inline fix-indent"                                                                            // 13
    }, "\n      ", HTML.INPUT(HTML.Attrs({                                                                             // 14
      type: "checkbox",                                                                                                // 15
      value: function() {                                                                                              // 16
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 17
      }                                                                                                                // 18
    }, function() {                                                                                                    // 19
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 20
    })), "\n      ", Blaze.View("lookup:..label", function() {                                                         // 21
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 22
    }), "\n    "), "\n    " ];                                                                                         // 23
  }), "\n  ");                                                                                                         // 24
}));                                                                                                                   // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/select-checkbox-inline.js           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afCheckboxGroupInline_bootstrap3.helpers({                                                                    // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    // remove data-schema-key attribute because we put it                                                              // 7
    // on the entire group                                                                                             // 8
    delete atts["data-schema-key"];                                                                                    // 9
    return atts;                                                                                                       // 10
  },                                                                                                                   // 11
  dsk: function dsk() {                                                                                                // 12
    return {                                                                                                           // 13
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-multiple/template.select-multiple.js                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afSelectMultiple_bootstrap3");                                                                   // 2
Template["afSelectMultiple_bootstrap3"] = new Template("Template.afSelectMultiple_bootstrap3", (function() {           // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs({                                                                                      // 5
    multiple: ""                                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", Blaze.If(function() {                                                                           // 12
      return Spacebars.call(Spacebars.dot(view.lookup("."), "optgroup"));                                              // 13
    }, function() {                                                                                                    // 14
      return [ "\n    ", HTML.OPTGROUP({                                                                               // 15
        label: function() {                                                                                            // 16
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "optgroup"));                                      // 17
        }                                                                                                              // 18
      }, "\n      ", Blaze.Each(function() {                                                                           // 19
        return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                               // 20
      }, function() {                                                                                                  // 21
        return [ "\n      ", HTML.OPTION(HTML.Attrs(function() {                                                       // 22
          return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                            // 23
        }), Blaze.View("lookup:..label", function() {                                                                  // 24
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                         // 25
        })), "\n      " ];                                                                                             // 26
      }), "\n    "), "\n    " ];                                                                                       // 27
    }, function() {                                                                                                    // 28
      return [ "\n    ", HTML.OPTION(HTML.Attrs(function() {                                                           // 29
        return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                              // 30
      }), Blaze.View("lookup:..label", function() {                                                                    // 31
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                           // 32
      })), "\n    " ];                                                                                                 // 33
    }), "\n    " ];                                                                                                    // 34
  }), "\n  ");                                                                                                         // 35
}));                                                                                                                   // 36
                                                                                                                       // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio/template.select-radio.js                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadioGroup_bootstrap3");                                                                       // 2
Template["afRadioGroup_bootstrap3"] = new Template("Template.afRadioGroup_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-radio-group"                                                                                          // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.DIV({                                                                                      // 12
      "class": "radio"                                                                                                 // 13
    }, "\n      ", HTML.LABEL("\n        ", HTML.INPUT(HTML.Attrs({                                                    // 14
      type: "radio",                                                                                                   // 15
      value: function() {                                                                                              // 16
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 17
      }                                                                                                                // 18
    }, function() {                                                                                                    // 19
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 20
    })), "\n        ", Blaze.View("lookup:..label", function() {                                                       // 21
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 22
    }), "\n      "), "\n    "), "\n    " ];                                                                            // 23
  }), "\n  ");                                                                                                         // 24
}));                                                                                                                   // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio/select-radio.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afRadioGroup_bootstrap3.helpers({                                                                             // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    // remove data-schema-key attribute because we put it                                                              // 7
    // on the entire group                                                                                             // 8
    delete atts["data-schema-key"];                                                                                    // 9
    return atts;                                                                                                       // 10
  },                                                                                                                   // 11
  dsk: function dsk() {                                                                                                // 12
    return {                                                                                                           // 13
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio-inline/template.select-radio-inline.js        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadioGroupInline_bootstrap3");                                                                 // 2
Template["afRadioGroupInline_bootstrap3"] = new Template("Template.afRadioGroupInline_bootstrap3", (function() {       // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-radio-group"                                                                                          // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.LABEL({                                                                                    // 12
      "class": "radio-inline fix-indent"                                                                               // 13
    }, "\n      ", HTML.INPUT(HTML.Attrs({                                                                             // 14
      type: "radio",                                                                                                   // 15
      value: function() {                                                                                              // 16
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 17
      }                                                                                                                // 18
    }, function() {                                                                                                    // 19
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 20
    })), "\n      ", Blaze.View("lookup:..label", function() {                                                         // 21
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 22
    }), "\n    "), "\n    " ];                                                                                         // 23
  }), "\n  ");                                                                                                         // 24
}));                                                                                                                   // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio-inline/select-radio-inline.js                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afRadioGroupInline_bootstrap3.helpers({                                                                       // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    // remove data-schema-key attribute because we put it                                                              // 7
    // on the entire group                                                                                             // 8
    delete atts["data-schema-key"];                                                                                    // 9
    return atts;                                                                                                       // 10
  },                                                                                                                   // 11
  dsk: function dsk() {                                                                                                // 12
    return {                                                                                                           // 13
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/submit/template.submit.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputSubmit_bootstrap3");                                                                      // 2
Template["afInputSubmit_bootstrap3"] = new Template("Template.afInputSubmit_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "submit",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusBtnClass"));                                                    // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/tel/template.tel.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputTel_bootstrap3");                                                                         // 2
Template["afInputTel_bootstrap3"] = new Template("Template.afInputTel_bootstrap3", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "tel",                                                                                                       // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/text/template.text.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputText_bootstrap3");                                                                        // 2
Template["afInputText_bootstrap3"] = new Template("Template.afInputText_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "text",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/textarea/template.textarea.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afTextarea_bootstrap3");                                                                         // 2
Template["afTextarea_bootstrap3"] = new Template("Template.afTextarea_bootstrap3", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 6
  }, {                                                                                                                 // 7
    value: function() {                                                                                                // 8
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 9
    }                                                                                                                  // 10
  }));                                                                                                                 // 11
}));                                                                                                                   // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/time/template.time.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputTime_bootstrap3");                                                                        // 2
Template["afInputTime_bootstrap3"] = new Template("Template.afInputTime_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "time",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/url/template.url.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputUrl_bootstrap3");                                                                         // 2
Template["afInputUrl_bootstrap3"] = new Template("Template.afInputUrl_bootstrap3", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "url",                                                                                                       // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/week/template.week.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputWeek_bootstrap3");                                                                        // 2
Template["afInputWeek_bootstrap3"] = new Template("Template.afInputWeek_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "week",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/quickForm/template.quickForm.js                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_bootstrap3-horizontal");                                                               // 2
Template["quickForm_bootstrap3-horizontal"] = new Template("Template.quickForm_bootstrap3-horizontal", (function() {   // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n  ", Blaze._TemplateWith(function() {                                                                // 9
        return Spacebars.call(view.lookup("quickFieldsAtts"));                                                         // 10
      }, function() {                                                                                                  // 11
        return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                // 12
      }), "\n  ", Blaze.If(function() {                                                                                // 13
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 14
      }, function() {                                                                                                  // 15
        return [ "\n  ", HTML.DIV({                                                                                    // 16
          "class": "form-group"                                                                                        // 17
        }, "\n    ", HTML.DIV({                                                                                        // 18
          "class": function() {                                                                                        // 19
            return Spacebars.mustache(view.lookup("labelClass"));                                                      // 20
          }                                                                                                            // 21
        }), "\n    ", HTML.DIV({                                                                                       // 22
          "class": function() {                                                                                        // 23
            return Spacebars.mustache(view.lookup("inputClass"));                                                      // 24
          }                                                                                                            // 25
        }, "\n      ", HTML.BUTTON(HTML.Attrs({                                                                        // 26
          type: "submit"                                                                                               // 27
        }, function() {                                                                                                // 28
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 29
        }), "\n        ", Spacebars.With(function() {                                                                  // 30
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 31
        }, function() {                                                                                                // 32
          return [ "\n        ", Blaze.View("lookup:.", function() {                                                   // 33
            return Spacebars.mustache(view.lookup("."));                                                               // 34
          }), "\n        " ];                                                                                          // 35
        }, function() {                                                                                                // 36
          return "\n        Submit\n        ";                                                                         // 37
        }), "\n      "), "\n    "), "\n  "), "\n  " ];                                                                 // 38
      }), "\n  " ];                                                                                                    // 39
    });                                                                                                                // 40
  });                                                                                                                  // 41
}));                                                                                                                   // 42
                                                                                                                       // 43
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/quickForm/quickForm.js                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template['quickForm_bootstrap3-horizontal'].helpers({                                                                  // 1
  inputClass: function () {                                                                                            // 2
    return this.atts["input-col-class"];                                                                               // 3
  },                                                                                                                   // 4
  labelClass: function () {                                                                                            // 5
    return this.atts["label-class"];                                                                                   // 6
  },                                                                                                                   // 7
  quickFieldsAtts: function () {                                                                                       // 8
    // These are the quickForm attributes that we want to forward to                                                   // 9
    // the afQuickFields component.                                                                                    // 10
    return _.pick(this.atts, 'id-prefix', 'input-col-class', 'label-class');                                           // 11
  },                                                                                                                   // 12
  submitButtonAtts: function () {                                                                                      // 13
    var qfAtts = this.atts;                                                                                            // 14
    var atts = {};                                                                                                     // 15
    if (typeof qfAtts.buttonClasses === "string") {                                                                    // 16
      atts['class'] = qfAtts.buttonClasses;                                                                            // 17
    } else {                                                                                                           // 18
      atts['class'] = 'btn btn-primary';                                                                               // 19
    }                                                                                                                  // 20
    return atts;                                                                                                       // 21
  },                                                                                                                   // 22
  qfAutoFormContext: function () {                                                                                     // 23
    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 24
    ctx = AutoForm.Utility.addClass(ctx, "form-horizontal");                                                           // 25
    delete ctx["input-col-class"];                                                                                     // 26
    delete ctx["label-class"];                                                                                         // 27
    delete ctx["id-prefix"];                                                                                           // 28
    return ctx;                                                                                                        // 29
  }                                                                                                                    // 30
});                                                                                                                    // 31
                                                                                                                       // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afArrayField/template.afArrayField.js           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afArrayField_bootstrap3-horizontal");                                                            // 2
Template["afArrayField_bootstrap3-horizontal"] = new Template("Template.afArrayField_bootstrap3-horizontal", (function() {
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": function() {                                                                                              // 6
      return [ "form-group", Blaze.If(function() {                                                                     // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "atts", "name")                                                        // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return " has-error";                                                                                           // 12
      }) ];                                                                                                            // 13
    }                                                                                                                  // 14
  }, "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15
    return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                    // 16
  }), Blaze.View("lookup:afFieldLabelText", function() {                                                               // 17
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 18
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 19
    }));                                                                                                               // 20
  })), "\n    ", HTML.DIV({                                                                                            // 21
    "class": function() {                                                                                              // 22
      return Spacebars.mustache(view.lookup("rightColumnClass"));                                                      // 23
    }                                                                                                                  // 24
  }, "\n      ", HTML.DIV({                                                                                            // 25
    "class": "panel panel-default autoform-padding-fix"                                                                // 26
  }, "\n        ", Blaze.If(function() {                                                                               // 27
    return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                      // 28
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 29
    }));                                                                                                               // 30
  }, function() {                                                                                                      // 31
    return [ "\n        ", HTML.DIV({                                                                                  // 32
      "class": "panel-body has-error"                                                                                  // 33
    }, "\n          ", HTML.SPAN({                                                                                     // 34
      "class": "help-block"                                                                                            // 35
    }, Blaze.View("lookup:afFieldMessage", function() {                                                                // 36
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                        // 37
        name: Spacebars.dot(view.lookup("."), "atts", "name")                                                          // 38
      })));                                                                                                            // 39
    })), "\n        "), "\n        " ];                                                                                // 40
  }), "\n        ", HTML.UL({                                                                                          // 41
    "class": "list-group"                                                                                              // 42
  }, "\n          ", Blaze._TemplateWith(function() {                                                                  // 43
    return {                                                                                                           // 44
      name: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "name")),                                           // 45
      minCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "minCount")),                                   // 46
      maxCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "maxCount"))                                    // 47
    };                                                                                                                 // 48
  }, function() {                                                                                                      // 49
    return Spacebars.include(view.lookupTemplate("afEachArrayItem"), function() {                                      // 50
      return [ "\n          ", HTML.LI({                                                                               // 51
        "class": "list-group-item autoform-array-item"                                                                 // 52
      }, "\n            ", HTML.DIV("\n              ", HTML.DIV({                                                     // 53
        "class": "autoform-remove-item-wrap"                                                                           // 54
      }, "\n                ", Blaze.If(function() {                                                                   // 55
        return Spacebars.dataMustache(view.lookup("afArrayFieldHasMoreThanMinimum"), Spacebars.kw({                    // 56
          name: Spacebars.dot(view.lookup(".."), "atts", "name"),                                                      // 57
          minCount: Spacebars.dot(view.lookup(".."), "atts", "minCount"),                                              // 58
          maxCount: Spacebars.dot(view.lookup(".."), "atts", "maxCount")                                               // 59
        }));                                                                                                           // 60
      }, function() {                                                                                                  // 61
        return [ "\n                ", HTML.BUTTON({                                                                   // 62
          type: "button",                                                                                              // 63
          "class": "btn btn-primary autoform-remove-item"                                                              // 64
        }, HTML.SPAN({                                                                                                 // 65
          "class": "glyphicon glyphicon-minus"                                                                         // 66
        })), "\n                " ];                                                                                   // 67
      }), "\n              "), "\n              ", HTML.DIV({                                                          // 68
        "class": "autoform-array-item-body"                                                                            // 69
      }, "\n                ", Blaze._TemplateWith(function() {                                                        // 70
        return {                                                                                                       // 71
          name: Spacebars.call(Spacebars.dot(view.lookup("."), "name")),                                               // 72
          label: Spacebars.call(false),                                                                                // 73
          options: Spacebars.call(view.lookup("afOptionsFromSchema"))                                                  // 74
        };                                                                                                             // 75
      }, function() {                                                                                                  // 76
        return Spacebars.include(view.lookupTemplate("afQuickField"));                                                 // 77
      }), "\n              "), "\n            "), "\n          "), "\n          " ];                                   // 78
    });                                                                                                                // 79
  }), "\n          ", Blaze.If(function() {                                                                            // 80
    return Spacebars.dataMustache(view.lookup("afArrayFieldHasLessThanMaximum"), Spacebars.kw({                        // 81
      name: Spacebars.dot(view.lookup("."), "atts", "name"),                                                           // 82
      minCount: Spacebars.dot(view.lookup("."), "atts", "minCount"),                                                   // 83
      maxCount: Spacebars.dot(view.lookup("."), "atts", "maxCount")                                                    // 84
    }));                                                                                                               // 85
  }, function() {                                                                                                      // 86
    return [ "\n          ", HTML.LI({                                                                                 // 87
      "class": "list-group-item"                                                                                       // 88
    }, "\n            ", HTML.BUTTON({                                                                                 // 89
      type: "button",                                                                                                  // 90
      "class": "btn btn-primary autoform-add-item",                                                                    // 91
      "data-autoform-field": function() {                                                                              // 92
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "name"));                                    // 93
      },                                                                                                               // 94
      "data-autoform-mincount": function() {                                                                           // 95
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "minCount"));                                // 96
      },                                                                                                               // 97
      "data-autoform-maxcount": function() {                                                                           // 98
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "maxCount"));                                // 99
      }                                                                                                                // 100
    }, HTML.SPAN({                                                                                                     // 101
      "class": "glyphicon glyphicon-plus"                                                                              // 102
    })), "\n          "), "\n          " ];                                                                            // 103
  }), "\n        "), "\n      "), "\n    "), "\n  ");                                                                  // 104
}));                                                                                                                   // 105
                                                                                                                       // 106
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afArrayField/afArrayField.js                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template["afArrayField_bootstrap3-horizontal"].helpers({                                                               // 1
  rightColumnClass: function () {                                                                                      // 2
    var atts = this.atts || {};                                                                                        // 3
    return atts['input-col-class'] || "";                                                                              // 4
  },                                                                                                                   // 5
  afFieldLabelAtts: function () {                                                                                      // 6
    // Use only atts beginning with label-                                                                             // 7
    var labelAtts = {};                                                                                                // 8
    _.each(this.atts, function (val, key) {                                                                            // 9
      if (key.indexOf("label-") === 0) {                                                                               // 10
        labelAtts[key.substring(6)] = val;                                                                             // 11
      }                                                                                                                // 12
    });                                                                                                                // 13
    // Add bootstrap class                                                                                             // 14
    labelAtts = AutoForm.Utility.addClass(labelAtts, "control-label");                                                 // 15
    return labelAtts;                                                                                                  // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afFormGroup/template.afFormGroup.js             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFormGroup_bootstrap3-horizontal");                                                             // 2
Template["afFormGroup_bootstrap3-horizontal"] = new Template("Template.afFormGroup_bootstrap3-horizontal", (function() {
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": function() {                                                                                              // 6
      return [ "form-group ", Blaze.If(function() {                                                                    // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return "has-error";                                                                                            // 12
      }), " ", Spacebars.mustache(view.lookup("afFormGroupClass")) ];                                                  // 13
    },                                                                                                                 // 14
    "data-required": function() {                                                                                      // 15
      return Spacebars.mustache(view.lookup("required"));                                                              // 16
    }                                                                                                                  // 17
  }, function() {                                                                                                      // 18
    return Spacebars.attrMustache(view.lookup("afFormGroupAtts"));                                                     // 19
  }), "\n    ", Blaze.If(function() {                                                                                  // 20
    return Spacebars.call(view.lookup("skipLabel"));                                                                   // 21
  }, function() {                                                                                                      // 22
    return [ "\n    \n    ", HTML.LABEL(HTML.Attrs(function() {                                                        // 23
      return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                  // 24
    })), "\n    " ];                                                                                                   // 25
  }, function() {                                                                                                      // 26
    return [ "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                              // 27
      return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                  // 28
    }), Blaze.If(function() {                                                                                          // 29
      return Spacebars.call(Spacebars.dot(view.lookup("."), "labelText"));                                             // 30
    }, function() {                                                                                                    // 31
      return Blaze.View("lookup:..labelText", function() {                                                             // 32
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "labelText"));                                       // 33
      });                                                                                                              // 34
    }, function() {                                                                                                    // 35
      return Blaze.View("lookup:afFieldLabelText", function() {                                                        // 36
        return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 37
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 38
        }));                                                                                                           // 39
      });                                                                                                              // 40
    })), "\n    " ];                                                                                                   // 41
  }), "\n    ", HTML.DIV({                                                                                             // 42
    "class": function() {                                                                                              // 43
      return Spacebars.mustache(view.lookup("rightColumnClass"));                                                      // 44
    }                                                                                                                  // 45
  }, "\n      ", Blaze._TemplateWith(function() {                                                                      // 46
    return Spacebars.call(view.lookup("afFieldInputAtts"));                                                            // 47
  }, function() {                                                                                                      // 48
    return Spacebars.include(view.lookupTemplate("afFieldInput"));                                                     // 49
  }), "\n      ", HTML.SPAN({                                                                                          // 50
    "class": "help-block"                                                                                              // 51
  }, Blaze.View("lookup:afFieldMessage", function() {                                                                  // 52
    return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                          // 53
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 54
    })));                                                                                                              // 55
  })), "\n    "), "\n  ");                                                                                             // 56
}));                                                                                                                   // 57
                                                                                                                       // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afFormGroup/afFormGroup.js                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template["afFormGroup_bootstrap3-horizontal"].helpers({                                                                // 1
  afFieldInputAtts: function () {                                                                                      // 2
    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 3
    if ('input-col-class' in atts) {                                                                                   // 4
      delete atts['input-col-class'];                                                                                  // 5
    }                                                                                                                  // 6
    // We have a special template for check boxes, but otherwise we                                                    // 7
    // want to use the same as those defined for bootstrap3 template.                                                  // 8
    if (AutoForm.getInputType(this.afFieldInputAtts) === "boolean-checkbox") {                                         // 9
      atts.template = "bootstrap3-horizontal";                                                                         // 10
    } else {                                                                                                           // 11
      atts.template = "bootstrap3";                                                                                    // 12
    }                                                                                                                  // 13
    return atts;                                                                                                       // 14
  },                                                                                                                   // 15
  afFieldLabelAtts: function () {                                                                                      // 16
    var atts = _.clone(this.afFieldLabelAtts || {});                                                                   // 17
    // Add bootstrap class                                                                                             // 18
    atts = AutoForm.Utility.addClass(atts, "control-label");                                                           // 19
    return atts;                                                                                                       // 20
  },                                                                                                                   // 21
  rightColumnClass: function () {                                                                                      // 22
    var atts = this.afFieldInputAtts || {};                                                                            // 23
    return atts['input-col-class'] || "";                                                                              // 24
  },                                                                                                                   // 25
  skipLabel: function () {                                                                                             // 26
    var self = this;                                                                                                   // 27
                                                                                                                       // 28
    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 29
    return (self.skipLabel || (type === "boolean-checkbox" && !self.afFieldInputAtts.leftLabel));                      // 30
  }                                                                                                                    // 31
});                                                                                                                    // 32
                                                                                                                       // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afObjectField/template.afObjectField.js         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afObjectField_bootstrap3-horizontal");                                                           // 2
Template["afObjectField_bootstrap3-horizontal"] = new Template("Template.afObjectField_bootstrap3-horizontal", (function() {
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": function() {                                                                                              // 6
      return [ "form-group ", Blaze.If(function() {                                                                    // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return "has-error";                                                                                            // 12
      }) ];                                                                                                            // 13
    }                                                                                                                  // 14
  }, "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15
    return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                    // 16
  }), Blaze.View("lookup:afFieldLabelText", function() {                                                               // 17
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 18
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 19
    }));                                                                                                               // 20
  })), "\n    ", HTML.DIV({                                                                                            // 21
    "class": function() {                                                                                              // 22
      return Spacebars.mustache(view.lookup("rightColumnClass"));                                                      // 23
    }                                                                                                                  // 24
  }, "\n      ", HTML.DIV({                                                                                            // 25
    "class": function() {                                                                                              // 26
      return [ "panel panel-default autoform-padding-fix ", Spacebars.mustache(view.lookup("panelClass")) ];           // 27
    }                                                                                                                  // 28
  }, "\n        ", HTML.DIV({                                                                                          // 29
    "class": function() {                                                                                              // 30
      return [ "panel-body ", Spacebars.mustache(view.lookup("bodyClass")) ];                                          // 31
    }                                                                                                                  // 32
  }, "\n          ", Blaze._TemplateWith(function() {                                                                  // 33
    return Spacebars.call(view.lookup("quickFieldsAtts"));                                                             // 34
  }, function() {                                                                                                      // 35
    return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                    // 36
  }), "\n        "), "\n      "), "\n    "), "\n  ");                                                                  // 37
}));                                                                                                                   // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afObjectField/afObjectField.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template["afObjectField_bootstrap3-horizontal"].helpers({                                                              // 3
  rightColumnClass: function () {                                                                                      // 4
    return this['input-col-class'] || "";                                                                              // 5
  },                                                                                                                   // 6
  afFieldLabelAtts: function () {                                                                                      // 7
    // Use only atts beginning with label-                                                                             // 8
    var labelAtts = {};                                                                                                // 9
    _.each(this, function (val, key) {                                                                                 // 10
      if (key.indexOf("label-") === 0) {                                                                               // 11
        labelAtts[key.substring(6)] = val;                                                                             // 12
      }                                                                                                                // 13
    });                                                                                                                // 14
    // Add bootstrap class                                                                                             // 15
    labelAtts = AutoForm.Utility.addClass(labelAtts, "control-label");                                                 // 16
    return labelAtts;                                                                                                  // 17
  },                                                                                                                   // 18
  quickFieldsAtts: function () {                                                                                       // 19
    var atts = _.pick(this, 'name', 'id-prefix');                                                                      // 20
    // We want to default to using bootstrap3 template below this point                                                // 21
    // because we don't want horizontal within horizontal                                                              // 22
    atts.template = 'bootstrap3';                                                                                      // 23
    return atts;                                                                                                       // 24
  }                                                                                                                    // 25
});                                                                                                                    // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/template.boolean-checkbox.js   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckbox_bootstrap3-horizontal");                                                              // 2
Template["afCheckbox_bootstrap3-horizontal"] = new Template("Template.afCheckbox_bootstrap3-horizontal", (function() { // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.lookup("useLeftLabel"));                                                                // 6
  }, function() {                                                                                                      // 7
    return [ "\n  \n  ", HTML.DIV({                                                                                    // 8
      "class": "checkbox"                                                                                              // 9
    }, "\n    ", HTML.INPUT(HTML.Attrs({                                                                               // 10
      type: "checkbox",                                                                                                // 11
      value: "true"                                                                                                    // 12
    }, function() {                                                                                                    // 13
      return Spacebars.attrMustache(view.lookup("attsPlusSpecialClass"));                                              // 14
    })), "\n  "), "\n  " ];                                                                                            // 15
  }, function() {                                                                                                      // 16
    return [ "\n  ", HTML.DIV({                                                                                        // 17
      "class": "checkbox"                                                                                              // 18
    }, "\n    ", HTML.LABEL("\n      ", HTML.INPUT(HTML.Attrs({                                                        // 19
      type: "checkbox",                                                                                                // 20
      value: "true"                                                                                                    // 21
    }, function() {                                                                                                    // 22
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 23
    })), "\n      ", Blaze.View("lookup:afFieldLabelText", function() {                                                // 24
      return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                        // 25
        name: Spacebars.dot(view.lookup("."), "name")                                                                  // 26
      }));                                                                                                             // 27
    }), "\n    "), "\n  "), "\n  " ];                                                                                  // 28
  });                                                                                                                  // 29
}));                                                                                                                   // 30
                                                                                                                       // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/boolean-checkbox.js            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template["afCheckbox_bootstrap3-horizontal"].helpers({                                                                 // 1
  attsPlusSpecialClass: function () {                                                                                  // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    atts = AutoForm.Utility.addClass(atts, "autoform-checkbox-margin-fix");                                            // 4
    return atts;                                                                                                       // 5
  },                                                                                                                   // 6
  useLeftLabel: function () {                                                                                          // 7
    return this.atts.leftLabel;                                                                                        // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-inline/template.bootstrap3-inline.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_bootstrap3-inline");                                                                   // 2
Template["quickForm_bootstrap3-inline"] = new Template("Template.quickForm_bootstrap3-inline", (function() {           // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n    ", Blaze._TemplateWith(function() {                                                              // 9
        return Spacebars.call(view.lookup("quickFieldsAtts"));                                                         // 10
      }, function() {                                                                                                  // 11
        return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                // 12
      }), "\n    ", Blaze.If(function() {                                                                              // 13
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 14
      }, function() {                                                                                                  // 15
        return [ "\n    ", HTML.BUTTON(HTML.Attrs({                                                                    // 16
          type: "submit"                                                                                               // 17
        }, function() {                                                                                                // 18
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 19
        }), "\n    ", Spacebars.With(function() {                                                                      // 20
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 21
        }, function() {                                                                                                // 22
          return [ "\n    ", Blaze.View("lookup:.", function() {                                                       // 23
            return Spacebars.mustache(view.lookup("."));                                                               // 24
          }), "\n    " ];                                                                                              // 25
        }, function() {                                                                                                // 26
          return "\n    Submit\n    ";                                                                                 // 27
        }), "\n    "), "\n    " ];                                                                                     // 28
      }), "\n  " ];                                                                                                    // 29
    });                                                                                                                // 30
  });                                                                                                                  // 31
}));                                                                                                                   // 32
                                                                                                                       // 33
Template.__checkName("afFormGroup_bootstrap3-inline");                                                                 // 34
Template["afFormGroup_bootstrap3-inline"] = new Template("Template.afFormGroup_bootstrap3-inline", (function() {       // 35
  var view = this;                                                                                                     // 36
  return HTML.DIV(HTML.Attrs({                                                                                         // 37
    "class": function() {                                                                                              // 38
      return [ "form-group ", Blaze.If(function() {                                                                    // 39
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 40
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 41
        }));                                                                                                           // 42
      }, function() {                                                                                                  // 43
        return "has-error";                                                                                            // 44
      }), " ", Spacebars.mustache(view.lookup("afFormGroupClass")) ];                                                  // 45
    },                                                                                                                 // 46
    "data-required": function() {                                                                                      // 47
      return Spacebars.mustache(view.lookup("required"));                                                              // 48
    }                                                                                                                  // 49
  }, function() {                                                                                                      // 50
    return Spacebars.attrMustache(view.lookup("afFormGroupAtts"));                                                     // 51
  }), "\n    ", Blaze.Unless(function() {                                                                              // 52
    return Spacebars.call(view.lookup("skipLabel"));                                                                   // 53
  }, function() {                                                                                                      // 54
    return [ "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                              // 55
      return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                  // 56
    }), Blaze.If(function() {                                                                                          // 57
      return Spacebars.call(Spacebars.dot(view.lookup("."), "labelText"));                                             // 58
    }, function() {                                                                                                    // 59
      return Blaze.View("lookup:..labelText", function() {                                                             // 60
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "labelText"));                                       // 61
      });                                                                                                              // 62
    }, function() {                                                                                                    // 63
      return Blaze.View("lookup:afFieldLabelText", function() {                                                        // 64
        return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 65
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 66
        }));                                                                                                           // 67
      });                                                                                                              // 68
    })), "\n    " ];                                                                                                   // 69
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 70
    return Spacebars.call(view.lookup("afFieldInputAtts"));                                                            // 71
  }, function() {                                                                                                      // 72
    return Spacebars.include(view.lookupTemplate("afFieldInput"));                                                     // 73
  }), "\n    ", HTML.SPAN({                                                                                            // 74
    "class": "help-block"                                                                                              // 75
  }, Blaze.View("lookup:afFieldMessage", function() {                                                                  // 76
    return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                          // 77
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 78
    })));                                                                                                              // 79
  })), "\n  ");                                                                                                        // 80
}));                                                                                                                   // 81
                                                                                                                       // 82
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-inline/bootstrap3-inline.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template['quickForm_bootstrap3-inline'].helpers({                                                                      // 3
  submitButtonAtts: function () {                                                                                      // 4
    var qfAtts = this.atts;                                                                                            // 5
    var atts = {};                                                                                                     // 6
    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 7
      atts['class'] = qfAtts.buttonClasses;                                                                            // 8
    } else {                                                                                                           // 9
      atts['class'] = 'btn btn-primary autoform-inline-align';                                                         // 10
    }                                                                                                                  // 11
    return atts;                                                                                                       // 12
  },                                                                                                                   // 13
  qfAutoFormContext: function () {                                                                                     // 14
    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 15
    ctx = AutoForm.Utility.addClass(ctx, 'form-inline');                                                               // 16
    delete ctx['id-prefix'];                                                                                           // 17
    delete ctx['label-class'];                                                                                         // 18
    return ctx;                                                                                                        // 19
  },                                                                                                                   // 20
  quickFieldsAtts: function () {                                                                                       // 21
    // These are the quickForm attributes that we want to forward to                                                   // 22
    // the afQuickFields component.                                                                                    // 23
    return _.pick(this.atts, 'id-prefix', 'label-class');                                                              // 24
  }                                                                                                                    // 25
});                                                                                                                    // 26
                                                                                                                       // 27
Template['afFormGroup_bootstrap3-inline'].helpers({                                                                    // 28
  afFieldInputAtts: function () {                                                                                      // 29
    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 30
    // Use the same templates as those defined for bootstrap3 template.                                                // 31
    atts.template = 'bootstrap3';                                                                                      // 32
    return atts;                                                                                                       // 33
  }                                                                                                                    // 34
});                                                                                                                    // 35
                                                                                                                       // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/quickForm/template.quickForm.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_plain");                                                                               // 2
Template["quickForm_plain"] = new Template("Template.quickForm_plain", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n    ", Blaze._TemplateWith(function() {                                                              // 9
        return Spacebars.call(view.lookup("quickFieldsAtts"));                                                         // 10
      }, function() {                                                                                                  // 11
        return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                // 12
      }), "\n    ", Blaze.If(function() {                                                                              // 13
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 14
      }, function() {                                                                                                  // 15
        return [ "\n    ", HTML.DIV("\n      ", HTML.BUTTON(HTML.Attrs({                                               // 16
          type: "submit"                                                                                               // 17
        }, function() {                                                                                                // 18
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 19
        }), "\n      ", Spacebars.With(function() {                                                                    // 20
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 21
        }, function() {                                                                                                // 22
          return [ "\n      ", Blaze.View("lookup:.", function() {                                                     // 23
            return Spacebars.mustache(view.lookup("."));                                                               // 24
          }), "\n      " ];                                                                                            // 25
        }, function() {                                                                                                // 26
          return "\n      Submit\n      ";                                                                             // 27
        }), "\n      "), "\n    "), "\n    " ];                                                                        // 28
      }), "\n  " ];                                                                                                    // 29
    });                                                                                                                // 30
  });                                                                                                                  // 31
}));                                                                                                                   // 32
                                                                                                                       // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/quickForm/quickForm.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.quickForm_plain.helpers({                                                                                     // 1
  quickFieldsAtts: function () {                                                                                       // 2
    // These are the quickForm attributes that we want to forward to                                                   // 3
    // the afQuickFields component.                                                                                    // 4
    return _.pick(this.atts, 'id-prefix');                                                                             // 5
  },                                                                                                                   // 6
  submitButtonAtts: function plQuickFormSubmitButtonAtts() {                                                           // 7
    var qfAtts = this.atts;                                                                                            // 8
    var atts = {};                                                                                                     // 9
    if (typeof qfAtts.buttonClasses === "string") {                                                                    // 10
      atts['class'] = qfAtts.buttonClasses;                                                                            // 11
    }                                                                                                                  // 12
    return atts;                                                                                                       // 13
  },                                                                                                                   // 14
  qfAutoFormContext: function () {                                                                                     // 15
    var ctx = _.clone(this.qfAutoFormContext);                                                                         // 16
    delete ctx['id-prefix'];                                                                                           // 17
    return ctx;                                                                                                        // 18
  }                                                                                                                    // 19
});                                                                                                                    // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/afArrayField/template.afArrayField.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afArrayField_plain");                                                                            // 2
Template["afArrayField_plain"] = new Template("Template.afArrayField_plain", (function() {                             // 3
  var view = this;                                                                                                     // 4
  return HTML.FIELDSET("\n    ", HTML.LEGEND(Blaze.View("lookup:afFieldLabelText", function() {                        // 5
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 6
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 7
    }));                                                                                                               // 8
  })), "\n    ", Blaze.If(function() {                                                                                 // 9
    return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                      // 10
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 11
    }));                                                                                                               // 12
  }, function() {                                                                                                      // 13
    return [ "\n    ", HTML.DIV({                                                                                      // 14
      "class": "autoform-array-field-error"                                                                            // 15
    }, "\n      ", Blaze.View("lookup:afFieldMessage", function() {                                                    // 16
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                        // 17
        name: Spacebars.dot(view.lookup("."), "atts", "name")                                                          // 18
      })));                                                                                                            // 19
    }), "\n    "), "\n    " ];                                                                                         // 20
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 21
    return {                                                                                                           // 22
      name: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "name")),                                           // 23
      minCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "minCount")),                                   // 24
      maxCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "maxCount"))                                    // 25
    };                                                                                                                 // 26
  }, function() {                                                                                                      // 27
    return Spacebars.include(view.lookupTemplate("afEachArrayItem"), function() {                                      // 28
      return [ "\n    ", HTML.DIV({                                                                                    // 29
        "class": "autoform-array-item"                                                                                 // 30
      }, "\n      ", Blaze._TemplateWith(function() {                                                                  // 31
        return {                                                                                                       // 32
          name: Spacebars.call(Spacebars.dot(view.lookup("."), "name")),                                               // 33
          label: Spacebars.call(false)                                                                                 // 34
        };                                                                                                             // 35
      }, function() {                                                                                                  // 36
        return Spacebars.include(view.lookupTemplate("afQuickField"));                                                 // 37
      }), "\n      ", Blaze.If(function() {                                                                            // 38
        return Spacebars.dataMustache(view.lookup("afArrayFieldHasMoreThanMinimum"), Spacebars.kw({                    // 39
          name: Spacebars.dot(view.lookup(".."), "atts", "name"),                                                      // 40
          minCount: Spacebars.dot(view.lookup(".."), "atts", "minCount"),                                              // 41
          maxCount: Spacebars.dot(view.lookup(".."), "atts", "maxCount")                                               // 42
        }));                                                                                                           // 43
      }, function() {                                                                                                  // 44
        return [ "\n      ", HTML.BUTTON({                                                                             // 45
          type: "button",                                                                                              // 46
          "class": "autoform-remove-item"                                                                              // 47
        }, "Remove"), "\n      " ];                                                                                    // 48
      }), "\n    "), "\n    " ];                                                                                       // 49
    });                                                                                                                // 50
  }), "\n    ", Blaze.If(function() {                                                                                  // 51
    return Spacebars.dataMustache(view.lookup("afArrayFieldHasLessThanMaximum"), Spacebars.kw({                        // 52
      name: Spacebars.dot(view.lookup("."), "atts", "name"),                                                           // 53
      minCount: Spacebars.dot(view.lookup("."), "atts", "minCount"),                                                   // 54
      maxCount: Spacebars.dot(view.lookup("."), "atts", "maxCount")                                                    // 55
    }));                                                                                                               // 56
  }, function() {                                                                                                      // 57
    return [ "\n    ", HTML.DIV({                                                                                      // 58
      style: "margin-top: 20px;"                                                                                       // 59
    }, "\n      ", HTML.BUTTON({                                                                                       // 60
      type: "button",                                                                                                  // 61
      "class": "autoform-add-item",                                                                                    // 62
      "data-autoform-field": function() {                                                                              // 63
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "name"));                                    // 64
      },                                                                                                               // 65
      "data-autoform-mincount": function() {                                                                           // 66
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "minCount"));                                // 67
      },                                                                                                               // 68
      "data-autoform-maxcount": function() {                                                                           // 69
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "maxCount"));                                // 70
      }                                                                                                                // 71
    }, "Add"), "\n    "), "\n    " ];                                                                                  // 72
  }), "\n  ");                                                                                                         // 73
}));                                                                                                                   // 74
                                                                                                                       // 75
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/afFormGroup/template.afFormGroup.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFormGroup_plain");                                                                             // 2
Template["afFormGroup_plain"] = new Template("Template.afFormGroup_plain", (function() {                               // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": function() {                                                                                              // 6
      return [ Blaze.If(function() {                                                                                   // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return "has-error";                                                                                            // 12
      }), " ", Spacebars.mustache(view.lookup("afFormGroupClass")) ];                                                  // 13
    },                                                                                                                 // 14
    "data-required": function() {                                                                                      // 15
      return Spacebars.mustache(view.lookup("required"));                                                              // 16
    }                                                                                                                  // 17
  }, function() {                                                                                                      // 18
    return Spacebars.attrMustache(view.lookup("afFormGroupAtts"));                                                     // 19
  }), "\n    ", Blaze.Unless(function() {                                                                              // 20
    return Spacebars.call(Spacebars.dot(view.lookup("."), "skipLabel"));                                               // 21
  }, function() {                                                                                                      // 22
    return [ "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                              // 23
      return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "afFieldLabelAtts"));                              // 24
    }), Blaze.If(function() {                                                                                          // 25
      return Spacebars.call(Spacebars.dot(view.lookup("."), "labelText"));                                             // 26
    }, function() {                                                                                                    // 27
      return Blaze.View("lookup:..labelText", function() {                                                             // 28
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "labelText"));                                       // 29
      });                                                                                                              // 30
    }, function() {                                                                                                    // 31
      return Blaze.View("lookup:afFieldLabelText", function() {                                                        // 32
        return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 33
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 34
        }));                                                                                                           // 35
      });                                                                                                              // 36
    })), "\n    " ];                                                                                                   // 37
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 38
    return Spacebars.call(Spacebars.dot(view.lookup("."), "afFieldInputAtts"));                                        // 39
  }, function() {                                                                                                      // 40
    return Spacebars.include(view.lookupTemplate("afFieldInput"));                                                     // 41
  }), "\n    ", HTML.SPAN(Blaze.View("lookup:afFieldMessage", function() {                                             // 42
    return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                          // 43
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 44
    })));                                                                                                              // 45
  })), "\n  ");                                                                                                        // 46
}));                                                                                                                   // 47
                                                                                                                       // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/afObjectField/template.afObjectField.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afObjectField_plain");                                                                           // 2
Template["afObjectField_plain"] = new Template("Template.afObjectField_plain", (function() {                           // 3
  var view = this;                                                                                                     // 4
  return HTML.FIELDSET("\n    ", Spacebars.With(function() {                                                           // 5
    return Spacebars.dataMustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 6
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 7
    }));                                                                                                               // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", HTML.LEGEND(Blaze.View("lookup:.", function() {                                                 // 10
      return Spacebars.mustache(view.lookup("."));                                                                     // 11
    })), "\n    " ];                                                                                                   // 12
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 13
    return Spacebars.call(view.lookup("quickFieldsAtts"));                                                             // 14
  }, function() {                                                                                                      // 15
    return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                    // 16
  }), "\n  ");                                                                                                         // 17
}));                                                                                                                   // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/afObjectField/afObjectField.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afObjectField_plain.helpers({                                                                                 // 1
  quickFieldsAtts: function () {                                                                                       // 2
    return _.pick(this, 'name', 'id-prefix');                                                                          // 3
  }                                                                                                                    // 4
});                                                                                                                    // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain-fieldset/template.plain-fieldset.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_plain-fieldset");                                                                      // 2
Template["quickForm_plain-fieldset"] = new Template("Template.quickForm_plain-fieldset", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n    ", HTML.FIELDSET("\n      ", Spacebars.With(function() {                                         // 9
        return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "legend"));                                     // 10
      }, function() {                                                                                                  // 11
        return [ "\n      ", HTML.LEGEND(Blaze.View("lookup:.", function() {                                           // 12
          return Spacebars.mustache(view.lookup("."));                                                                 // 13
        })), "\n      " ];                                                                                             // 14
      }), "\n      ", Blaze._TemplateWith(function() {                                                                 // 15
        return Spacebars.call(view.lookup("quickFieldsAtts"));                                                         // 16
      }, function() {                                                                                                  // 17
        return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                // 18
      }), "\n    "), "\n    ", Blaze.If(function() {                                                                   // 19
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 20
      }, function() {                                                                                                  // 21
        return [ "\n    ", HTML.DIV("\n      ", HTML.BUTTON(HTML.Attrs({                                               // 22
          type: "submit"                                                                                               // 23
        }, function() {                                                                                                // 24
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 25
        }), "\n        ", Spacebars.With(function() {                                                                  // 26
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 27
        }, function() {                                                                                                // 28
          return [ "\n        ", Blaze.View("lookup:.", function() {                                                   // 29
            return Spacebars.mustache(view.lookup("."));                                                               // 30
          }), "\n        " ];                                                                                          // 31
        }, function() {                                                                                                // 32
          return "\n        Submit\n        ";                                                                         // 33
        }), "\n      "), "\n    "), "\n    " ];                                                                        // 34
      }), "\n  " ];                                                                                                    // 35
    });                                                                                                                // 36
  });                                                                                                                  // 37
}));                                                                                                                   // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain-fieldset/plain-fieldset.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template['quickForm_plain-fieldset'].helpers({                                                                         // 1
  quickFieldsAtts: function () {                                                                                       // 2
    // These are the quickForm attributes that we want to forward to                                                   // 3
    // the afQuickFields component.                                                                                    // 4
    return _.pick(this.atts, 'id-prefix');                                                                             // 5
  },                                                                                                                   // 6
  submitButtonAtts: function plfsQuickFormSubmitButtonAtts() {                                                         // 7
    var qfAtts = this.atts;                                                                                            // 8
    var atts = {};                                                                                                     // 9
    if (typeof qfAtts.buttonClasses === "string") {                                                                    // 10
      atts['class'] = qfAtts.buttonClasses;                                                                            // 11
    }                                                                                                                  // 12
    return atts;                                                                                                       // 13
  },                                                                                                                   // 14
  qfAutoFormContext: function () {                                                                                     // 15
    var ctx = _.clone(this.qfAutoFormContext);                                                                         // 16
    delete ctx['id-prefix'];                                                                                           // 17
    return ctx;                                                                                                        // 18
  }                                                                                                                    // 19
});                                                                                                                    // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['aldeed:autoform'] = {
  AutoForm: AutoForm,
  Utility: Utility
};

})();
